
SDCard rider.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007af8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08007c98  08007c98  00017c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800809c  0800809c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800809c  0800809c  0001809c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080a4  080080a4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080a4  080080a4  000180a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080a8  080080a8  000180a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080080ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a8  20000088  08008134  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000730  08008134  00020730  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000150f4  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031c5  00000000  00000000  000351ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00038378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  00039158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001870b  00000000  00000000  00039df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014777  00000000  00000000  000524fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a8f7  00000000  00000000  00066c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1569  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a7c  00000000  00000000  000f15bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007c80 	.word	0x08007c80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08007c80 	.word	0x08007c80

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08c      	sub	sp, #48	; 0x30
 800058c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	f107 031c 	add.w	r3, r7, #28
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	61bb      	str	r3, [r7, #24]
 80005a2:	4bb3      	ldr	r3, [pc, #716]	; (8000870 <MX_GPIO_Init+0x2e8>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4ab2      	ldr	r2, [pc, #712]	; (8000870 <MX_GPIO_Init+0x2e8>)
 80005a8:	f043 0310 	orr.w	r3, r3, #16
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4bb0      	ldr	r3, [pc, #704]	; (8000870 <MX_GPIO_Init+0x2e8>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0310 	and.w	r3, r3, #16
 80005b6:	61bb      	str	r3, [r7, #24]
 80005b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	4bac      	ldr	r3, [pc, #688]	; (8000870 <MX_GPIO_Init+0x2e8>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4aab      	ldr	r2, [pc, #684]	; (8000870 <MX_GPIO_Init+0x2e8>)
 80005c4:	f043 0304 	orr.w	r3, r3, #4
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4ba9      	ldr	r3, [pc, #676]	; (8000870 <MX_GPIO_Init+0x2e8>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0304 	and.w	r3, r3, #4
 80005d2:	617b      	str	r3, [r7, #20]
 80005d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
 80005da:	4ba5      	ldr	r3, [pc, #660]	; (8000870 <MX_GPIO_Init+0x2e8>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4aa4      	ldr	r2, [pc, #656]	; (8000870 <MX_GPIO_Init+0x2e8>)
 80005e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4ba2      	ldr	r3, [pc, #648]	; (8000870 <MX_GPIO_Init+0x2e8>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	4b9e      	ldr	r3, [pc, #632]	; (8000870 <MX_GPIO_Init+0x2e8>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a9d      	ldr	r2, [pc, #628]	; (8000870 <MX_GPIO_Init+0x2e8>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b9b      	ldr	r3, [pc, #620]	; (8000870 <MX_GPIO_Init+0x2e8>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	4b97      	ldr	r3, [pc, #604]	; (8000870 <MX_GPIO_Init+0x2e8>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a96      	ldr	r2, [pc, #600]	; (8000870 <MX_GPIO_Init+0x2e8>)
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b94      	ldr	r3, [pc, #592]	; (8000870 <MX_GPIO_Init+0x2e8>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	4b90      	ldr	r3, [pc, #576]	; (8000870 <MX_GPIO_Init+0x2e8>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a8f      	ldr	r2, [pc, #572]	; (8000870 <MX_GPIO_Init+0x2e8>)
 8000634:	f043 0308 	orr.w	r3, r3, #8
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b8d      	ldr	r3, [pc, #564]	; (8000870 <MX_GPIO_Init+0x2e8>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0308 	and.w	r3, r3, #8
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2108      	movs	r1, #8
 800064a:	488a      	ldr	r0, [pc, #552]	; (8000874 <MX_GPIO_Init+0x2ec>)
 800064c:	f001 fe5a 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	2101      	movs	r1, #1
 8000654:	4888      	ldr	r0, [pc, #544]	; (8000878 <MX_GPIO_Init+0x2f0>)
 8000656:	f001 fe55 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BootIrq_GPIO_Port, BootIrq_Pin, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	2104      	movs	r1, #4
 800065e:	4886      	ldr	r0, [pc, #536]	; (8000878 <MX_GPIO_Init+0x2f0>)
 8000660:	f001 fe50 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	2102      	movs	r1, #2
 8000668:	4884      	ldr	r0, [pc, #528]	; (800087c <MX_GPIO_Init+0x2f4>)
 800066a:	f001 fe4b 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800066e:	2200      	movs	r2, #0
 8000670:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000674:	4882      	ldr	r0, [pc, #520]	; (8000880 <MX_GPIO_Init+0x2f8>)
 8000676:	f001 fe45 	bl	8002304 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800067a:	2304      	movs	r3, #4
 800067c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067e:	2300      	movs	r3, #0
 8000680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	4619      	mov	r1, r3
 800068c:	4879      	ldr	r0, [pc, #484]	; (8000874 <MX_GPIO_Init+0x2ec>)
 800068e:	f001 fa75 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000692:	2308      	movs	r3, #8
 8000694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000696:	2301      	movs	r3, #1
 8000698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	4619      	mov	r1, r3
 80006a8:	4872      	ldr	r0, [pc, #456]	; (8000874 <MX_GPIO_Init+0x2ec>)
 80006aa:	f001 fa67 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80006ae:	2332      	movs	r3, #50	; 0x32
 80006b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006b2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006bc:	f107 031c 	add.w	r3, r7, #28
 80006c0:	4619      	mov	r1, r3
 80006c2:	486c      	ldr	r0, [pc, #432]	; (8000874 <MX_GPIO_Init+0x2ec>)
 80006c4:	f001 fa5a 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80006c8:	2301      	movs	r3, #1
 80006ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	4866      	ldr	r0, [pc, #408]	; (8000878 <MX_GPIO_Init+0x2f0>)
 80006e0:	f001 fa4c 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BootPin_Pin;
 80006e4:	2302      	movs	r3, #2
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006ec:	2302      	movs	r3, #2
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BootPin_GPIO_Port, &GPIO_InitStruct);
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	4619      	mov	r1, r3
 80006f6:	4860      	ldr	r0, [pc, #384]	; (8000878 <MX_GPIO_Init+0x2f0>)
 80006f8:	f001 fa40 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BootIrq_Pin;
 80006fc:	2304      	movs	r3, #4
 80006fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	2301      	movs	r3, #1
 8000702:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000704:	2302      	movs	r3, #2
 8000706:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2300      	movs	r3, #0
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BootIrq_GPIO_Port, &GPIO_InitStruct);
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	4619      	mov	r1, r3
 8000712:	4859      	ldr	r0, [pc, #356]	; (8000878 <MX_GPIO_Init+0x2f0>)
 8000714:	f001 fa32 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000718:	2308      	movs	r3, #8
 800071a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071c:	2302      	movs	r3, #2
 800071e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2300      	movs	r3, #0
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000728:	2305      	movs	r3, #5
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	4851      	ldr	r0, [pc, #324]	; (8000878 <MX_GPIO_Init+0x2f0>)
 8000734:	f001 fa22 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000738:	2301      	movs	r3, #1
 800073a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800073c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	484d      	ldr	r0, [pc, #308]	; (8000884 <MX_GPIO_Init+0x2fc>)
 800074e:	f001 fa15 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000752:	2310      	movs	r3, #16
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000756:	2302      	movs	r3, #2
 8000758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000762:	2306      	movs	r3, #6
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4619      	mov	r1, r3
 800076c:	4845      	ldr	r0, [pc, #276]	; (8000884 <MX_GPIO_Init+0x2fc>)
 800076e:	f001 fa05 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000772:	2302      	movs	r3, #2
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000776:	2301      	movs	r3, #1
 8000778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	4619      	mov	r1, r3
 8000788:	483c      	ldr	r0, [pc, #240]	; (800087c <MX_GPIO_Init+0x2f4>)
 800078a:	f001 f9f7 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800078e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007a0:	2305      	movs	r3, #5
 80007a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	4834      	ldr	r0, [pc, #208]	; (800087c <MX_GPIO_Init+0x2f4>)
 80007ac:	f001 f9e6 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007b0:	f24f 0310 	movw	r3, #61456	; 0xf010
 80007b4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	4619      	mov	r1, r3
 80007c8:	482d      	ldr	r0, [pc, #180]	; (8000880 <MX_GPIO_Init+0x2f8>)
 80007ca:	f001 f9d7 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80007ce:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d4:	2302      	movs	r3, #2
 80007d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2300      	movs	r3, #0
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007e0:	2306      	movs	r3, #6
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	4823      	ldr	r0, [pc, #140]	; (8000878 <MX_GPIO_Init+0x2f0>)
 80007ec:	f001 f9c6 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80007f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	481f      	ldr	r0, [pc, #124]	; (8000884 <MX_GPIO_Init+0x2fc>)
 8000806:	f001 f9b9 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800080a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800080e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800081c:	230a      	movs	r3, #10
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	4817      	ldr	r0, [pc, #92]	; (8000884 <MX_GPIO_Init+0x2fc>)
 8000828:	f001 f9a8 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800082c:	2320      	movs	r3, #32
 800082e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000830:	2300      	movs	r3, #0
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	4810      	ldr	r0, [pc, #64]	; (8000880 <MX_GPIO_Init+0x2f8>)
 8000840:	f001 f99c 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000844:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800084a:	2312      	movs	r3, #18
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800084e:	2301      	movs	r3, #1
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000856:	2304      	movs	r3, #4
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	4806      	ldr	r0, [pc, #24]	; (800087c <MX_GPIO_Init+0x2f4>)
 8000862:	f001 f98b 	bl	8001b7c <HAL_GPIO_Init>

}
 8000866:	bf00      	nop
 8000868:	3730      	adds	r7, #48	; 0x30
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800
 8000874:	40021000 	.word	0x40021000
 8000878:	40020800 	.word	0x40020800
 800087c:	40020400 	.word	0x40020400
 8000880:	40020c00 	.word	0x40020c00
 8000884:	40020000 	.word	0x40020000

08000888 <MY_FLASH_EraseSector>:

uint32_t MY_SectorAddrs;
uint8_t MY_SectorNum;

void MY_FLASH_EraseSector(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 800088c:	f000 ff22 	bl	80016d4 <HAL_FLASH_Unlock>
	//Erase the required Flash sector
	FLASH_Erase_Sector(MY_SectorNum, FLASH_VOLTAGE_RANGE_3);
 8000890:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <MY_FLASH_EraseSector+0x1c>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2102      	movs	r1, #2
 8000896:	4618      	mov	r0, r3
 8000898:	f001 f8fa 	bl	8001a90 <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
 800089c:	f000 ff3c 	bl	8001718 <HAL_FLASH_Lock>
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200001e8 	.word	0x200001e8

080008a8 <MY_FLASH_SetSectorAddrs>:

void MY_FLASH_SetSectorAddrs(uint8_t sector, uint32_t addrs)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	6039      	str	r1, [r7, #0]
 80008b2:	71fb      	strb	r3, [r7, #7]
	MY_SectorNum = sector;
 80008b4:	4a05      	ldr	r2, [pc, #20]	; (80008cc <MY_FLASH_SetSectorAddrs+0x24>)
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	7013      	strb	r3, [r2, #0]
	MY_SectorAddrs = addrs;
 80008ba:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <MY_FLASH_SetSectorAddrs+0x28>)
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	6013      	str	r3, [r2, #0]
}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	200001e8 	.word	0x200001e8
 80008d0:	200001ec 	.word	0x200001ec

080008d4 <MY_FLASH_WriteN>:

// https://github.com/MYaqoobEmbedded/STM32-Tutorials/blob/master/Tutorial%2030%20-%20FLASH%20Memory/MY_FLASH.c
void MY_FLASH_WriteN(uint32_t idx, void *wrBuf, uint32_t Nsize, DataTypeDef dataType)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b088      	sub	sp, #32
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
 80008e0:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = MY_SectorAddrs + idx;
 80008e2:	4b32      	ldr	r3, [pc, #200]	; (80009ac <MY_FLASH_WriteN+0xd8>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	68fa      	ldr	r2, [r7, #12]
 80008e8:	4413      	add	r3, r2
 80008ea:	61fb      	str	r3, [r7, #28]

	//Unlock Flash
	HAL_FLASH_Unlock();
 80008ec:	f000 fef2 	bl	80016d4 <HAL_FLASH_Unlock>
	//Write to Flash
	switch (dataType)
 80008f0:	78fb      	ldrb	r3, [r7, #3]
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d039      	beq.n	800096a <MY_FLASH_WriteN+0x96>
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	dc51      	bgt.n	800099e <MY_FLASH_WriteN+0xca>
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d002      	beq.n	8000904 <MY_FLASH_WriteN+0x30>
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d019      	beq.n	8000936 <MY_FLASH_WriteN+0x62>
 8000902:	e04c      	b.n	800099e <MY_FLASH_WriteN+0xca>
	{
		case DATA_TYPE_8:
			for (uint32_t i = 0; i < Nsize; i++)
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]
 8000908:	e010      	b.n	800092c <MY_FLASH_WriteN+0x58>
			{
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddress, ((uint8_t*) wrBuf)[i]);
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	4413      	add	r3, r2
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	b2da      	uxtb	r2, r3
 8000914:	f04f 0300 	mov.w	r3, #0
 8000918:	69f9      	ldr	r1, [r7, #28]
 800091a:	2000      	movs	r0, #0
 800091c:	f000 fe74 	bl	8001608 <HAL_FLASH_Program>
				flashAddress++;
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	3301      	adds	r3, #1
 8000924:	61fb      	str	r3, [r7, #28]
			for (uint32_t i = 0; i < Nsize; i++)
 8000926:	69bb      	ldr	r3, [r7, #24]
 8000928:	3301      	adds	r3, #1
 800092a:	61bb      	str	r3, [r7, #24]
 800092c:	69ba      	ldr	r2, [r7, #24]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	429a      	cmp	r2, r3
 8000932:	d3ea      	bcc.n	800090a <MY_FLASH_WriteN+0x36>
			}
			break;
 8000934:	e033      	b.n	800099e <MY_FLASH_WriteN+0xca>

		case DATA_TYPE_16:
			for (uint32_t i = 0; i < Nsize; i++)
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
 800093a:	e011      	b.n	8000960 <MY_FLASH_WriteN+0x8c>
			{
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress, ((uint16_t*) wrBuf)[i]);
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	68ba      	ldr	r2, [r7, #8]
 8000942:	4413      	add	r3, r2
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	b29a      	uxth	r2, r3
 8000948:	f04f 0300 	mov.w	r3, #0
 800094c:	69f9      	ldr	r1, [r7, #28]
 800094e:	2001      	movs	r0, #1
 8000950:	f000 fe5a 	bl	8001608 <HAL_FLASH_Program>
				flashAddress += 2;
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	3302      	adds	r3, #2
 8000958:	61fb      	str	r3, [r7, #28]
			for (uint32_t i = 0; i < Nsize; i++)
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	3301      	adds	r3, #1
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	429a      	cmp	r2, r3
 8000966:	d3e9      	bcc.n	800093c <MY_FLASH_WriteN+0x68>
			}
			break;
 8000968:	e019      	b.n	800099e <MY_FLASH_WriteN+0xca>

		case DATA_TYPE_32:
			for (uint32_t i = 0; i < Nsize; i++)
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	e011      	b.n	8000994 <MY_FLASH_WriteN+0xc0>
			{
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress, ((uint32_t*) wrBuf)[i]);
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	68ba      	ldr	r2, [r7, #8]
 8000976:	4413      	add	r3, r2
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	461a      	mov	r2, r3
 800097c:	f04f 0300 	mov.w	r3, #0
 8000980:	69f9      	ldr	r1, [r7, #28]
 8000982:	2002      	movs	r0, #2
 8000984:	f000 fe40 	bl	8001608 <HAL_FLASH_Program>
				flashAddress += 4;
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	3304      	adds	r3, #4
 800098c:	61fb      	str	r3, [r7, #28]
			for (uint32_t i = 0; i < Nsize; i++)
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	3301      	adds	r3, #1
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	429a      	cmp	r2, r3
 800099a:	d3e9      	bcc.n	8000970 <MY_FLASH_WriteN+0x9c>
			}
			break;
 800099c:	bf00      	nop
	}
	//Lock the Flash space
	HAL_FLASH_Lock();
 800099e:	f000 febb 	bl	8001718 <HAL_FLASH_Lock>
}
 80009a2:	bf00      	nop
 80009a4:	3720      	adds	r7, #32
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200001ec 	.word	0x200001ec

080009b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	f5ad 6d47 	sub.w	sp, sp, #3184	; 0xc70
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b8:	f000 fc52 	bl	8001260 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009bc:	f000 f9a0 	bl	8000d00 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	HAL_Delay(2000);
 80009c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009c4:	f000 fcf2 	bl	80013ac <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c8:	f7ff fdde 	bl	8000588 <MX_GPIO_Init>
  MX_SPI1_Init();
 80009cc:	f000 fa58 	bl	8000e80 <MX_SPI1_Init>
  MX_FATFS_Init();
 80009d0:	f003 fbd6 	bl	8004180 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 80009d4:	f000 fb8a 	bl	80010ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	uint32_t t;
	uint32_t fw_step = FW_READ;	// finite state machine currenst state
 80009d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009dc:	f8c7 3c6c 	str.w	r3, [r7, #3180]	; 0xc6c

	uint32_t fw_buf[512];

	// index will be added to offset produced by the beginning sector
	uint32_t idx = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	f8c7 3c68 	str.w	r3, [r7, #3176]	; 0xc68
	uint32_t firmware_size = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	f8c7 3c64 	str.w	r3, [r7, #3172]	; 0xc64

	FATFS FS;
	FIL F;

	if (HAL_GPIO_ReadPin(BootPin_GPIO_Port, BootPin_Pin) == GPIO_PIN_RESET) {
 80009ec:	2102      	movs	r1, #2
 80009ee:	48b2      	ldr	r0, [pc, #712]	; (8000cb8 <main+0x308>)
 80009f0:	f001 fc62 	bl	80022b8 <HAL_GPIO_ReadPin>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d104      	bne.n	8000a04 <main+0x54>
		// pin is not seet, we want to jump to the application
		fw_step = FW_FINISH;
 80009fa:	f242 7310 	movw	r3, #10000	; 0x2710
 80009fe:	f8c7 3c6c 	str.w	r3, [r7, #3180]	; 0xc6c
 8000a02:	e00c      	b.n	8000a1e <main+0x6e>
	} else {
		// communicate with arduino to pull the line down
		HAL_GPIO_WritePin(BootIrq_GPIO_Port, BootIrq_Pin, GPIO_PIN_SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2104      	movs	r1, #4
 8000a08:	48ab      	ldr	r0, [pc, #684]	; (8000cb8 <main+0x308>)
 8000a0a:	f001 fc7b 	bl	8002304 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000a0e:	20c8      	movs	r0, #200	; 0xc8
 8000a10:	f000 fccc 	bl	80013ac <HAL_Delay>
		HAL_GPIO_WritePin(BootIrq_GPIO_Port, BootIrq_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2104      	movs	r1, #4
 8000a18:	48a7      	ldr	r0, [pc, #668]	; (8000cb8 <main+0x308>)
 8000a1a:	f001 fc73 	bl	8002304 <HAL_GPIO_WritePin>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		switch (fw_step)
 8000a1e:	f8d7 3c6c 	ldr.w	r3, [r7, #3180]	; 0xc6c
 8000a22:	4aa6      	ldr	r2, [pc, #664]	; (8000cbc <main+0x30c>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	f000 8144 	beq.w	8000cb2 <main+0x302>
 8000a2a:	f8d7 3c6c 	ldr.w	r3, [r7, #3180]	; 0xc6c
 8000a2e:	4aa3      	ldr	r2, [pc, #652]	; (8000cbc <main+0x30c>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d8f4      	bhi.n	8000a1e <main+0x6e>
 8000a34:	f8d7 3c6c 	ldr.w	r3, [r7, #3180]	; 0xc6c
 8000a38:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	f000 8135 	beq.w	8000cac <main+0x2fc>
 8000a42:	f8d7 3c6c 	ldr.w	r3, [r7, #3180]	; 0xc6c
 8000a46:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d8e7      	bhi.n	8000a1e <main+0x6e>
 8000a4e:	f8d7 3c6c 	ldr.w	r3, [r7, #3180]	; 0xc6c
 8000a52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a56:	d006      	beq.n	8000a66 <main+0xb6>
 8000a58:	f8d7 3c6c 	ldr.w	r3, [r7, #3180]	; 0xc6c
 8000a5c:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8000a60:	f000 8091 	beq.w	8000b86 <main+0x1d6>
 8000a64:	e7db      	b.n	8000a1e <main+0x6e>
		{
			case FW_READ:
				{
				 		// opens the sd card
					if (f_mount(&FS, "", 0) == FR_OK)
 8000a66:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	4994      	ldr	r1, [pc, #592]	; (8000cc0 <main+0x310>)
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f005 fe52 	bl	8006718 <f_mount>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d171      	bne.n	8000b5e <main+0x1ae>
					{
						if (f_open(&F, fileName, FA_READ) == FR_OK)
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	4991      	ldr	r1, [pc, #580]	; (8000cc4 <main+0x314>)
 8000a80:	4618      	mov	r0, r3
 8000a82:	f005 fe8f 	bl	80067a4 <f_open>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d154      	bne.n	8000b36 <main+0x186>
						{
							f_lseek(&F, 0);
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f006 f984 	bl	8006d9e <f_lseek>
							myprintf("Updating firmware\n");
 8000a96:	498c      	ldr	r1, [pc, #560]	; (8000cc8 <main+0x318>)
 8000a98:	488c      	ldr	r0, [pc, #560]	; (8000ccc <main+0x31c>)
 8000a9a:	f006 fcc3 	bl	8007424 <siprintf>
 8000a9e:	488b      	ldr	r0, [pc, #556]	; (8000ccc <main+0x31c>)
 8000aa0:	f7ff fb9e 	bl	80001e0 <strlen>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aac:	4987      	ldr	r1, [pc, #540]	; (8000ccc <main+0x31c>)
 8000aae:	4888      	ldr	r0, [pc, #544]	; (8000cd0 <main+0x320>)
 8000ab0:	f003 f85c 	bl	8003b6c <HAL_UART_Transmit>

							myprintf("Erasing the flash segment\n");
 8000ab4:	4987      	ldr	r1, [pc, #540]	; (8000cd4 <main+0x324>)
 8000ab6:	4885      	ldr	r0, [pc, #532]	; (8000ccc <main+0x31c>)
 8000ab8:	f006 fcb4 	bl	8007424 <siprintf>
 8000abc:	4883      	ldr	r0, [pc, #524]	; (8000ccc <main+0x31c>)
 8000abe:	f7ff fb8f 	bl	80001e0 <strlen>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aca:	4980      	ldr	r1, [pc, #512]	; (8000ccc <main+0x31c>)
 8000acc:	4880      	ldr	r0, [pc, #512]	; (8000cd0 <main+0x320>)
 8000ace:	f003 f84d 	bl	8003b6c <HAL_UART_Transmit>
							myprintf("------------------------------------\n");
 8000ad2:	4981      	ldr	r1, [pc, #516]	; (8000cd8 <main+0x328>)
 8000ad4:	487d      	ldr	r0, [pc, #500]	; (8000ccc <main+0x31c>)
 8000ad6:	f006 fca5 	bl	8007424 <siprintf>
 8000ada:	487c      	ldr	r0, [pc, #496]	; (8000ccc <main+0x31c>)
 8000adc:	f7ff fb80 	bl	80001e0 <strlen>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ae8:	4978      	ldr	r1, [pc, #480]	; (8000ccc <main+0x31c>)
 8000aea:	4879      	ldr	r0, [pc, #484]	; (8000cd0 <main+0x320>)
 8000aec:	f003 f83e 	bl	8003b6c <HAL_UART_Transmit>

							// we choose the last sector, so to make this as safe as possible
							MY_FLASH_SetSectorAddrs(7, MAIN_PROGRAM_START_ADDRESS);
 8000af0:	497a      	ldr	r1, [pc, #488]	; (8000cdc <main+0x32c>)
 8000af2:	2007      	movs	r0, #7
 8000af4:	f7ff fed8 	bl	80008a8 <MY_FLASH_SetSectorAddrs>
							MY_FLASH_EraseSector();
 8000af8:	f7ff fec6 	bl	8000888 <MY_FLASH_EraseSector>

							// TODO: do we need to add here 4 (for vector table relocation);
							// idx = MAIN_PROGRAM_START_ADDRESS;
							idx = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	f8c7 3c68 	str.w	r3, [r7, #3176]	; 0xc68
							fw_step = FW_READ + 20;
 8000b02:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 8000b06:	f8c7 3c6c 	str.w	r3, [r7, #3180]	; 0xc6c

							firmware_size = f_size(&F);
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	f8c7 3c64 	str.w	r3, [r7, #3172]	; 0xc64
							myprintf("Size of firmware: %ld\n", firmware_size);
 8000b12:	f8d7 2c64 	ldr.w	r2, [r7, #3172]	; 0xc64
 8000b16:	4972      	ldr	r1, [pc, #456]	; (8000ce0 <main+0x330>)
 8000b18:	486c      	ldr	r0, [pc, #432]	; (8000ccc <main+0x31c>)
 8000b1a:	f006 fc83 	bl	8007424 <siprintf>
 8000b1e:	486b      	ldr	r0, [pc, #428]	; (8000ccc <main+0x31c>)
 8000b20:	f7ff fb5e 	bl	80001e0 <strlen>
 8000b24:	4603      	mov	r3, r0
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b2c:	4967      	ldr	r1, [pc, #412]	; (8000ccc <main+0x31c>)
 8000b2e:	4868      	ldr	r0, [pc, #416]	; (8000cd0 <main+0x320>)
 8000b30:	f003 f81c 	bl	8003b6c <HAL_UART_Transmit>
					else
					{
						myprintf("There is no sd-card\n");
						fw_step = FW_FINISH;
					}
					break;
 8000b34:	e0be      	b.n	8000cb4 <main+0x304>
							myprintf("There is no firmware file\n");
 8000b36:	496b      	ldr	r1, [pc, #428]	; (8000ce4 <main+0x334>)
 8000b38:	4864      	ldr	r0, [pc, #400]	; (8000ccc <main+0x31c>)
 8000b3a:	f006 fc73 	bl	8007424 <siprintf>
 8000b3e:	4863      	ldr	r0, [pc, #396]	; (8000ccc <main+0x31c>)
 8000b40:	f7ff fb4e 	bl	80001e0 <strlen>
 8000b44:	4603      	mov	r3, r0
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b4c:	495f      	ldr	r1, [pc, #380]	; (8000ccc <main+0x31c>)
 8000b4e:	4860      	ldr	r0, [pc, #384]	; (8000cd0 <main+0x320>)
 8000b50:	f003 f80c 	bl	8003b6c <HAL_UART_Transmit>
							fw_step = FW_FINISH;
 8000b54:	f242 7310 	movw	r3, #10000	; 0x2710
 8000b58:	f8c7 3c6c 	str.w	r3, [r7, #3180]	; 0xc6c
					break;
 8000b5c:	e0aa      	b.n	8000cb4 <main+0x304>
						myprintf("There is no sd-card\n");
 8000b5e:	4962      	ldr	r1, [pc, #392]	; (8000ce8 <main+0x338>)
 8000b60:	485a      	ldr	r0, [pc, #360]	; (8000ccc <main+0x31c>)
 8000b62:	f006 fc5f 	bl	8007424 <siprintf>
 8000b66:	4859      	ldr	r0, [pc, #356]	; (8000ccc <main+0x31c>)
 8000b68:	f7ff fb3a 	bl	80001e0 <strlen>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b74:	4955      	ldr	r1, [pc, #340]	; (8000ccc <main+0x31c>)
 8000b76:	4856      	ldr	r0, [pc, #344]	; (8000cd0 <main+0x320>)
 8000b78:	f002 fff8 	bl	8003b6c <HAL_UART_Transmit>
						fw_step = FW_FINISH;
 8000b7c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000b80:	f8c7 3c6c 	str.w	r3, [r7, #3180]	; 0xc6c
					break;
 8000b84:	e096      	b.n	8000cb4 <main+0x304>
				}


			case FW_READ + 20:	// Flash Firmware
				{
					myprintf("Writing the firmware into flash\n");
 8000b86:	4959      	ldr	r1, [pc, #356]	; (8000cec <main+0x33c>)
 8000b88:	4850      	ldr	r0, [pc, #320]	; (8000ccc <main+0x31c>)
 8000b8a:	f006 fc4b 	bl	8007424 <siprintf>
 8000b8e:	484f      	ldr	r0, [pc, #316]	; (8000ccc <main+0x31c>)
 8000b90:	f7ff fb26 	bl	80001e0 <strlen>
 8000b94:	4603      	mov	r3, r0
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b9c:	494b      	ldr	r1, [pc, #300]	; (8000ccc <main+0x31c>)
 8000b9e:	484c      	ldr	r0, [pc, #304]	; (8000cd0 <main+0x320>)
 8000ba0:	f002 ffe4 	bl	8003b6c <HAL_UART_Transmit>

					if (idx > firmware_size)
 8000ba4:	f8d7 2c68 	ldr.w	r2, [r7, #3176]	; 0xc68
 8000ba8:	f8d7 3c64 	ldr.w	r3, [r7, #3172]	; 0xc64
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d91b      	bls.n	8000be8 <main+0x238>
					{
						myprintf("Done!\n");
 8000bb0:	494f      	ldr	r1, [pc, #316]	; (8000cf0 <main+0x340>)
 8000bb2:	4846      	ldr	r0, [pc, #280]	; (8000ccc <main+0x31c>)
 8000bb4:	f006 fc36 	bl	8007424 <siprintf>
 8000bb8:	4844      	ldr	r0, [pc, #272]	; (8000ccc <main+0x31c>)
 8000bba:	f7ff fb11 	bl	80001e0 <strlen>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bc6:	4941      	ldr	r1, [pc, #260]	; (8000ccc <main+0x31c>)
 8000bc8:	4841      	ldr	r0, [pc, #260]	; (8000cd0 <main+0x320>)
 8000bca:	f002 ffcf 	bl	8003b6c <HAL_UART_Transmit>
						f_unlink(fileName);
 8000bce:	483d      	ldr	r0, [pc, #244]	; (8000cc4 <main+0x314>)
 8000bd0:	f006 faee 	bl	80071b0 <f_unlink>
						// demount the device
						f_mount(NULL, "", 0);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	493a      	ldr	r1, [pc, #232]	; (8000cc0 <main+0x310>)
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f005 fd9d 	bl	8006718 <f_mount>
						fw_step = FW_FINISH;
 8000bde:	f242 7310 	movw	r3, #10000	; 0x2710
 8000be2:	f8c7 3c6c 	str.w	r3, [r7, #3180]	; 0xc6c
						break;
 8000be6:	e065      	b.n	8000cb4 <main+0x304>
					}

					myprintf("Current index: %ld; chunk to write: %d\n", idx, sizeof(fw_buf));
 8000be8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bec:	f8d7 2c68 	ldr.w	r2, [r7, #3176]	; 0xc68
 8000bf0:	4940      	ldr	r1, [pc, #256]	; (8000cf4 <main+0x344>)
 8000bf2:	4836      	ldr	r0, [pc, #216]	; (8000ccc <main+0x31c>)
 8000bf4:	f006 fc16 	bl	8007424 <siprintf>
 8000bf8:	4834      	ldr	r0, [pc, #208]	; (8000ccc <main+0x31c>)
 8000bfa:	f7ff faf1 	bl	80001e0 <strlen>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c06:	4931      	ldr	r1, [pc, #196]	; (8000ccc <main+0x31c>)
 8000c08:	4831      	ldr	r0, [pc, #196]	; (8000cd0 <main+0x320>)
 8000c0a:	f002 ffaf 	bl	8003b6c <HAL_UART_Transmit>

					f_read(&F, &fw_buf, sizeof(fw_buf), (UINT *) &t);
 8000c0e:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 8000c12:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 8000c16:	4638      	mov	r0, r7
 8000c18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c1c:	f005 ff80 	bl	8006b20 <f_read>
					if (t != sizeof(fw_buf))
 8000c20:	f8d7 3c60 	ldr.w	r3, [r7, #3168]	; 0xc60
 8000c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c28:	d030      	beq.n	8000c8c <main+0x2dc>
					{
						if (idx + t + sizeof(fw_buf) > firmware_size) {
 8000c2a:	f8d7 2c60 	ldr.w	r2, [r7, #3168]	; 0xc60
 8000c2e:	f8d7 3c68 	ldr.w	r3, [r7, #3176]	; 0xc68
 8000c32:	4413      	add	r3, r2
 8000c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000c38:	f8d7 2c64 	ldr.w	r2, [r7, #3172]	; 0xc64
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d20f      	bcs.n	8000c60 <main+0x2b0>
							myprintf("Writing last chunk...\n");
 8000c40:	492d      	ldr	r1, [pc, #180]	; (8000cf8 <main+0x348>)
 8000c42:	4822      	ldr	r0, [pc, #136]	; (8000ccc <main+0x31c>)
 8000c44:	f006 fbee 	bl	8007424 <siprintf>
 8000c48:	4820      	ldr	r0, [pc, #128]	; (8000ccc <main+0x31c>)
 8000c4a:	f7ff fac9 	bl	80001e0 <strlen>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c56:	491d      	ldr	r1, [pc, #116]	; (8000ccc <main+0x31c>)
 8000c58:	481d      	ldr	r0, [pc, #116]	; (8000cd0 <main+0x320>)
 8000c5a:	f002 ff87 	bl	8003b6c <HAL_UART_Transmit>
 8000c5e:	e015      	b.n	8000c8c <main+0x2dc>
						} else {
							myprintf("Error while reading from sd, chunk to small: %ld\n", t);
 8000c60:	f8d7 3c60 	ldr.w	r3, [r7, #3168]	; 0xc60
 8000c64:	461a      	mov	r2, r3
 8000c66:	4925      	ldr	r1, [pc, #148]	; (8000cfc <main+0x34c>)
 8000c68:	4818      	ldr	r0, [pc, #96]	; (8000ccc <main+0x31c>)
 8000c6a:	f006 fbdb 	bl	8007424 <siprintf>
 8000c6e:	4817      	ldr	r0, [pc, #92]	; (8000ccc <main+0x31c>)
 8000c70:	f7ff fab6 	bl	80001e0 <strlen>
 8000c74:	4603      	mov	r3, r0
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c7c:	4913      	ldr	r1, [pc, #76]	; (8000ccc <main+0x31c>)
 8000c7e:	4814      	ldr	r0, [pc, #80]	; (8000cd0 <main+0x320>)
 8000c80:	f002 ff74 	bl	8003b6c <HAL_UART_Transmit>
							fw_step = FW_ERROR;
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <main+0x30c>)
 8000c86:	f8c7 3c6c 	str.w	r3, [r7, #3180]	; 0xc6c
							break;
 8000c8a:	e013      	b.n	8000cb4 <main+0x304>


					// for(t = 0; t < sizeof(fw_buf); t += 4)
					//    FLASH_ProgramWord(idx+t, aes_buf[t/4]);

					MY_FLASH_WriteN(idx, fw_buf, sizeof(fw_buf) / sizeof(fw_buf[0]), DATA_TYPE_32);
 8000c8c:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 8000c90:	2302      	movs	r3, #2
 8000c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c96:	f8d7 0c68 	ldr.w	r0, [r7, #3176]	; 0xc68
 8000c9a:	f7ff fe1b 	bl	80008d4 <MY_FLASH_WriteN>

					// as index is counted in bytes
					idx += sizeof(fw_buf);
 8000c9e:	f8d7 3c68 	ldr.w	r3, [r7, #3176]	; 0xc68
 8000ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000ca6:	f8c7 3c68 	str.w	r3, [r7, #3176]	; 0xc68

					break;
 8000caa:	e003      	b.n	8000cb4 <main+0x304>
					break;
				}

			case FW_FINISH:
				{
					ExecMainFW();
 8000cac:	f000 f890 	bl	8000dd0 <ExecMainFW>

					break;
 8000cb0:	e000      	b.n	8000cb4 <main+0x304>
					break;
 8000cb2:	bf00      	nop
		switch (fw_step)
 8000cb4:	e6b3      	b.n	8000a1e <main+0x6e>
 8000cb6:	bf00      	nop
 8000cb8:	40020800 	.word	0x40020800
 8000cbc:	000186a0 	.word	0x000186a0
 8000cc0:	08007c98 	.word	0x08007c98
 8000cc4:	08007fc4 	.word	0x08007fc4
 8000cc8:	08007c9c 	.word	0x08007c9c
 8000ccc:	200000a4 	.word	0x200000a4
 8000cd0:	20000248 	.word	0x20000248
 8000cd4:	08007cb0 	.word	0x08007cb0
 8000cd8:	08007ccc 	.word	0x08007ccc
 8000cdc:	08060000 	.word	0x08060000
 8000ce0:	08007cf4 	.word	0x08007cf4
 8000ce4:	08007d0c 	.word	0x08007d0c
 8000ce8:	08007d28 	.word	0x08007d28
 8000cec:	08007d40 	.word	0x08007d40
 8000cf0:	08007d64 	.word	0x08007d64
 8000cf4:	08007d6c 	.word	0x08007d6c
 8000cf8:	08007d94 	.word	0x08007d94
 8000cfc:	08007dac 	.word	0x08007dac

08000d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b094      	sub	sp, #80	; 0x50
 8000d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d06:	f107 0320 	add.w	r3, r7, #32
 8000d0a:	2230      	movs	r2, #48	; 0x30
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f006 fb80 	bl	8007414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d14:	f107 030c 	add.w	r3, r7, #12
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d24:	2300      	movs	r3, #0
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	4b27      	ldr	r3, [pc, #156]	; (8000dc8 <SystemClock_Config+0xc8>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2c:	4a26      	ldr	r2, [pc, #152]	; (8000dc8 <SystemClock_Config+0xc8>)
 8000d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d32:	6413      	str	r3, [r2, #64]	; 0x40
 8000d34:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <SystemClock_Config+0xc8>)
 8000d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d40:	2300      	movs	r3, #0
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <SystemClock_Config+0xcc>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a20      	ldr	r2, [pc, #128]	; (8000dcc <SystemClock_Config+0xcc>)
 8000d4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <SystemClock_Config+0xcc>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d66:	2302      	movs	r3, #2
 8000d68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d70:	2304      	movs	r3, #4
 8000d72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d74:	23c0      	movs	r3, #192	; 0xc0
 8000d76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d78:	2304      	movs	r3, #4
 8000d7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000d7c:	2308      	movs	r3, #8
 8000d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d80:	f107 0320 	add.w	r3, r7, #32
 8000d84:	4618      	mov	r0, r3
 8000d86:	f001 faef 	bl	8002368 <HAL_RCC_OscConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d90:	f000 f866 	bl	8000e60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d94:	230f      	movs	r3, #15
 8000d96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000da0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000da4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	2103      	movs	r1, #3
 8000db0:	4618      	mov	r0, r3
 8000db2:	f001 fe01 	bl	80029b8 <HAL_RCC_ClockConfig>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000dbc:	f000 f850 	bl	8000e60 <Error_Handler>
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	3750      	adds	r7, #80	; 0x50
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40007000 	.word	0x40007000

08000dd0 <ExecMainFW>:

/* USER CODE BEGIN 4 */
void ExecMainFW()
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
	// setting jump address, +4 bytes as we need to put the
	// irq table in the very beginning
	// uint32_t jumpAddress = *(__IO uint32_t *)(MAIN_PROGRAM_START_ADDRESS + 4);

	// deinit usart
	HAL_UART_DeInit(&huart2);
 8000dd6:	481d      	ldr	r0, [pc, #116]	; (8000e4c <ExecMainFW+0x7c>)
 8000dd8:	f002 fe7c 	bl	8003ad4 <HAL_UART_DeInit>

	// deinit spi and fatfs
	HAL_SPI_DeInit(&hspi1);
 8000ddc:	481c      	ldr	r0, [pc, #112]	; (8000e50 <ExecMainFW+0x80>)
 8000dde:	f002 faf9 	bl	80033d4 <HAL_SPI_DeInit>

	// HAL_USART2_UART_DeInit(&huart2);
	__HAL_RCC_GPIOC_CLK_DISABLE();
 8000de2:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <ExecMainFW+0x84>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a1b      	ldr	r2, [pc, #108]	; (8000e54 <ExecMainFW+0x84>)
 8000de8:	f023 0304 	bic.w	r3, r3, #4
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
	__HAL_RCC_GPIOD_CLK_DISABLE();
 8000dee:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <ExecMainFW+0x84>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a18      	ldr	r2, [pc, #96]	; (8000e54 <ExecMainFW+0x84>)
 8000df4:	f023 0308 	bic.w	r3, r3, #8
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
	__HAL_RCC_GPIOB_CLK_DISABLE();
 8000dfa:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <ExecMainFW+0x84>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a15      	ldr	r2, [pc, #84]	; (8000e54 <ExecMainFW+0x84>)
 8000e00:	f023 0302 	bic.w	r3, r3, #2
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
	__HAL_RCC_GPIOA_CLK_DISABLE();
 8000e06:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <ExecMainFW+0x84>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <ExecMainFW+0x84>)
 8000e0c:	f023 0301 	bic.w	r3, r3, #1
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
	HAL_RCC_DeInit();
 8000e12:	f002 f875 	bl	8002f00 <HAL_RCC_DeInit>
	HAL_DeInit();
 8000e16:	f000 fa45 	bl	80012a4 <HAL_DeInit>
	SysTick->CTRL = 0;
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <ExecMainFW+0x88>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8000e20:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <ExecMainFW+0x88>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <ExecMainFW+0x88>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e2c:	b672      	cpsid	i
}
 8000e2e:	bf00      	nop
	__disable_irq();
	// NVIC_SetVectorTable(NVIC_VectTab_FLASH, MAIN_PROGRAM_START_ADDRESS);
	// SCB->VTOR = MAIN_PROGRAM_START_ADDRESS;
	// __set_MSP(*(__IO uint32_t *) MAIN_PROGRAM_START_ADDRESS);

	const JumpStruct* vector_p = (JumpStruct*) MAIN_PROGRAM_START_ADDRESS;
 8000e30:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <ExecMainFW+0x8c>)
 8000e32:	607b      	str	r3, [r7, #4]
	asm("msr msp, %0; bx %1;" : : "r"(vector_p->stack_addr), "r"(vector_p->func_p));
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	6852      	ldr	r2, [r2, #4]
 8000e3c:	f383 8808 	msr	MSP, r3
 8000e40:	4710      	bx	r2
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000248 	.word	0x20000248
 8000e50:	200001f0 	.word	0x200001f0
 8000e54:	40023800 	.word	0x40023800
 8000e58:	e000e010 	.word	0xe000e010
 8000e5c:	08060000 	.word	0x08060000

08000e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e64:	b672      	cpsid	i
}
 8000e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/*User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {}
 8000e68:	e7fe      	b.n	8000e68 <Error_Handler+0x8>

08000e6a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/*User can add his own implementation to report the file name and line number,
	   ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e84:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000e86:	4a18      	ldr	r2, [pc, #96]	; (8000ee8 <MX_SPI1_Init+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e8a:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000e8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000eac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000eb4:	2230      	movs	r2, #48	; 0x30
 8000eb6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000ecc:	220a      	movs	r2, #10
 8000ece:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ed0:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000ed2:	f002 f8e3 	bl	800309c <HAL_SPI_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000edc:	f7ff ffc0 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200001f0 	.word	0x200001f0
 8000ee8:	40013000 	.word	0x40013000

08000eec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a19      	ldr	r2, [pc, #100]	; (8000f70 <HAL_SPI_MspInit+0x84>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d12b      	bne.n	8000f66 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	4a17      	ldr	r2, [pc, #92]	; (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a10      	ldr	r2, [pc, #64]	; (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f46:	23e0      	movs	r3, #224	; 0xe0
 8000f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f56:	2305      	movs	r3, #5
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4805      	ldr	r0, [pc, #20]	; (8000f78 <HAL_SPI_MspInit+0x8c>)
 8000f62:	f000 fe0b 	bl	8001b7c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f66:	bf00      	nop
 8000f68:	3728      	adds	r7, #40	; 0x28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40013000 	.word	0x40013000
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020000 	.word	0x40020000

08000f7c <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a08      	ldr	r2, [pc, #32]	; (8000fac <HAL_SPI_MspDeInit+0x30>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d109      	bne.n	8000fa2 <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <HAL_SPI_MspDeInit+0x34>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <HAL_SPI_MspDeInit+0x34>)
 8000f94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f98:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8000f9a:	21e0      	movs	r1, #224	; 0xe0
 8000f9c:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <HAL_SPI_MspDeInit+0x38>)
 8000f9e:	f001 f889 	bl	80020b4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40013000 	.word	0x40013000
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <HAL_MspInit+0x4c>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	4a0f      	ldr	r2, [pc, #60]	; (8001004 <HAL_MspInit+0x4c>)
 8000fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <HAL_MspInit+0x4c>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <HAL_MspInit+0x4c>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	4a08      	ldr	r2, [pc, #32]	; (8001004 <HAL_MspInit+0x4c>)
 8000fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_MspInit+0x4c>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ff6:	2007      	movs	r0, #7
 8000ff8:	f000 faae 	bl	8001558 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40023800 	.word	0x40023800

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800100c:	e7fe      	b.n	800100c <NMI_Handler+0x4>

0800100e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <HardFault_Handler+0x4>

08001014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <MemManage_Handler+0x4>

0800101a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <BusFault_Handler+0x4>

08001020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <UsageFault_Handler+0x4>

08001026 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001054:	f000 f98a 	bl	800136c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}

0800105c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001064:	4a14      	ldr	r2, [pc, #80]	; (80010b8 <_sbrk+0x5c>)
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <_sbrk+0x60>)
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <_sbrk+0x64>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d102      	bne.n	800107e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <_sbrk+0x64>)
 800107a:	4a12      	ldr	r2, [pc, #72]	; (80010c4 <_sbrk+0x68>)
 800107c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <_sbrk+0x64>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	429a      	cmp	r2, r3
 800108a:	d207      	bcs.n	800109c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800108c:	f006 f998 	bl	80073c0 <__errno>
 8001090:	4603      	mov	r3, r0
 8001092:	220c      	movs	r2, #12
 8001094:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800109a:	e009      	b.n	80010b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <_sbrk+0x64>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010a2:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <_sbrk+0x64>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <_sbrk+0x64>)
 80010ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ae:	68fb      	ldr	r3, [r7, #12]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20020000 	.word	0x20020000
 80010bc:	00000400 	.word	0x00000400
 80010c0:	200001a4 	.word	0x200001a4
 80010c4:	20000730 	.word	0x20000730

080010c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <SystemInit+0x20>)
 80010ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010d2:	4a05      	ldr	r2, [pc, #20]	; (80010e8 <SystemInit+0x20>)
 80010d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 80010f2:	4a12      	ldr	r2, [pc, #72]	; (800113c <MX_USART2_UART_Init+0x50>)
 80010f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 80010f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001112:	220c      	movs	r2, #12
 8001114:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001124:	f002 fc20 	bl	8003968 <HAL_UART_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800112e:	f7ff fe97 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000248 	.word	0x20000248
 800113c:	40004400 	.word	0x40004400

08001140 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a19      	ldr	r2, [pc, #100]	; (80011c4 <HAL_UART_MspInit+0x84>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d12b      	bne.n	80011ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <HAL_UART_MspInit+0x88>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	4a17      	ldr	r2, [pc, #92]	; (80011c8 <HAL_UART_MspInit+0x88>)
 800116c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001170:	6413      	str	r3, [r2, #64]	; 0x40
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <HAL_UART_MspInit+0x88>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <HAL_UART_MspInit+0x88>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a10      	ldr	r2, [pc, #64]	; (80011c8 <HAL_UART_MspInit+0x88>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <HAL_UART_MspInit+0x88>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800119a:	230c      	movs	r3, #12
 800119c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011aa:	2307      	movs	r3, #7
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	4805      	ldr	r0, [pc, #20]	; (80011cc <HAL_UART_MspInit+0x8c>)
 80011b6:	f000 fce1 	bl	8001b7c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011ba:	bf00      	nop
 80011bc:	3728      	adds	r7, #40	; 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40004400 	.word	0x40004400
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40020000 	.word	0x40020000

080011d0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a08      	ldr	r2, [pc, #32]	; (8001200 <HAL_UART_MspDeInit+0x30>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d109      	bne.n	80011f6 <HAL_UART_MspDeInit+0x26>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_UART_MspDeInit+0x34>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a07      	ldr	r2, [pc, #28]	; (8001204 <HAL_UART_MspDeInit+0x34>)
 80011e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80011ee:	210c      	movs	r1, #12
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <HAL_UART_MspDeInit+0x38>)
 80011f2:	f000 ff5f 	bl	80020b4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40004400 	.word	0x40004400
 8001204:	40023800 	.word	0x40023800
 8001208:	40020000 	.word	0x40020000

0800120c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800120c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001244 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001210:	480d      	ldr	r0, [pc, #52]	; (8001248 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001212:	490e      	ldr	r1, [pc, #56]	; (800124c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001214:	4a0e      	ldr	r2, [pc, #56]	; (8001250 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001228:	4c0b      	ldr	r4, [pc, #44]	; (8001258 <LoopFillZerobss+0x26>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001236:	f7ff ff47 	bl	80010c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800123a:	f006 f8c7 	bl	80073cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123e:	f7ff fbb7 	bl	80009b0 <main>
  bx  lr    
 8001242:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001244:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800124c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001250:	080080ac 	.word	0x080080ac
  ldr r2, =_sbss
 8001254:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001258:	20000730 	.word	0x20000730

0800125c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC_IRQHandler>
	...

08001260 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001264:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <HAL_Init+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <HAL_Init+0x40>)
 800126a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800126e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_Init+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <HAL_Init+0x40>)
 8001276:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800127a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <HAL_Init+0x40>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <HAL_Init+0x40>)
 8001282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001286:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001288:	2003      	movs	r0, #3
 800128a:	f000 f965 	bl	8001558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800128e:	2000      	movs	r0, #0
 8001290:	f000 f83c 	bl	800130c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001294:	f7ff fe90 	bl	8000fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023c00 	.word	0x40023c00

080012a4 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80012a8:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <HAL_DeInit+0x54>)
 80012aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012ae:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <HAL_DeInit+0x54>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <HAL_DeInit+0x54>)
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012bc:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <HAL_DeInit+0x54>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <HAL_DeInit+0x54>)
 80012c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012ca:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <HAL_DeInit+0x54>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <HAL_DeInit+0x54>)
 80012d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012d8:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <HAL_DeInit+0x54>)
 80012dc:	2200      	movs	r2, #0
 80012de:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <HAL_DeInit+0x54>)
 80012e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012e6:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <HAL_DeInit+0x54>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80012ee:	f000 f805 	bl	80012fc <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40023800 	.word	0x40023800

080012fc <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_InitTick+0x54>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_InitTick+0x58>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	4619      	mov	r1, r3
 800131e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001322:	fbb3 f3f1 	udiv	r3, r3, r1
 8001326:	fbb2 f3f3 	udiv	r3, r2, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f960 	bl	80015f0 <HAL_SYSTICK_Config>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e00e      	b.n	8001358 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b0f      	cmp	r3, #15
 800133e:	d80a      	bhi.n	8001356 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001340:	2200      	movs	r2, #0
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001348:	f000 f926 	bl	8001598 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800134c:	4a06      	ldr	r2, [pc, #24]	; (8001368 <HAL_InitTick+0x5c>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	e000      	b.n	8001358 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000000 	.word	0x20000000
 8001364:	20000008 	.word	0x20000008
 8001368:	20000004 	.word	0x20000004

0800136c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_IncTick+0x20>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_IncTick+0x24>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4413      	add	r3, r2
 800137c:	4a04      	ldr	r2, [pc, #16]	; (8001390 <HAL_IncTick+0x24>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000008 	.word	0x20000008
 8001390:	2000028c 	.word	0x2000028c

08001394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return uwTick;
 8001398:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <HAL_GetTick+0x14>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	2000028c 	.word	0x2000028c

080013ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b4:	f7ff ffee 	bl	8001394 <HAL_GetTick>
 80013b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013c4:	d005      	beq.n	80013d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <HAL_Delay+0x44>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4413      	add	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013d2:	bf00      	nop
 80013d4:	f7ff ffde 	bl	8001394 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d8f7      	bhi.n	80013d4 <HAL_Delay+0x28>
  {
  }
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000008 	.word	0x20000008

080013f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001410:	4013      	ands	r3, r2
 8001412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800141c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001426:	4a04      	ldr	r2, [pc, #16]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	60d3      	str	r3, [r2, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <__NVIC_GetPriorityGrouping+0x18>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	f003 0307 	and.w	r3, r3, #7
}
 800144a:	4618      	mov	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	6039      	str	r1, [r7, #0]
 8001462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001468:	2b00      	cmp	r3, #0
 800146a:	db0a      	blt.n	8001482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	b2da      	uxtb	r2, r3
 8001470:	490c      	ldr	r1, [pc, #48]	; (80014a4 <__NVIC_SetPriority+0x4c>)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	0112      	lsls	r2, r2, #4
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	440b      	add	r3, r1
 800147c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001480:	e00a      	b.n	8001498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4908      	ldr	r1, [pc, #32]	; (80014a8 <__NVIC_SetPriority+0x50>)
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	3b04      	subs	r3, #4
 8001490:	0112      	lsls	r2, r2, #4
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	440b      	add	r3, r1
 8001496:	761a      	strb	r2, [r3, #24]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000e100 	.word	0xe000e100
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b089      	sub	sp, #36	; 0x24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f1c3 0307 	rsb	r3, r3, #7
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	bf28      	it	cs
 80014ca:	2304      	movcs	r3, #4
 80014cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3304      	adds	r3, #4
 80014d2:	2b06      	cmp	r3, #6
 80014d4:	d902      	bls.n	80014dc <NVIC_EncodePriority+0x30>
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3b03      	subs	r3, #3
 80014da:	e000      	b.n	80014de <NVIC_EncodePriority+0x32>
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43da      	mvns	r2, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	401a      	ands	r2, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	fa01 f303 	lsl.w	r3, r1, r3
 80014fe:	43d9      	mvns	r1, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	4313      	orrs	r3, r2
         );
}
 8001506:	4618      	mov	r0, r3
 8001508:	3724      	adds	r7, #36	; 0x24
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001524:	d301      	bcc.n	800152a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001526:	2301      	movs	r3, #1
 8001528:	e00f      	b.n	800154a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152a:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <SysTick_Config+0x40>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001532:	210f      	movs	r1, #15
 8001534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001538:	f7ff ff8e 	bl	8001458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <SysTick_Config+0x40>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001542:	4b04      	ldr	r3, [pc, #16]	; (8001554 <SysTick_Config+0x40>)
 8001544:	2207      	movs	r2, #7
 8001546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	e000e010 	.word	0xe000e010

08001558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b07      	cmp	r3, #7
 8001564:	d00f      	beq.n	8001586 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b06      	cmp	r3, #6
 800156a:	d00c      	beq.n	8001586 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b05      	cmp	r3, #5
 8001570:	d009      	beq.n	8001586 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b04      	cmp	r3, #4
 8001576:	d006      	beq.n	8001586 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b03      	cmp	r3, #3
 800157c:	d003      	beq.n	8001586 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800157e:	2192      	movs	r1, #146	; 0x92
 8001580:	4804      	ldr	r0, [pc, #16]	; (8001594 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001582:	f7ff fc72 	bl	8000e6a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ff34 	bl	80013f4 <__NVIC_SetPriorityGrouping>
}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	08007de0 	.word	0x08007de0

08001598 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
 80015a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b0f      	cmp	r3, #15
 80015ae:	d903      	bls.n	80015b8 <HAL_NVIC_SetPriority+0x20>
 80015b0:	21aa      	movs	r1, #170	; 0xaa
 80015b2:	480e      	ldr	r0, [pc, #56]	; (80015ec <HAL_NVIC_SetPriority+0x54>)
 80015b4:	f7ff fc59 	bl	8000e6a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2b0f      	cmp	r3, #15
 80015bc:	d903      	bls.n	80015c6 <HAL_NVIC_SetPriority+0x2e>
 80015be:	21ab      	movs	r1, #171	; 0xab
 80015c0:	480a      	ldr	r0, [pc, #40]	; (80015ec <HAL_NVIC_SetPriority+0x54>)
 80015c2:	f7ff fc52 	bl	8000e6a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c6:	f7ff ff39 	bl	800143c <__NVIC_GetPriorityGrouping>
 80015ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	68b9      	ldr	r1, [r7, #8]
 80015d0:	6978      	ldr	r0, [r7, #20]
 80015d2:	f7ff ff6b 	bl	80014ac <NVIC_EncodePriority>
 80015d6:	4602      	mov	r2, r0
 80015d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015dc:	4611      	mov	r1, r2
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ff3a 	bl	8001458 <__NVIC_SetPriority>
}
 80015e4:	bf00      	nop
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	08007de0 	.word	0x08007de0

080015f0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff ff8b 	bl	8001514 <SysTick_Config>
 80015fe:	4603      	mov	r3, r0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800161a:	4b2b      	ldr	r3, [pc, #172]	; (80016c8 <HAL_FLASH_Program+0xc0>)
 800161c:	7e1b      	ldrb	r3, [r3, #24]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d101      	bne.n	8001626 <HAL_FLASH_Program+0x1e>
 8001622:	2302      	movs	r3, #2
 8001624:	e04b      	b.n	80016be <HAL_FLASH_Program+0xb6>
 8001626:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <HAL_FLASH_Program+0xc0>)
 8001628:	2201      	movs	r2, #1
 800162a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00c      	beq.n	800164c <HAL_FLASH_Program+0x44>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d009      	beq.n	800164c <HAL_FLASH_Program+0x44>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d006      	beq.n	800164c <HAL_FLASH_Program+0x44>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2b03      	cmp	r3, #3
 8001642:	d003      	beq.n	800164c <HAL_FLASH_Program+0x44>
 8001644:	21a4      	movs	r1, #164	; 0xa4
 8001646:	4821      	ldr	r0, [pc, #132]	; (80016cc <HAL_FLASH_Program+0xc4>)
 8001648:	f7ff fc0f 	bl	8000e6a <assert_failed>
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800164c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001650:	f000 f872 	bl	8001738 <FLASH_WaitForLastOperation>
 8001654:	4603      	mov	r3, r0
 8001656:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001658:	7dfb      	ldrb	r3, [r7, #23]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d12b      	bne.n	80016b6 <HAL_FLASH_Program+0xae>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d105      	bne.n	8001670 <HAL_FLASH_Program+0x68>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001664:	783b      	ldrb	r3, [r7, #0]
 8001666:	4619      	mov	r1, r3
 8001668:	68b8      	ldr	r0, [r7, #8]
 800166a:	f000 f96f 	bl	800194c <FLASH_Program_Byte>
 800166e:	e016      	b.n	800169e <HAL_FLASH_Program+0x96>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d105      	bne.n	8001682 <HAL_FLASH_Program+0x7a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001676:	883b      	ldrh	r3, [r7, #0]
 8001678:	4619      	mov	r1, r3
 800167a:	68b8      	ldr	r0, [r7, #8]
 800167c:	f000 f928 	bl	80018d0 <FLASH_Program_HalfWord>
 8001680:	e00d      	b.n	800169e <HAL_FLASH_Program+0x96>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2b02      	cmp	r3, #2
 8001686:	d105      	bne.n	8001694 <HAL_FLASH_Program+0x8c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	4619      	mov	r1, r3
 800168c:	68b8      	ldr	r0, [r7, #8]
 800168e:	f000 f8e1 	bl	8001854 <FLASH_Program_Word>
 8001692:	e004      	b.n	800169e <HAL_FLASH_Program+0x96>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001694:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001698:	68b8      	ldr	r0, [r7, #8]
 800169a:	f000 f88d 	bl	80017b8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800169e:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016a2:	f000 f849 	bl	8001738 <FLASH_WaitForLastOperation>
 80016a6:	4603      	mov	r3, r0
 80016a8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HAL_FLASH_Program+0xc8>)
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	4a08      	ldr	r2, [pc, #32]	; (80016d0 <HAL_FLASH_Program+0xc8>)
 80016b0:	f023 0301 	bic.w	r3, r3, #1
 80016b4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80016b6:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <HAL_FLASH_Program+0xc0>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	761a      	strb	r2, [r3, #24]
  
  return status;
 80016bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000290 	.word	0x20000290
 80016cc:	08007e1c 	.word	0x08007e1c
 80016d0:	40023c00 	.word	0x40023c00

080016d4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <HAL_FLASH_Unlock+0x38>)
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	da0b      	bge.n	80016fe <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <HAL_FLASH_Unlock+0x38>)
 80016e8:	4a09      	ldr	r2, [pc, #36]	; (8001710 <HAL_FLASH_Unlock+0x3c>)
 80016ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80016ec:	4b07      	ldr	r3, [pc, #28]	; (800170c <HAL_FLASH_Unlock+0x38>)
 80016ee:	4a09      	ldr	r2, [pc, #36]	; (8001714 <HAL_FLASH_Unlock+0x40>)
 80016f0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_FLASH_Unlock+0x38>)
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	da01      	bge.n	80016fe <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80016fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001700:	4618      	mov	r0, r3
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	40023c00 	.word	0x40023c00
 8001710:	45670123 	.word	0x45670123
 8001714:	cdef89ab 	.word	0xcdef89ab

08001718 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <HAL_FLASH_Lock+0x1c>)
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	4a04      	ldr	r2, [pc, #16]	; (8001734 <HAL_FLASH_Lock+0x1c>)
 8001722:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001726:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	40023c00 	.word	0x40023c00

08001738 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001744:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <FLASH_WaitForLastOperation+0x78>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800174a:	f7ff fe23 	bl	8001394 <HAL_GetTick>
 800174e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001750:	e010      	b.n	8001774 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001758:	d00c      	beq.n	8001774 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d007      	beq.n	8001770 <FLASH_WaitForLastOperation+0x38>
 8001760:	f7ff fe18 	bl	8001394 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	429a      	cmp	r2, r3
 800176e:	d201      	bcs.n	8001774 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e019      	b.n	80017a8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <FLASH_WaitForLastOperation+0x7c>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1e8      	bne.n	8001752 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <FLASH_WaitForLastOperation+0x7c>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <FLASH_WaitForLastOperation+0x7c>)
 800178e:	2201      	movs	r2, #1
 8001790:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <FLASH_WaitForLastOperation+0x7c>)
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800179e:	f000 f911 	bl	80019c4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
  
}  
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000290 	.word	0x20000290
 80017b4:	40023c00 	.word	0x40023c00

080017b8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80017ca:	d303      	bcc.n	80017d4 <FLASH_Program_DoubleWord+0x1c>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4a1c      	ldr	r2, [pc, #112]	; (8001840 <FLASH_Program_DoubleWord+0x88>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d90c      	bls.n	80017ee <FLASH_Program_DoubleWord+0x36>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4a1b      	ldr	r2, [pc, #108]	; (8001844 <FLASH_Program_DoubleWord+0x8c>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d903      	bls.n	80017e4 <FLASH_Program_DoubleWord+0x2c>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4a1a      	ldr	r2, [pc, #104]	; (8001848 <FLASH_Program_DoubleWord+0x90>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d904      	bls.n	80017ee <FLASH_Program_DoubleWord+0x36>
 80017e4:	f240 2167 	movw	r1, #615	; 0x267
 80017e8:	4818      	ldr	r0, [pc, #96]	; (800184c <FLASH_Program_DoubleWord+0x94>)
 80017ea:	f7ff fb3e 	bl	8000e6a <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80017ee:	4b18      	ldr	r3, [pc, #96]	; (8001850 <FLASH_Program_DoubleWord+0x98>)
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	4a17      	ldr	r2, [pc, #92]	; (8001850 <FLASH_Program_DoubleWord+0x98>)
 80017f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <FLASH_Program_DoubleWord+0x98>)
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	4a14      	ldr	r2, [pc, #80]	; (8001850 <FLASH_Program_DoubleWord+0x98>)
 8001800:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001804:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <FLASH_Program_DoubleWord+0x98>)
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	4a11      	ldr	r2, [pc, #68]	; (8001850 <FLASH_Program_DoubleWord+0x98>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001818:	f3bf 8f6f 	isb	sy
}
 800181c:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800181e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	000a      	movs	r2, r1
 800182c:	2300      	movs	r3, #0
 800182e:	68f9      	ldr	r1, [r7, #12]
 8001830:	3104      	adds	r1, #4
 8001832:	4613      	mov	r3, r2
 8001834:	600b      	str	r3, [r1, #0]
}
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	0807ffff 	.word	0x0807ffff
 8001844:	1fff77ff 	.word	0x1fff77ff
 8001848:	1fff7a0f 	.word	0x1fff7a0f
 800184c:	08007e1c 	.word	0x08007e1c
 8001850:	40023c00 	.word	0x40023c00

08001854 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001864:	d303      	bcc.n	800186e <FLASH_Program_Word+0x1a>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a14      	ldr	r2, [pc, #80]	; (80018bc <FLASH_Program_Word+0x68>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d90c      	bls.n	8001888 <FLASH_Program_Word+0x34>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a13      	ldr	r2, [pc, #76]	; (80018c0 <FLASH_Program_Word+0x6c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d903      	bls.n	800187e <FLASH_Program_Word+0x2a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <FLASH_Program_Word+0x70>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d904      	bls.n	8001888 <FLASH_Program_Word+0x34>
 800187e:	f240 2189 	movw	r1, #649	; 0x289
 8001882:	4811      	ldr	r0, [pc, #68]	; (80018c8 <FLASH_Program_Word+0x74>)
 8001884:	f7ff faf1 	bl	8000e6a <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001888:	4b10      	ldr	r3, [pc, #64]	; (80018cc <FLASH_Program_Word+0x78>)
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	4a0f      	ldr	r2, [pc, #60]	; (80018cc <FLASH_Program_Word+0x78>)
 800188e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001892:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001894:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <FLASH_Program_Word+0x78>)
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	4a0c      	ldr	r2, [pc, #48]	; (80018cc <FLASH_Program_Word+0x78>)
 800189a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800189e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80018a0:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <FLASH_Program_Word+0x78>)
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	4a09      	ldr	r2, [pc, #36]	; (80018cc <FLASH_Program_Word+0x78>)
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	601a      	str	r2, [r3, #0]
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	0807ffff 	.word	0x0807ffff
 80018c0:	1fff77ff 	.word	0x1fff77ff
 80018c4:	1fff7a0f 	.word	0x1fff7a0f
 80018c8:	08007e1c 	.word	0x08007e1c
 80018cc:	40023c00 	.word	0x40023c00

080018d0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80018e2:	d303      	bcc.n	80018ec <FLASH_Program_HalfWord+0x1c>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a14      	ldr	r2, [pc, #80]	; (8001938 <FLASH_Program_HalfWord+0x68>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d90c      	bls.n	8001906 <FLASH_Program_HalfWord+0x36>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a13      	ldr	r2, [pc, #76]	; (800193c <FLASH_Program_HalfWord+0x6c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d903      	bls.n	80018fc <FLASH_Program_HalfWord+0x2c>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a12      	ldr	r2, [pc, #72]	; (8001940 <FLASH_Program_HalfWord+0x70>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d904      	bls.n	8001906 <FLASH_Program_HalfWord+0x36>
 80018fc:	f240 21a2 	movw	r1, #674	; 0x2a2
 8001900:	4810      	ldr	r0, [pc, #64]	; (8001944 <FLASH_Program_HalfWord+0x74>)
 8001902:	f7ff fab2 	bl	8000e6a <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <FLASH_Program_HalfWord+0x78>)
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	4a0f      	ldr	r2, [pc, #60]	; (8001948 <FLASH_Program_HalfWord+0x78>)
 800190c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001910:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001912:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <FLASH_Program_HalfWord+0x78>)
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	4a0c      	ldr	r2, [pc, #48]	; (8001948 <FLASH_Program_HalfWord+0x78>)
 8001918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800191e:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <FLASH_Program_HalfWord+0x78>)
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	4a09      	ldr	r2, [pc, #36]	; (8001948 <FLASH_Program_HalfWord+0x78>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	887a      	ldrh	r2, [r7, #2]
 800192e:	801a      	strh	r2, [r3, #0]
}
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	0807ffff 	.word	0x0807ffff
 800193c:	1fff77ff 	.word	0x1fff77ff
 8001940:	1fff7a0f 	.word	0x1fff7a0f
 8001944:	08007e1c 	.word	0x08007e1c
 8001948:	40023c00 	.word	0x40023c00

0800194c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800195e:	d303      	bcc.n	8001968 <FLASH_Program_Byte+0x1c>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a13      	ldr	r2, [pc, #76]	; (80019b0 <FLASH_Program_Byte+0x64>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d90c      	bls.n	8001982 <FLASH_Program_Byte+0x36>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <FLASH_Program_Byte+0x68>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d903      	bls.n	8001978 <FLASH_Program_Byte+0x2c>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a11      	ldr	r2, [pc, #68]	; (80019b8 <FLASH_Program_Byte+0x6c>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d904      	bls.n	8001982 <FLASH_Program_Byte+0x36>
 8001978:	f240 21bb 	movw	r1, #699	; 0x2bb
 800197c:	480f      	ldr	r0, [pc, #60]	; (80019bc <FLASH_Program_Byte+0x70>)
 800197e:	f7ff fa74 	bl	8000e6a <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <FLASH_Program_Byte+0x74>)
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <FLASH_Program_Byte+0x74>)
 8001988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800198c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <FLASH_Program_Byte+0x74>)
 8001990:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <FLASH_Program_Byte+0x74>)
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <FLASH_Program_Byte+0x74>)
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	4a09      	ldr	r2, [pc, #36]	; (80019c0 <FLASH_Program_Byte+0x74>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	78fa      	ldrb	r2, [r7, #3]
 80019a6:	701a      	strb	r2, [r3, #0]
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	0807ffff 	.word	0x0807ffff
 80019b4:	1fff77ff 	.word	0x1fff77ff
 80019b8:	1fff7a0f 	.word	0x1fff7a0f
 80019bc:	08007e1c 	.word	0x08007e1c
 80019c0:	40023c00 	.word	0x40023c00

080019c4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80019c8:	4b2f      	ldr	r3, [pc, #188]	; (8001a88 <FLASH_SetErrorCode+0xc4>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f003 0310 	and.w	r3, r3, #16
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d008      	beq.n	80019e6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80019d4:	4b2d      	ldr	r3, [pc, #180]	; (8001a8c <FLASH_SetErrorCode+0xc8>)
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	f043 0310 	orr.w	r3, r3, #16
 80019dc:	4a2b      	ldr	r2, [pc, #172]	; (8001a8c <FLASH_SetErrorCode+0xc8>)
 80019de:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80019e0:	4b29      	ldr	r3, [pc, #164]	; (8001a88 <FLASH_SetErrorCode+0xc4>)
 80019e2:	2210      	movs	r2, #16
 80019e4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80019e6:	4b28      	ldr	r3, [pc, #160]	; (8001a88 <FLASH_SetErrorCode+0xc4>)
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	f003 0320 	and.w	r3, r3, #32
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d008      	beq.n	8001a04 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80019f2:	4b26      	ldr	r3, [pc, #152]	; (8001a8c <FLASH_SetErrorCode+0xc8>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	f043 0308 	orr.w	r3, r3, #8
 80019fa:	4a24      	ldr	r2, [pc, #144]	; (8001a8c <FLASH_SetErrorCode+0xc8>)
 80019fc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80019fe:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <FLASH_SetErrorCode+0xc4>)
 8001a00:	2220      	movs	r2, #32
 8001a02:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001a04:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <FLASH_SetErrorCode+0xc4>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d008      	beq.n	8001a22 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001a10:	4b1e      	ldr	r3, [pc, #120]	; (8001a8c <FLASH_SetErrorCode+0xc8>)
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	f043 0304 	orr.w	r3, r3, #4
 8001a18:	4a1c      	ldr	r2, [pc, #112]	; (8001a8c <FLASH_SetErrorCode+0xc8>)
 8001a1a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001a1c:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <FLASH_SetErrorCode+0xc4>)
 8001a1e:	2240      	movs	r2, #64	; 0x40
 8001a20:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001a22:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <FLASH_SetErrorCode+0xc4>)
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d008      	beq.n	8001a40 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001a2e:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <FLASH_SetErrorCode+0xc8>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	f043 0302 	orr.w	r3, r3, #2
 8001a36:	4a15      	ldr	r2, [pc, #84]	; (8001a8c <FLASH_SetErrorCode+0xc8>)
 8001a38:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001a3a:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <FLASH_SetErrorCode+0xc4>)
 8001a3c:	2280      	movs	r2, #128	; 0x80
 8001a3e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <FLASH_SetErrorCode+0xc4>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d009      	beq.n	8001a60 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <FLASH_SetErrorCode+0xc8>)
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	4a0d      	ldr	r2, [pc, #52]	; (8001a8c <FLASH_SetErrorCode+0xc8>)
 8001a56:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <FLASH_SetErrorCode+0xc4>)
 8001a5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a5e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001a60:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <FLASH_SetErrorCode+0xc4>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d008      	beq.n	8001a7e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <FLASH_SetErrorCode+0xc8>)
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	f043 0320 	orr.w	r3, r3, #32
 8001a74:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <FLASH_SetErrorCode+0xc8>)
 8001a76:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <FLASH_SetErrorCode+0xc4>)
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	60da      	str	r2, [r3, #12]
  }
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	40023c00 	.word	0x40023c00
 8001a8c:	20000290 	.word	0x20000290

08001a90 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d019      	beq.n	8001ada <FLASH_Erase_Sector+0x4a>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d016      	beq.n	8001ada <FLASH_Erase_Sector+0x4a>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d013      	beq.n	8001ada <FLASH_Erase_Sector+0x4a>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d010      	beq.n	8001ada <FLASH_Erase_Sector+0x4a>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d00d      	beq.n	8001ada <FLASH_Erase_Sector+0x4a>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b05      	cmp	r3, #5
 8001ac2:	d00a      	beq.n	8001ada <FLASH_Erase_Sector+0x4a>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	d007      	beq.n	8001ada <FLASH_Erase_Sector+0x4a>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b07      	cmp	r3, #7
 8001ace:	d004      	beq.n	8001ada <FLASH_Erase_Sector+0x4a>
 8001ad0:	f240 31db 	movw	r1, #987	; 0x3db
 8001ad4:	4827      	ldr	r0, [pc, #156]	; (8001b74 <FLASH_Erase_Sector+0xe4>)
 8001ad6:	f7ff f9c8 	bl	8000e6a <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 8001ada:	78fb      	ldrb	r3, [r7, #3]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00d      	beq.n	8001afc <FLASH_Erase_Sector+0x6c>
 8001ae0:	78fb      	ldrb	r3, [r7, #3]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d00a      	beq.n	8001afc <FLASH_Erase_Sector+0x6c>
 8001ae6:	78fb      	ldrb	r3, [r7, #3]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d007      	beq.n	8001afc <FLASH_Erase_Sector+0x6c>
 8001aec:	78fb      	ldrb	r3, [r7, #3]
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d004      	beq.n	8001afc <FLASH_Erase_Sector+0x6c>
 8001af2:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 8001af6:	481f      	ldr	r0, [pc, #124]	; (8001b74 <FLASH_Erase_Sector+0xe4>)
 8001af8:	f7ff f9b7 	bl	8000e6a <assert_failed>

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d102      	bne.n	8001b08 <FLASH_Erase_Sector+0x78>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	e010      	b.n	8001b2a <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d103      	bne.n	8001b16 <FLASH_Erase_Sector+0x86>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001b0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	e009      	b.n	8001b2a <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001b16:	78fb      	ldrb	r3, [r7, #3]
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d103      	bne.n	8001b24 <FLASH_Erase_Sector+0x94>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	e002      	b.n	8001b2a <FLASH_Erase_Sector+0x9a>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001b24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b28:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b2a:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <FLASH_Erase_Sector+0xe8>)
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	4a12      	ldr	r2, [pc, #72]	; (8001b78 <FLASH_Erase_Sector+0xe8>)
 8001b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b34:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <FLASH_Erase_Sector+0xe8>)
 8001b38:	691a      	ldr	r2, [r3, #16]
 8001b3a:	490f      	ldr	r1, [pc, #60]	; (8001b78 <FLASH_Erase_Sector+0xe8>)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001b42:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <FLASH_Erase_Sector+0xe8>)
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	4a0c      	ldr	r2, [pc, #48]	; (8001b78 <FLASH_Erase_Sector+0xe8>)
 8001b48:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001b4c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <FLASH_Erase_Sector+0xe8>)
 8001b50:	691a      	ldr	r2, [r3, #16]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4313      	orrs	r3, r2
 8001b58:	4a07      	ldr	r2, [pc, #28]	; (8001b78 <FLASH_Erase_Sector+0xe8>)
 8001b5a:	f043 0302 	orr.w	r3, r3, #2
 8001b5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <FLASH_Erase_Sector+0xe8>)
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <FLASH_Erase_Sector+0xe8>)
 8001b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6a:	6113      	str	r3, [r2, #16]
}
 8001b6c:	bf00      	nop
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	08007e58 	.word	0x08007e58
 8001b78:	40023c00 	.word	0x40023c00

08001b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a33      	ldr	r2, [pc, #204]	; (8001c64 <HAL_GPIO_Init+0xe8>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d017      	beq.n	8001bca <HAL_GPIO_Init+0x4e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a32      	ldr	r2, [pc, #200]	; (8001c68 <HAL_GPIO_Init+0xec>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d013      	beq.n	8001bca <HAL_GPIO_Init+0x4e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a31      	ldr	r2, [pc, #196]	; (8001c6c <HAL_GPIO_Init+0xf0>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d00f      	beq.n	8001bca <HAL_GPIO_Init+0x4e>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a30      	ldr	r2, [pc, #192]	; (8001c70 <HAL_GPIO_Init+0xf4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d00b      	beq.n	8001bca <HAL_GPIO_Init+0x4e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a2f      	ldr	r2, [pc, #188]	; (8001c74 <HAL_GPIO_Init+0xf8>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d007      	beq.n	8001bca <HAL_GPIO_Init+0x4e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a2e      	ldr	r2, [pc, #184]	; (8001c78 <HAL_GPIO_Init+0xfc>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_Init+0x4e>
 8001bc2:	21ac      	movs	r1, #172	; 0xac
 8001bc4:	482d      	ldr	r0, [pc, #180]	; (8001c7c <HAL_GPIO_Init+0x100>)
 8001bc6:	f7ff f950 	bl	8000e6a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <HAL_GPIO_Init+0x64>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	0c1b      	lsrs	r3, r3, #16
 8001bda:	041b      	lsls	r3, r3, #16
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_GPIO_Init+0x6c>
 8001be0:	21ad      	movs	r1, #173	; 0xad
 8001be2:	4826      	ldr	r0, [pc, #152]	; (8001c7c <HAL_GPIO_Init+0x100>)
 8001be4:	f7ff f941 	bl	8000e6a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d035      	beq.n	8001c5c <HAL_GPIO_Init+0xe0>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d031      	beq.n	8001c5c <HAL_GPIO_Init+0xe0>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b11      	cmp	r3, #17
 8001bfe:	d02d      	beq.n	8001c5c <HAL_GPIO_Init+0xe0>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d029      	beq.n	8001c5c <HAL_GPIO_Init+0xe0>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b12      	cmp	r3, #18
 8001c0e:	d025      	beq.n	8001c5c <HAL_GPIO_Init+0xe0>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001c18:	d020      	beq.n	8001c5c <HAL_GPIO_Init+0xe0>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001c22:	d01b      	beq.n	8001c5c <HAL_GPIO_Init+0xe0>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001c2c:	d016      	beq.n	8001c5c <HAL_GPIO_Init+0xe0>
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001c36:	d011      	beq.n	8001c5c <HAL_GPIO_Init+0xe0>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001c40:	d00c      	beq.n	8001c5c <HAL_GPIO_Init+0xe0>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001c4a:	d007      	beq.n	8001c5c <HAL_GPIO_Init+0xe0>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	d003      	beq.n	8001c5c <HAL_GPIO_Init+0xe0>
 8001c54:	21ae      	movs	r1, #174	; 0xae
 8001c56:	4809      	ldr	r0, [pc, #36]	; (8001c7c <HAL_GPIO_Init+0x100>)
 8001c58:	f7ff f907 	bl	8000e6a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
 8001c60:	e211      	b.n	8002086 <HAL_GPIO_Init+0x50a>
 8001c62:	bf00      	nop
 8001c64:	40020000 	.word	0x40020000
 8001c68:	40020400 	.word	0x40020400
 8001c6c:	40020800 	.word	0x40020800
 8001c70:	40020c00 	.word	0x40020c00
 8001c74:	40021000 	.word	0x40021000
 8001c78:	40021c00 	.word	0x40021c00
 8001c7c:	08007e98 	.word	0x08007e98
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c80:	2201      	movs	r2, #1
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	f040 81f1 	bne.w	8002080 <HAL_GPIO_Init+0x504>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d005      	beq.n	8001cb6 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d144      	bne.n	8001d40 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00f      	beq.n	8001cde <HAL_GPIO_Init+0x162>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d00b      	beq.n	8001cde <HAL_GPIO_Init+0x162>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d007      	beq.n	8001cde <HAL_GPIO_Init+0x162>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_Init+0x162>
 8001cd6:	21c0      	movs	r1, #192	; 0xc0
 8001cd8:	489f      	ldr	r0, [pc, #636]	; (8001f58 <HAL_GPIO_Init+0x3dc>)
 8001cda:	f7ff f8c6 	bl	8000e6a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	2203      	movs	r2, #3
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d14:	2201      	movs	r2, #1
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	f003 0201 	and.w	r2, r3, #1
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d027      	beq.n	8001d9c <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00b      	beq.n	8001d6c <HAL_GPIO_Init+0x1f0>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d007      	beq.n	8001d6c <HAL_GPIO_Init+0x1f0>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x1f0>
 8001d64:	21d1      	movs	r1, #209	; 0xd1
 8001d66:	487c      	ldr	r0, [pc, #496]	; (8001f58 <HAL_GPIO_Init+0x3dc>)
 8001d68:	f7ff f87f 	bl	8000e6a <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	2203      	movs	r2, #3
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	f040 80a0 	bne.w	8001eea <HAL_GPIO_Init+0x36e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d077      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	2b09      	cmp	r3, #9
 8001db8:	d073      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d06f      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d06b      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d067      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d063      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d05f      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d05b      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d057      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d053      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d04f      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d04b      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d047      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d043      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	2b05      	cmp	r3, #5
 8001e20:	d03f      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	2b05      	cmp	r3, #5
 8001e28:	d03b      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	2b05      	cmp	r3, #5
 8001e30:	d037      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	2b06      	cmp	r3, #6
 8001e38:	d033      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	2b06      	cmp	r3, #6
 8001e40:	d02f      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	2b05      	cmp	r3, #5
 8001e48:	d02b      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	2b06      	cmp	r3, #6
 8001e50:	d027      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	2b07      	cmp	r3, #7
 8001e58:	d023      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	2b07      	cmp	r3, #7
 8001e60:	d01f      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	2b07      	cmp	r3, #7
 8001e68:	d01b      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d017      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	2b0a      	cmp	r3, #10
 8001e78:	d013      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	2b09      	cmp	r3, #9
 8001e80:	d00f      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	2b09      	cmp	r3, #9
 8001e88:	d00b      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	2b0c      	cmp	r3, #12
 8001e90:	d007      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	2b0f      	cmp	r3, #15
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_Init+0x326>
 8001e9a:	21de      	movs	r1, #222	; 0xde
 8001e9c:	482e      	ldr	r0, [pc, #184]	; (8001f58 <HAL_GPIO_Init+0x3dc>)
 8001e9e:	f7fe ffe4 	bl	8000e6a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	08da      	lsrs	r2, r3, #3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3208      	adds	r2, #8
 8001eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	220f      	movs	r2, #15
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	691a      	ldr	r2, [r3, #16]
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	08da      	lsrs	r2, r3, #3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3208      	adds	r2, #8
 8001ee4:	69b9      	ldr	r1, [r7, #24]
 8001ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 0203 	and.w	r2, r3, #3
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 80aa 	beq.w	8002080 <HAL_GPIO_Init+0x504>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <HAL_GPIO_Init+0x3e0>)
 8001f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f34:	4a09      	ldr	r2, [pc, #36]	; (8001f5c <HAL_GPIO_Init+0x3e0>)
 8001f36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f3a:	6453      	str	r3, [r2, #68]	; 0x44
 8001f3c:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <HAL_GPIO_Init+0x3e0>)
 8001f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f48:	4a05      	ldr	r2, [pc, #20]	; (8001f60 <HAL_GPIO_Init+0x3e4>)
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	3302      	adds	r3, #2
 8001f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f54:	e006      	b.n	8001f64 <HAL_GPIO_Init+0x3e8>
 8001f56:	bf00      	nop
 8001f58:	08007e98 	.word	0x08007e98
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40013800 	.word	0x40013800
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	220f      	movs	r2, #15
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a46      	ldr	r2, [pc, #280]	; (8002098 <HAL_GPIO_Init+0x51c>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d019      	beq.n	8001fb8 <HAL_GPIO_Init+0x43c>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a45      	ldr	r2, [pc, #276]	; (800209c <HAL_GPIO_Init+0x520>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d013      	beq.n	8001fb4 <HAL_GPIO_Init+0x438>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a44      	ldr	r2, [pc, #272]	; (80020a0 <HAL_GPIO_Init+0x524>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d00d      	beq.n	8001fb0 <HAL_GPIO_Init+0x434>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a43      	ldr	r2, [pc, #268]	; (80020a4 <HAL_GPIO_Init+0x528>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d007      	beq.n	8001fac <HAL_GPIO_Init+0x430>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a42      	ldr	r2, [pc, #264]	; (80020a8 <HAL_GPIO_Init+0x52c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d101      	bne.n	8001fa8 <HAL_GPIO_Init+0x42c>
 8001fa4:	2304      	movs	r3, #4
 8001fa6:	e008      	b.n	8001fba <HAL_GPIO_Init+0x43e>
 8001fa8:	2307      	movs	r3, #7
 8001faa:	e006      	b.n	8001fba <HAL_GPIO_Init+0x43e>
 8001fac:	2303      	movs	r3, #3
 8001fae:	e004      	b.n	8001fba <HAL_GPIO_Init+0x43e>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e002      	b.n	8001fba <HAL_GPIO_Init+0x43e>
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <HAL_GPIO_Init+0x43e>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	f002 0203 	and.w	r2, r2, #3
 8001fc0:	0092      	lsls	r2, r2, #2
 8001fc2:	4093      	lsls	r3, r2
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fca:	4938      	ldr	r1, [pc, #224]	; (80020ac <HAL_GPIO_Init+0x530>)
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	089b      	lsrs	r3, r3, #2
 8001fd0:	3302      	adds	r3, #2
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fd8:	4b35      	ldr	r3, [pc, #212]	; (80020b0 <HAL_GPIO_Init+0x534>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ffc:	4a2c      	ldr	r2, [pc, #176]	; (80020b0 <HAL_GPIO_Init+0x534>)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002002:	4b2b      	ldr	r3, [pc, #172]	; (80020b0 <HAL_GPIO_Init+0x534>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	43db      	mvns	r3, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4013      	ands	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002026:	4a22      	ldr	r2, [pc, #136]	; (80020b0 <HAL_GPIO_Init+0x534>)
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800202c:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <HAL_GPIO_Init+0x534>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002050:	4a17      	ldr	r2, [pc, #92]	; (80020b0 <HAL_GPIO_Init+0x534>)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002056:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <HAL_GPIO_Init+0x534>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x4fe>
        {
          temp |= iocurrent;
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800207a:	4a0d      	ldr	r2, [pc, #52]	; (80020b0 <HAL_GPIO_Init+0x534>)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	3301      	adds	r3, #1
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	2b0f      	cmp	r3, #15
 800208a:	f67f adf9 	bls.w	8001c80 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 800208e:	bf00      	nop
 8002090:	bf00      	nop
 8002092:	3720      	adds	r7, #32
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40020000 	.word	0x40020000
 800209c:	40020400 	.word	0x40020400
 80020a0:	40020800 	.word	0x40020800
 80020a4:	40020c00 	.word	0x40020c00
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40013800 	.word	0x40013800
 80020b0:	40013c00 	.word	0x40013c00

080020b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a71      	ldr	r2, [pc, #452]	; (8002294 <HAL_GPIO_DeInit+0x1e0>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d018      	beq.n	8002104 <HAL_GPIO_DeInit+0x50>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a70      	ldr	r2, [pc, #448]	; (8002298 <HAL_GPIO_DeInit+0x1e4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d014      	beq.n	8002104 <HAL_GPIO_DeInit+0x50>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a6f      	ldr	r2, [pc, #444]	; (800229c <HAL_GPIO_DeInit+0x1e8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d010      	beq.n	8002104 <HAL_GPIO_DeInit+0x50>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a6e      	ldr	r2, [pc, #440]	; (80022a0 <HAL_GPIO_DeInit+0x1ec>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d00c      	beq.n	8002104 <HAL_GPIO_DeInit+0x50>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a6d      	ldr	r2, [pc, #436]	; (80022a4 <HAL_GPIO_DeInit+0x1f0>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d008      	beq.n	8002104 <HAL_GPIO_DeInit+0x50>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a6c      	ldr	r2, [pc, #432]	; (80022a8 <HAL_GPIO_DeInit+0x1f4>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d004      	beq.n	8002104 <HAL_GPIO_DeInit+0x50>
 80020fa:	f44f 7197 	mov.w	r1, #302	; 0x12e
 80020fe:	486b      	ldr	r0, [pc, #428]	; (80022ac <HAL_GPIO_DeInit+0x1f8>)
 8002100:	f7fe feb3 	bl	8000e6a <assert_failed>
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	e0bb      	b.n	8002282 <HAL_GPIO_DeInit+0x1ce>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800210a:	2201      	movs	r2, #1
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4013      	ands	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	429a      	cmp	r2, r3
 8002122:	f040 80ab 	bne.w	800227c <HAL_GPIO_DeInit+0x1c8>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002126:	4a62      	ldr	r2, [pc, #392]	; (80022b0 <HAL_GPIO_DeInit+0x1fc>)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	089b      	lsrs	r3, r3, #2
 800212c:	3302      	adds	r3, #2
 800212e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002132:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	220f      	movs	r2, #15
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	4013      	ands	r3, r2
 8002146:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a52      	ldr	r2, [pc, #328]	; (8002294 <HAL_GPIO_DeInit+0x1e0>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d019      	beq.n	8002184 <HAL_GPIO_DeInit+0xd0>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a51      	ldr	r2, [pc, #324]	; (8002298 <HAL_GPIO_DeInit+0x1e4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d013      	beq.n	8002180 <HAL_GPIO_DeInit+0xcc>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a50      	ldr	r2, [pc, #320]	; (800229c <HAL_GPIO_DeInit+0x1e8>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d00d      	beq.n	800217c <HAL_GPIO_DeInit+0xc8>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a4f      	ldr	r2, [pc, #316]	; (80022a0 <HAL_GPIO_DeInit+0x1ec>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d007      	beq.n	8002178 <HAL_GPIO_DeInit+0xc4>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a4e      	ldr	r2, [pc, #312]	; (80022a4 <HAL_GPIO_DeInit+0x1f0>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d101      	bne.n	8002174 <HAL_GPIO_DeInit+0xc0>
 8002170:	2304      	movs	r3, #4
 8002172:	e008      	b.n	8002186 <HAL_GPIO_DeInit+0xd2>
 8002174:	2307      	movs	r3, #7
 8002176:	e006      	b.n	8002186 <HAL_GPIO_DeInit+0xd2>
 8002178:	2303      	movs	r3, #3
 800217a:	e004      	b.n	8002186 <HAL_GPIO_DeInit+0xd2>
 800217c:	2302      	movs	r3, #2
 800217e:	e002      	b.n	8002186 <HAL_GPIO_DeInit+0xd2>
 8002180:	2301      	movs	r3, #1
 8002182:	e000      	b.n	8002186 <HAL_GPIO_DeInit+0xd2>
 8002184:	2300      	movs	r3, #0
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	f002 0203 	and.w	r2, r2, #3
 800218c:	0092      	lsls	r2, r2, #2
 800218e:	4093      	lsls	r3, r2
 8002190:	68ba      	ldr	r2, [r7, #8]
 8002192:	429a      	cmp	r2, r3
 8002194:	d132      	bne.n	80021fc <HAL_GPIO_DeInit+0x148>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002196:	4b47      	ldr	r3, [pc, #284]	; (80022b4 <HAL_GPIO_DeInit+0x200>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	43db      	mvns	r3, r3
 800219e:	4945      	ldr	r1, [pc, #276]	; (80022b4 <HAL_GPIO_DeInit+0x200>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80021a4:	4b43      	ldr	r3, [pc, #268]	; (80022b4 <HAL_GPIO_DeInit+0x200>)
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	43db      	mvns	r3, r3
 80021ac:	4941      	ldr	r1, [pc, #260]	; (80022b4 <HAL_GPIO_DeInit+0x200>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80021b2:	4b40      	ldr	r3, [pc, #256]	; (80022b4 <HAL_GPIO_DeInit+0x200>)
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	43db      	mvns	r3, r3
 80021ba:	493e      	ldr	r1, [pc, #248]	; (80022b4 <HAL_GPIO_DeInit+0x200>)
 80021bc:	4013      	ands	r3, r2
 80021be:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80021c0:	4b3c      	ldr	r3, [pc, #240]	; (80022b4 <HAL_GPIO_DeInit+0x200>)
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	43db      	mvns	r3, r3
 80021c8:	493a      	ldr	r1, [pc, #232]	; (80022b4 <HAL_GPIO_DeInit+0x200>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f003 0303 	and.w	r3, r3, #3
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	220f      	movs	r2, #15
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80021de:	4a34      	ldr	r2, [pc, #208]	; (80022b0 <HAL_GPIO_DeInit+0x1fc>)
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	089b      	lsrs	r3, r3, #2
 80021e4:	3302      	adds	r3, #2
 80021e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	43da      	mvns	r2, r3
 80021ee:	4830      	ldr	r0, [pc, #192]	; (80022b0 <HAL_GPIO_DeInit+0x1fc>)
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	089b      	lsrs	r3, r3, #2
 80021f4:	400a      	ands	r2, r1
 80021f6:	3302      	adds	r3, #2
 80021f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	2103      	movs	r1, #3
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	401a      	ands	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	08da      	lsrs	r2, r3, #3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3208      	adds	r2, #8
 800221a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	220f      	movs	r2, #15
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	08d2      	lsrs	r2, r2, #3
 8002232:	4019      	ands	r1, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3208      	adds	r2, #8
 8002238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	2103      	movs	r1, #3
 8002246:	fa01 f303 	lsl.w	r3, r1, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	401a      	ands	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	2101      	movs	r1, #1
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	401a      	ands	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	2103      	movs	r1, #3
 8002270:	fa01 f303 	lsl.w	r3, r1, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	401a      	ands	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	3301      	adds	r3, #1
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2b0f      	cmp	r3, #15
 8002286:	f67f af40 	bls.w	800210a <HAL_GPIO_DeInit+0x56>
    }
  }
}
 800228a:	bf00      	nop
 800228c:	bf00      	nop
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40020000 	.word	0x40020000
 8002298:	40020400 	.word	0x40020400
 800229c:	40020800 	.word	0x40020800
 80022a0:	40020c00 	.word	0x40020c00
 80022a4:	40021000 	.word	0x40021000
 80022a8:	40021c00 	.word	0x40021c00
 80022ac:	08007e98 	.word	0x08007e98
 80022b0:	40013800 	.word	0x40013800
 80022b4:	40013c00 	.word	0x40013c00

080022b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80022c4:	887b      	ldrh	r3, [r7, #2]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d004      	beq.n	80022d4 <HAL_GPIO_ReadPin+0x1c>
 80022ca:	887b      	ldrh	r3, [r7, #2]
 80022cc:	0c1b      	lsrs	r3, r3, #16
 80022ce:	041b      	lsls	r3, r3, #16
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d004      	beq.n	80022de <HAL_GPIO_ReadPin+0x26>
 80022d4:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80022d8:	4809      	ldr	r0, [pc, #36]	; (8002300 <HAL_GPIO_ReadPin+0x48>)
 80022da:	f7fe fdc6 	bl	8000e6a <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691a      	ldr	r2, [r3, #16]
 80022e2:	887b      	ldrh	r3, [r7, #2]
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d002      	beq.n	80022f0 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 80022ea:	2301      	movs	r3, #1
 80022ec:	73fb      	strb	r3, [r7, #15]
 80022ee:	e001      	b.n	80022f4 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022f0:	2300      	movs	r3, #0
 80022f2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	08007e98 	.word	0x08007e98

08002304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	807b      	strh	r3, [r7, #2]
 8002310:	4613      	mov	r3, r2
 8002312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002314:	887b      	ldrh	r3, [r7, #2]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d004      	beq.n	8002324 <HAL_GPIO_WritePin+0x20>
 800231a:	887b      	ldrh	r3, [r7, #2]
 800231c:	0c1b      	lsrs	r3, r3, #16
 800231e:	041b      	lsls	r3, r3, #16
 8002320:	2b00      	cmp	r3, #0
 8002322:	d004      	beq.n	800232e <HAL_GPIO_WritePin+0x2a>
 8002324:	f240 119d 	movw	r1, #413	; 0x19d
 8002328:	480e      	ldr	r0, [pc, #56]	; (8002364 <HAL_GPIO_WritePin+0x60>)
 800232a:	f7fe fd9e 	bl	8000e6a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800232e:	787b      	ldrb	r3, [r7, #1]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d007      	beq.n	8002344 <HAL_GPIO_WritePin+0x40>
 8002334:	787b      	ldrb	r3, [r7, #1]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d004      	beq.n	8002344 <HAL_GPIO_WritePin+0x40>
 800233a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800233e:	4809      	ldr	r0, [pc, #36]	; (8002364 <HAL_GPIO_WritePin+0x60>)
 8002340:	f7fe fd93 	bl	8000e6a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002344:	787b      	ldrb	r3, [r7, #1]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800234a:	887a      	ldrh	r2, [r7, #2]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002350:	e003      	b.n	800235a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002352:	887b      	ldrh	r3, [r7, #2]
 8002354:	041a      	lsls	r2, r3, #16
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	619a      	str	r2, [r3, #24]
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	08007e98 	.word	0x08007e98

08002368 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e316      	b.n	80029a8 <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b0f      	cmp	r3, #15
 8002380:	d903      	bls.n	800238a <HAL_RCC_OscConfig+0x22>
 8002382:	21e8      	movs	r1, #232	; 0xe8
 8002384:	48a3      	ldr	r0, [pc, #652]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 8002386:	f7fe fd70 	bl	8000e6a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 8088 	beq.w	80024a8 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00d      	beq.n	80023bc <HAL_RCC_OscConfig+0x54>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a8:	d008      	beq.n	80023bc <HAL_RCC_OscConfig+0x54>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b2:	d003      	beq.n	80023bc <HAL_RCC_OscConfig+0x54>
 80023b4:	21ed      	movs	r1, #237	; 0xed
 80023b6:	4897      	ldr	r0, [pc, #604]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	f7fe fd57 	bl	8000e6a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023bc:	4b96      	ldr	r3, [pc, #600]	; (8002618 <HAL_RCC_OscConfig+0x2b0>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 030c 	and.w	r3, r3, #12
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d00c      	beq.n	80023e2 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023c8:	4b93      	ldr	r3, [pc, #588]	; (8002618 <HAL_RCC_OscConfig+0x2b0>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d112      	bne.n	80023fa <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023d4:	4b90      	ldr	r3, [pc, #576]	; (8002618 <HAL_RCC_OscConfig+0x2b0>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023e0:	d10b      	bne.n	80023fa <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e2:	4b8d      	ldr	r3, [pc, #564]	; (8002618 <HAL_RCC_OscConfig+0x2b0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d05b      	beq.n	80024a6 <HAL_RCC_OscConfig+0x13e>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d157      	bne.n	80024a6 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e2d6      	b.n	80029a8 <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002402:	d106      	bne.n	8002412 <HAL_RCC_OscConfig+0xaa>
 8002404:	4b84      	ldr	r3, [pc, #528]	; (8002618 <HAL_RCC_OscConfig+0x2b0>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a83      	ldr	r2, [pc, #524]	; (8002618 <HAL_RCC_OscConfig+0x2b0>)
 800240a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	e01d      	b.n	800244e <HAL_RCC_OscConfig+0xe6>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800241a:	d10c      	bne.n	8002436 <HAL_RCC_OscConfig+0xce>
 800241c:	4b7e      	ldr	r3, [pc, #504]	; (8002618 <HAL_RCC_OscConfig+0x2b0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a7d      	ldr	r2, [pc, #500]	; (8002618 <HAL_RCC_OscConfig+0x2b0>)
 8002422:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	4b7b      	ldr	r3, [pc, #492]	; (8002618 <HAL_RCC_OscConfig+0x2b0>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a7a      	ldr	r2, [pc, #488]	; (8002618 <HAL_RCC_OscConfig+0x2b0>)
 800242e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	e00b      	b.n	800244e <HAL_RCC_OscConfig+0xe6>
 8002436:	4b78      	ldr	r3, [pc, #480]	; (8002618 <HAL_RCC_OscConfig+0x2b0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a77      	ldr	r2, [pc, #476]	; (8002618 <HAL_RCC_OscConfig+0x2b0>)
 800243c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	4b75      	ldr	r3, [pc, #468]	; (8002618 <HAL_RCC_OscConfig+0x2b0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a74      	ldr	r2, [pc, #464]	; (8002618 <HAL_RCC_OscConfig+0x2b0>)
 8002448:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800244c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d013      	beq.n	800247e <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002456:	f7fe ff9d 	bl	8001394 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800245e:	f7fe ff99 	bl	8001394 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b64      	cmp	r3, #100	; 0x64
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e29b      	b.n	80029a8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002470:	4b69      	ldr	r3, [pc, #420]	; (8002618 <HAL_RCC_OscConfig+0x2b0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0f0      	beq.n	800245e <HAL_RCC_OscConfig+0xf6>
 800247c:	e014      	b.n	80024a8 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247e:	f7fe ff89 	bl	8001394 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002486:	f7fe ff85 	bl	8001394 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b64      	cmp	r3, #100	; 0x64
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e287      	b.n	80029a8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002498:	4b5f      	ldr	r3, [pc, #380]	; (8002618 <HAL_RCC_OscConfig+0x2b0>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1f0      	bne.n	8002486 <HAL_RCC_OscConfig+0x11e>
 80024a4:	e000      	b.n	80024a8 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d079      	beq.n	80025a8 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <HAL_RCC_OscConfig+0x166>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d004      	beq.n	80024ce <HAL_RCC_OscConfig+0x166>
 80024c4:	f240 111f 	movw	r1, #287	; 0x11f
 80024c8:	4852      	ldr	r0, [pc, #328]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	f7fe fcce 	bl	8000e6a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	2b1f      	cmp	r3, #31
 80024d4:	d904      	bls.n	80024e0 <HAL_RCC_OscConfig+0x178>
 80024d6:	f44f 7190 	mov.w	r1, #288	; 0x120
 80024da:	484e      	ldr	r0, [pc, #312]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 80024dc:	f7fe fcc5 	bl	8000e6a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024e0:	4b4d      	ldr	r3, [pc, #308]	; (8002618 <HAL_RCC_OscConfig+0x2b0>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 030c 	and.w	r3, r3, #12
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00b      	beq.n	8002504 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ec:	4b4a      	ldr	r3, [pc, #296]	; (8002618 <HAL_RCC_OscConfig+0x2b0>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d11c      	bne.n	8002532 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024f8:	4b47      	ldr	r3, [pc, #284]	; (8002618 <HAL_RCC_OscConfig+0x2b0>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d116      	bne.n	8002532 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002504:	4b44      	ldr	r3, [pc, #272]	; (8002618 <HAL_RCC_OscConfig+0x2b0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_OscConfig+0x1b4>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d001      	beq.n	800251c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e245      	b.n	80029a8 <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251c:	4b3e      	ldr	r3, [pc, #248]	; (8002618 <HAL_RCC_OscConfig+0x2b0>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	493b      	ldr	r1, [pc, #236]	; (8002618 <HAL_RCC_OscConfig+0x2b0>)
 800252c:	4313      	orrs	r3, r2
 800252e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002530:	e03a      	b.n	80025a8 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d020      	beq.n	800257c <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800253a:	4b38      	ldr	r3, [pc, #224]	; (800261c <HAL_RCC_OscConfig+0x2b4>)
 800253c:	2201      	movs	r2, #1
 800253e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002540:	f7fe ff28 	bl	8001394 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002548:	f7fe ff24 	bl	8001394 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e226      	b.n	80029a8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255a:	4b2f      	ldr	r3, [pc, #188]	; (8002618 <HAL_RCC_OscConfig+0x2b0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002566:	4b2c      	ldr	r3, [pc, #176]	; (8002618 <HAL_RCC_OscConfig+0x2b0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4928      	ldr	r1, [pc, #160]	; (8002618 <HAL_RCC_OscConfig+0x2b0>)
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]
 800257a:	e015      	b.n	80025a8 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800257c:	4b27      	ldr	r3, [pc, #156]	; (800261c <HAL_RCC_OscConfig+0x2b4>)
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002582:	f7fe ff07 	bl	8001394 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800258a:	f7fe ff03 	bl	8001394 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e205      	b.n	80029a8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259c:	4b1e      	ldr	r3, [pc, #120]	; (8002618 <HAL_RCC_OscConfig+0x2b0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1f0      	bne.n	800258a <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d046      	beq.n	8002642 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d008      	beq.n	80025ce <HAL_RCC_OscConfig+0x266>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d004      	beq.n	80025ce <HAL_RCC_OscConfig+0x266>
 80025c4:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80025c8:	4812      	ldr	r0, [pc, #72]	; (8002614 <HAL_RCC_OscConfig+0x2ac>)
 80025ca:	f7fe fc4e 	bl	8000e6a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d016      	beq.n	8002604 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d6:	4b12      	ldr	r3, [pc, #72]	; (8002620 <HAL_RCC_OscConfig+0x2b8>)
 80025d8:	2201      	movs	r2, #1
 80025da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025dc:	f7fe feda 	bl	8001394 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025e4:	f7fe fed6 	bl	8001394 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e1d8      	b.n	80029a8 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f6:	4b08      	ldr	r3, [pc, #32]	; (8002618 <HAL_RCC_OscConfig+0x2b0>)
 80025f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0x27c>
 8002602:	e01e      	b.n	8002642 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <HAL_RCC_OscConfig+0x2b8>)
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260a:	f7fe fec3 	bl	8001394 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002610:	e011      	b.n	8002636 <HAL_RCC_OscConfig+0x2ce>
 8002612:	bf00      	nop
 8002614:	08007ed4 	.word	0x08007ed4
 8002618:	40023800 	.word	0x40023800
 800261c:	42470000 	.word	0x42470000
 8002620:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002624:	f7fe feb6 	bl	8001394 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e1b8      	b.n	80029a8 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002636:	4b97      	ldr	r3, [pc, #604]	; (8002894 <HAL_RCC_OscConfig+0x52c>)
 8002638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0304 	and.w	r3, r3, #4
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 80a8 	beq.w	80027a0 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002650:	2300      	movs	r3, #0
 8002652:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00c      	beq.n	8002676 <HAL_RCC_OscConfig+0x30e>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d008      	beq.n	8002676 <HAL_RCC_OscConfig+0x30e>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b05      	cmp	r3, #5
 800266a:	d004      	beq.n	8002676 <HAL_RCC_OscConfig+0x30e>
 800266c:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002670:	4889      	ldr	r0, [pc, #548]	; (8002898 <HAL_RCC_OscConfig+0x530>)
 8002672:	f7fe fbfa 	bl	8000e6a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002676:	4b87      	ldr	r3, [pc, #540]	; (8002894 <HAL_RCC_OscConfig+0x52c>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10f      	bne.n	80026a2 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	4b83      	ldr	r3, [pc, #524]	; (8002894 <HAL_RCC_OscConfig+0x52c>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	4a82      	ldr	r2, [pc, #520]	; (8002894 <HAL_RCC_OscConfig+0x52c>)
 800268c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002690:	6413      	str	r3, [r2, #64]	; 0x40
 8002692:	4b80      	ldr	r3, [pc, #512]	; (8002894 <HAL_RCC_OscConfig+0x52c>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800269e:	2301      	movs	r3, #1
 80026a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a2:	4b7e      	ldr	r3, [pc, #504]	; (800289c <HAL_RCC_OscConfig+0x534>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d118      	bne.n	80026e0 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ae:	4b7b      	ldr	r3, [pc, #492]	; (800289c <HAL_RCC_OscConfig+0x534>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a7a      	ldr	r2, [pc, #488]	; (800289c <HAL_RCC_OscConfig+0x534>)
 80026b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ba:	f7fe fe6b 	bl	8001394 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c2:	f7fe fe67 	bl	8001394 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e169      	b.n	80029a8 <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d4:	4b71      	ldr	r3, [pc, #452]	; (800289c <HAL_RCC_OscConfig+0x534>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d106      	bne.n	80026f6 <HAL_RCC_OscConfig+0x38e>
 80026e8:	4b6a      	ldr	r3, [pc, #424]	; (8002894 <HAL_RCC_OscConfig+0x52c>)
 80026ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ec:	4a69      	ldr	r2, [pc, #420]	; (8002894 <HAL_RCC_OscConfig+0x52c>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	6713      	str	r3, [r2, #112]	; 0x70
 80026f4:	e01c      	b.n	8002730 <HAL_RCC_OscConfig+0x3c8>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	2b05      	cmp	r3, #5
 80026fc:	d10c      	bne.n	8002718 <HAL_RCC_OscConfig+0x3b0>
 80026fe:	4b65      	ldr	r3, [pc, #404]	; (8002894 <HAL_RCC_OscConfig+0x52c>)
 8002700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002702:	4a64      	ldr	r2, [pc, #400]	; (8002894 <HAL_RCC_OscConfig+0x52c>)
 8002704:	f043 0304 	orr.w	r3, r3, #4
 8002708:	6713      	str	r3, [r2, #112]	; 0x70
 800270a:	4b62      	ldr	r3, [pc, #392]	; (8002894 <HAL_RCC_OscConfig+0x52c>)
 800270c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270e:	4a61      	ldr	r2, [pc, #388]	; (8002894 <HAL_RCC_OscConfig+0x52c>)
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	6713      	str	r3, [r2, #112]	; 0x70
 8002716:	e00b      	b.n	8002730 <HAL_RCC_OscConfig+0x3c8>
 8002718:	4b5e      	ldr	r3, [pc, #376]	; (8002894 <HAL_RCC_OscConfig+0x52c>)
 800271a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271c:	4a5d      	ldr	r2, [pc, #372]	; (8002894 <HAL_RCC_OscConfig+0x52c>)
 800271e:	f023 0301 	bic.w	r3, r3, #1
 8002722:	6713      	str	r3, [r2, #112]	; 0x70
 8002724:	4b5b      	ldr	r3, [pc, #364]	; (8002894 <HAL_RCC_OscConfig+0x52c>)
 8002726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002728:	4a5a      	ldr	r2, [pc, #360]	; (8002894 <HAL_RCC_OscConfig+0x52c>)
 800272a:	f023 0304 	bic.w	r3, r3, #4
 800272e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d015      	beq.n	8002764 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002738:	f7fe fe2c 	bl	8001394 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273e:	e00a      	b.n	8002756 <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002740:	f7fe fe28 	bl	8001394 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	f241 3288 	movw	r2, #5000	; 0x1388
 800274e:	4293      	cmp	r3, r2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e128      	b.n	80029a8 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002756:	4b4f      	ldr	r3, [pc, #316]	; (8002894 <HAL_RCC_OscConfig+0x52c>)
 8002758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0ee      	beq.n	8002740 <HAL_RCC_OscConfig+0x3d8>
 8002762:	e014      	b.n	800278e <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002764:	f7fe fe16 	bl	8001394 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276a:	e00a      	b.n	8002782 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800276c:	f7fe fe12 	bl	8001394 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f241 3288 	movw	r2, #5000	; 0x1388
 800277a:	4293      	cmp	r3, r2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e112      	b.n	80029a8 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002782:	4b44      	ldr	r3, [pc, #272]	; (8002894 <HAL_RCC_OscConfig+0x52c>)
 8002784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1ee      	bne.n	800276c <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800278e:	7dfb      	ldrb	r3, [r7, #23]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d105      	bne.n	80027a0 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002794:	4b3f      	ldr	r3, [pc, #252]	; (8002894 <HAL_RCC_OscConfig+0x52c>)
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	4a3e      	ldr	r2, [pc, #248]	; (8002894 <HAL_RCC_OscConfig+0x52c>)
 800279a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800279e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00c      	beq.n	80027c2 <HAL_RCC_OscConfig+0x45a>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d008      	beq.n	80027c2 <HAL_RCC_OscConfig+0x45a>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d004      	beq.n	80027c2 <HAL_RCC_OscConfig+0x45a>
 80027b8:	f240 11cf 	movw	r1, #463	; 0x1cf
 80027bc:	4836      	ldr	r0, [pc, #216]	; (8002898 <HAL_RCC_OscConfig+0x530>)
 80027be:	f7fe fb54 	bl	8000e6a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 80ed 	beq.w	80029a6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027cc:	4b31      	ldr	r3, [pc, #196]	; (8002894 <HAL_RCC_OscConfig+0x52c>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 030c 	and.w	r3, r3, #12
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	f000 80ae 	beq.w	8002936 <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	f040 8092 	bne.w	8002908 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d009      	beq.n	8002800 <HAL_RCC_OscConfig+0x498>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027f4:	d004      	beq.n	8002800 <HAL_RCC_OscConfig+0x498>
 80027f6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80027fa:	4827      	ldr	r0, [pc, #156]	; (8002898 <HAL_RCC_OscConfig+0x530>)
 80027fc:	f7fe fb35 	bl	8000e6a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	2b3f      	cmp	r3, #63	; 0x3f
 8002806:	d904      	bls.n	8002812 <HAL_RCC_OscConfig+0x4aa>
 8002808:	f240 11d9 	movw	r1, #473	; 0x1d9
 800280c:	4822      	ldr	r0, [pc, #136]	; (8002898 <HAL_RCC_OscConfig+0x530>)
 800280e:	f7fe fb2c 	bl	8000e6a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	2b31      	cmp	r3, #49	; 0x31
 8002818:	d904      	bls.n	8002824 <HAL_RCC_OscConfig+0x4bc>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002822:	d904      	bls.n	800282e <HAL_RCC_OscConfig+0x4c6>
 8002824:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8002828:	481b      	ldr	r0, [pc, #108]	; (8002898 <HAL_RCC_OscConfig+0x530>)
 800282a:	f7fe fb1e 	bl	8000e6a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002832:	2b02      	cmp	r3, #2
 8002834:	d010      	beq.n	8002858 <HAL_RCC_OscConfig+0x4f0>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283a:	2b04      	cmp	r3, #4
 800283c:	d00c      	beq.n	8002858 <HAL_RCC_OscConfig+0x4f0>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002842:	2b06      	cmp	r3, #6
 8002844:	d008      	beq.n	8002858 <HAL_RCC_OscConfig+0x4f0>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284a:	2b08      	cmp	r3, #8
 800284c:	d004      	beq.n	8002858 <HAL_RCC_OscConfig+0x4f0>
 800284e:	f240 11db 	movw	r1, #475	; 0x1db
 8002852:	4811      	ldr	r0, [pc, #68]	; (8002898 <HAL_RCC_OscConfig+0x530>)
 8002854:	f7fe fb09 	bl	8000e6a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285c:	2b01      	cmp	r3, #1
 800285e:	d903      	bls.n	8002868 <HAL_RCC_OscConfig+0x500>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002864:	2b0f      	cmp	r3, #15
 8002866:	d904      	bls.n	8002872 <HAL_RCC_OscConfig+0x50a>
 8002868:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800286c:	480a      	ldr	r0, [pc, #40]	; (8002898 <HAL_RCC_OscConfig+0x530>)
 800286e:	f7fe fafc 	bl	8000e6a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002872:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <HAL_RCC_OscConfig+0x538>)
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002878:	f7fe fd8c 	bl	8001394 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287e:	e011      	b.n	80028a4 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002880:	f7fe fd88 	bl	8001394 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d90a      	bls.n	80028a4 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e08a      	b.n	80029a8 <HAL_RCC_OscConfig+0x640>
 8002892:	bf00      	nop
 8002894:	40023800 	.word	0x40023800
 8002898:	08007ed4 	.word	0x08007ed4
 800289c:	40007000 	.word	0x40007000
 80028a0:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a4:	4b42      	ldr	r3, [pc, #264]	; (80029b0 <HAL_RCC_OscConfig+0x648>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1e7      	bne.n	8002880 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69da      	ldr	r2, [r3, #28]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	431a      	orrs	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	019b      	lsls	r3, r3, #6
 80028c0:	431a      	orrs	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c6:	085b      	lsrs	r3, r3, #1
 80028c8:	3b01      	subs	r3, #1
 80028ca:	041b      	lsls	r3, r3, #16
 80028cc:	431a      	orrs	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d2:	061b      	lsls	r3, r3, #24
 80028d4:	4936      	ldr	r1, [pc, #216]	; (80029b0 <HAL_RCC_OscConfig+0x648>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028da:	4b36      	ldr	r3, [pc, #216]	; (80029b4 <HAL_RCC_OscConfig+0x64c>)
 80028dc:	2201      	movs	r2, #1
 80028de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7fe fd58 	bl	8001394 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e8:	f7fe fd54 	bl	8001394 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e056      	b.n	80029a8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fa:	4b2d      	ldr	r3, [pc, #180]	; (80029b0 <HAL_RCC_OscConfig+0x648>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0x580>
 8002906:	e04e      	b.n	80029a6 <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002908:	4b2a      	ldr	r3, [pc, #168]	; (80029b4 <HAL_RCC_OscConfig+0x64c>)
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290e:	f7fe fd41 	bl	8001394 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002916:	f7fe fd3d 	bl	8001394 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e03f      	b.n	80029a8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002928:	4b21      	ldr	r3, [pc, #132]	; (80029b0 <HAL_RCC_OscConfig+0x648>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f0      	bne.n	8002916 <HAL_RCC_OscConfig+0x5ae>
 8002934:	e037      	b.n	80029a6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e032      	b.n	80029a8 <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002942:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <HAL_RCC_OscConfig+0x648>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d028      	beq.n	80029a2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800295a:	429a      	cmp	r2, r3
 800295c:	d121      	bne.n	80029a2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d11a      	bne.n	80029a2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002972:	4013      	ands	r3, r2
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002978:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800297a:	4293      	cmp	r3, r2
 800297c:	d111      	bne.n	80029a2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002988:	085b      	lsrs	r3, r3, #1
 800298a:	3b01      	subs	r3, #1
 800298c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d107      	bne.n	80029a2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800299e:	429a      	cmp	r2, r3
 80029a0:	d001      	beq.n	80029a6 <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40023800 	.word	0x40023800
 80029b4:	42470060 	.word	0x42470060

080029b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e174      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_RCC_ClockConfig+0x24>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b0f      	cmp	r3, #15
 80029da:	d904      	bls.n	80029e6 <HAL_RCC_ClockConfig+0x2e>
 80029dc:	f44f 7117 	mov.w	r1, #604	; 0x25c
 80029e0:	487b      	ldr	r0, [pc, #492]	; (8002bd0 <HAL_RCC_ClockConfig+0x218>)
 80029e2:	f7fe fa42 	bl	8000e6a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d019      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x68>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d016      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x68>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d013      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x68>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d010      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x68>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d00d      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x68>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	2b05      	cmp	r3, #5
 8002a08:	d00a      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x68>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b06      	cmp	r3, #6
 8002a0e:	d007      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x68>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	2b07      	cmp	r3, #7
 8002a14:	d004      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x68>
 8002a16:	f240 215d 	movw	r1, #605	; 0x25d
 8002a1a:	486d      	ldr	r0, [pc, #436]	; (8002bd0 <HAL_RCC_ClockConfig+0x218>)
 8002a1c:	f7fe fa25 	bl	8000e6a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a20:	4b6c      	ldr	r3, [pc, #432]	; (8002bd4 <HAL_RCC_ClockConfig+0x21c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d90c      	bls.n	8002a48 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2e:	4b69      	ldr	r3, [pc, #420]	; (8002bd4 <HAL_RCC_ClockConfig+0x21c>)
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a36:	4b67      	ldr	r3, [pc, #412]	; (8002bd4 <HAL_RCC_ClockConfig+0x21c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e136      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d049      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a60:	4b5d      	ldr	r3, [pc, #372]	; (8002bd8 <HAL_RCC_ClockConfig+0x220>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	4a5c      	ldr	r2, [pc, #368]	; (8002bd8 <HAL_RCC_ClockConfig+0x220>)
 8002a66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d005      	beq.n	8002a84 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a78:	4b57      	ldr	r3, [pc, #348]	; (8002bd8 <HAL_RCC_ClockConfig+0x220>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	4a56      	ldr	r2, [pc, #344]	; (8002bd8 <HAL_RCC_ClockConfig+0x220>)
 8002a7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d024      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x11e>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b80      	cmp	r3, #128	; 0x80
 8002a92:	d020      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x11e>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b90      	cmp	r3, #144	; 0x90
 8002a9a:	d01c      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x11e>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2ba0      	cmp	r3, #160	; 0xa0
 8002aa2:	d018      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x11e>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2bb0      	cmp	r3, #176	; 0xb0
 8002aaa:	d014      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x11e>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	2bc0      	cmp	r3, #192	; 0xc0
 8002ab2:	d010      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x11e>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	2bd0      	cmp	r3, #208	; 0xd0
 8002aba:	d00c      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x11e>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2be0      	cmp	r3, #224	; 0xe0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x11e>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2bf0      	cmp	r3, #240	; 0xf0
 8002aca:	d004      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x11e>
 8002acc:	f44f 7120 	mov.w	r1, #640	; 0x280
 8002ad0:	483f      	ldr	r0, [pc, #252]	; (8002bd0 <HAL_RCC_ClockConfig+0x218>)
 8002ad2:	f7fe f9ca 	bl	8000e6a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad6:	4b40      	ldr	r3, [pc, #256]	; (8002bd8 <HAL_RCC_ClockConfig+0x220>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	493d      	ldr	r1, [pc, #244]	; (8002bd8 <HAL_RCC_ClockConfig+0x220>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d059      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d010      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x166>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d00c      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x166>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d008      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x166>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d004      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x166>
 8002b14:	f240 2187 	movw	r1, #647	; 0x287
 8002b18:	482d      	ldr	r0, [pc, #180]	; (8002bd0 <HAL_RCC_ClockConfig+0x218>)
 8002b1a:	f7fe f9a6 	bl	8000e6a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d107      	bne.n	8002b36 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b26:	4b2c      	ldr	r3, [pc, #176]	; (8002bd8 <HAL_RCC_ClockConfig+0x220>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d119      	bne.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e0bf      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d003      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	d107      	bne.n	8002b56 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b46:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <HAL_RCC_ClockConfig+0x220>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d109      	bne.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e0af      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b56:	4b20      	ldr	r3, [pc, #128]	; (8002bd8 <HAL_RCC_ClockConfig+0x220>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e0a7      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b66:	4b1c      	ldr	r3, [pc, #112]	; (8002bd8 <HAL_RCC_ClockConfig+0x220>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f023 0203 	bic.w	r2, r3, #3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4919      	ldr	r1, [pc, #100]	; (8002bd8 <HAL_RCC_ClockConfig+0x220>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b78:	f7fe fc0c 	bl	8001394 <HAL_GetTick>
 8002b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7e:	e00a      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b80:	f7fe fc08 	bl	8001394 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e08f      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b96:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <HAL_RCC_ClockConfig+0x220>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 020c 	and.w	r2, r3, #12
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d1eb      	bne.n	8002b80 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba8:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <HAL_RCC_ClockConfig+0x21c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d212      	bcs.n	8002bdc <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb6:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <HAL_RCC_ClockConfig+0x21c>)
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bbe:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <HAL_RCC_ClockConfig+0x21c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d007      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e072      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x2fe>
 8002bd0:	08007ed4 	.word	0x08007ed4
 8002bd4:	40023c00 	.word	0x40023c00
 8002bd8:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d025      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d018      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x26a>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bf8:	d013      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x26a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002c02:	d00e      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x26a>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002c0c:	d009      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x26a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002c16:	d004      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x26a>
 8002c18:	f240 21c5 	movw	r1, #709	; 0x2c5
 8002c1c:	4828      	ldr	r0, [pc, #160]	; (8002cc0 <HAL_RCC_ClockConfig+0x308>)
 8002c1e:	f7fe f924 	bl	8000e6a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c22:	4b28      	ldr	r3, [pc, #160]	; (8002cc4 <HAL_RCC_ClockConfig+0x30c>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	4925      	ldr	r1, [pc, #148]	; (8002cc4 <HAL_RCC_ClockConfig+0x30c>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d026      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d018      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x2c2>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c50:	d013      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x2c2>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002c5a:	d00e      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x2c2>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002c64:	d009      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x2c2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002c6e:	d004      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x2c2>
 8002c70:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8002c74:	4812      	ldr	r0, [pc, #72]	; (8002cc0 <HAL_RCC_ClockConfig+0x308>)
 8002c76:	f7fe f8f8 	bl	8000e6a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c7a:	4b12      	ldr	r3, [pc, #72]	; (8002cc4 <HAL_RCC_ClockConfig+0x30c>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	490e      	ldr	r1, [pc, #56]	; (8002cc4 <HAL_RCC_ClockConfig+0x30c>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c8e:	f000 f821 	bl	8002cd4 <HAL_RCC_GetSysClockFreq>
 8002c92:	4602      	mov	r2, r0
 8002c94:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <HAL_RCC_ClockConfig+0x30c>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	490a      	ldr	r1, [pc, #40]	; (8002cc8 <HAL_RCC_ClockConfig+0x310>)
 8002ca0:	5ccb      	ldrb	r3, [r1, r3]
 8002ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <HAL_RCC_ClockConfig+0x314>)
 8002ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002caa:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <HAL_RCC_ClockConfig+0x318>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fe fb2c 	bl	800130c <HAL_InitTick>

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	08007ed4 	.word	0x08007ed4
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	08007fd0 	.word	0x08007fd0
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	20000004 	.word	0x20000004

08002cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	607b      	str	r3, [r7, #4]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cec:	4b67      	ldr	r3, [pc, #412]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 030c 	and.w	r3, r3, #12
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d00d      	beq.n	8002d14 <HAL_RCC_GetSysClockFreq+0x40>
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	f200 80bd 	bhi.w	8002e78 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x34>
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d003      	beq.n	8002d0e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d06:	e0b7      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d08:	4b61      	ldr	r3, [pc, #388]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d0a:	60bb      	str	r3, [r7, #8]
       break;
 8002d0c:	e0b7      	b.n	8002e7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d0e:	4b61      	ldr	r3, [pc, #388]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002d10:	60bb      	str	r3, [r7, #8]
      break;
 8002d12:	e0b4      	b.n	8002e7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d14:	4b5d      	ldr	r3, [pc, #372]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d1e:	4b5b      	ldr	r3, [pc, #364]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d04d      	beq.n	8002dc6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2a:	4b58      	ldr	r3, [pc, #352]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	099b      	lsrs	r3, r3, #6
 8002d30:	461a      	mov	r2, r3
 8002d32:	f04f 0300 	mov.w	r3, #0
 8002d36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d3a:	f04f 0100 	mov.w	r1, #0
 8002d3e:	ea02 0800 	and.w	r8, r2, r0
 8002d42:	ea03 0901 	and.w	r9, r3, r1
 8002d46:	4640      	mov	r0, r8
 8002d48:	4649      	mov	r1, r9
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	f04f 0300 	mov.w	r3, #0
 8002d52:	014b      	lsls	r3, r1, #5
 8002d54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d58:	0142      	lsls	r2, r0, #5
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	ebb0 0008 	subs.w	r0, r0, r8
 8002d62:	eb61 0109 	sbc.w	r1, r1, r9
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	018b      	lsls	r3, r1, #6
 8002d70:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d74:	0182      	lsls	r2, r0, #6
 8002d76:	1a12      	subs	r2, r2, r0
 8002d78:	eb63 0301 	sbc.w	r3, r3, r1
 8002d7c:	f04f 0000 	mov.w	r0, #0
 8002d80:	f04f 0100 	mov.w	r1, #0
 8002d84:	00d9      	lsls	r1, r3, #3
 8002d86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d8a:	00d0      	lsls	r0, r2, #3
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	eb12 0208 	adds.w	r2, r2, r8
 8002d94:	eb43 0309 	adc.w	r3, r3, r9
 8002d98:	f04f 0000 	mov.w	r0, #0
 8002d9c:	f04f 0100 	mov.w	r1, #0
 8002da0:	0259      	lsls	r1, r3, #9
 8002da2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002da6:	0250      	lsls	r0, r2, #9
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4610      	mov	r0, r2
 8002dae:	4619      	mov	r1, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	461a      	mov	r2, r3
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	f7fd fa6a 	bl	8000290 <__aeabi_uldivmod>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	e04a      	b.n	8002e5c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc6:	4b31      	ldr	r3, [pc, #196]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	099b      	lsrs	r3, r3, #6
 8002dcc:	461a      	mov	r2, r3
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002dd6:	f04f 0100 	mov.w	r1, #0
 8002dda:	ea02 0400 	and.w	r4, r2, r0
 8002dde:	ea03 0501 	and.w	r5, r3, r1
 8002de2:	4620      	mov	r0, r4
 8002de4:	4629      	mov	r1, r5
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	014b      	lsls	r3, r1, #5
 8002df0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002df4:	0142      	lsls	r2, r0, #5
 8002df6:	4610      	mov	r0, r2
 8002df8:	4619      	mov	r1, r3
 8002dfa:	1b00      	subs	r0, r0, r4
 8002dfc:	eb61 0105 	sbc.w	r1, r1, r5
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	018b      	lsls	r3, r1, #6
 8002e0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e0e:	0182      	lsls	r2, r0, #6
 8002e10:	1a12      	subs	r2, r2, r0
 8002e12:	eb63 0301 	sbc.w	r3, r3, r1
 8002e16:	f04f 0000 	mov.w	r0, #0
 8002e1a:	f04f 0100 	mov.w	r1, #0
 8002e1e:	00d9      	lsls	r1, r3, #3
 8002e20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e24:	00d0      	lsls	r0, r2, #3
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	1912      	adds	r2, r2, r4
 8002e2c:	eb45 0303 	adc.w	r3, r5, r3
 8002e30:	f04f 0000 	mov.w	r0, #0
 8002e34:	f04f 0100 	mov.w	r1, #0
 8002e38:	0299      	lsls	r1, r3, #10
 8002e3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e3e:	0290      	lsls	r0, r2, #10
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4610      	mov	r0, r2
 8002e46:	4619      	mov	r1, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	f7fd fa1e 	bl	8000290 <__aeabi_uldivmod>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	4613      	mov	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	0c1b      	lsrs	r3, r3, #16
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	3301      	adds	r3, #1
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e74:	60bb      	str	r3, [r7, #8]
      break;
 8002e76:	e002      	b.n	8002e7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e7a:	60bb      	str	r3, [r7, #8]
      break;
 8002e7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e7e:	68bb      	ldr	r3, [r7, #8]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	00f42400 	.word	0x00f42400
 8002e94:	007a1200 	.word	0x007a1200

08002e98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e9c:	4b03      	ldr	r3, [pc, #12]	; (8002eac <HAL_RCC_GetHCLKFreq+0x14>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	20000000 	.word	0x20000000

08002eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002eb4:	f7ff fff0 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	0a9b      	lsrs	r3, r3, #10
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	4903      	ldr	r1, [pc, #12]	; (8002ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ec6:	5ccb      	ldrb	r3, [r1, r3]
 8002ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	08007fe0 	.word	0x08007fe0

08002ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002edc:	f7ff ffdc 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	0b5b      	lsrs	r3, r3, #13
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	4903      	ldr	r1, [pc, #12]	; (8002efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eee:	5ccb      	ldrb	r3, [r1, r3]
 8002ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	08007fe0 	.word	0x08007fe0

08002f00 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002f06:	f7fe fa45 	bl	8001394 <HAL_GetTick>
 8002f0a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002f0c:	4b5d      	ldr	r3, [pc, #372]	; (8003084 <HAL_RCC_DeInit+0x184>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a5c      	ldr	r2, [pc, #368]	; (8003084 <HAL_RCC_DeInit+0x184>)
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f1a:	f7fe fa3b 	bl	8001394 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e0a7      	b.n	800307c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002f2c:	4b55      	ldr	r3, [pc, #340]	; (8003084 <HAL_RCC_DeInit+0x184>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0f0      	beq.n	8002f1a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8002f38:	4b52      	ldr	r3, [pc, #328]	; (8003084 <HAL_RCC_DeInit+0x184>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a51      	ldr	r2, [pc, #324]	; (8003084 <HAL_RCC_DeInit+0x184>)
 8002f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f42:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002f44:	f7fe fa26 	bl	8001394 <HAL_GetTick>
 8002f48:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002f4a:	4b4e      	ldr	r3, [pc, #312]	; (8003084 <HAL_RCC_DeInit+0x184>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002f50:	e00a      	b.n	8002f68 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f52:	f7fe fa1f 	bl	8001394 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e089      	b.n	800307c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002f68:	4b46      	ldr	r3, [pc, #280]	; (8003084 <HAL_RCC_DeInit+0x184>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 030c 	and.w	r3, r3, #12
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1ee      	bne.n	8002f52 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002f74:	f7fe fa0e 	bl	8001394 <HAL_GetTick>
 8002f78:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8002f7a:	4b42      	ldr	r3, [pc, #264]	; (8003084 <HAL_RCC_DeInit+0x184>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a41      	ldr	r2, [pc, #260]	; (8003084 <HAL_RCC_DeInit+0x184>)
 8002f80:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8002f84:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f88:	f7fe fa04 	bl	8001394 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b64      	cmp	r3, #100	; 0x64
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e070      	b.n	800307c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002f9a:	4b3a      	ldr	r3, [pc, #232]	; (8003084 <HAL_RCC_DeInit+0x184>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002fa6:	f7fe f9f5 	bl	8001394 <HAL_GetTick>
 8002faa:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002fac:	4b35      	ldr	r3, [pc, #212]	; (8003084 <HAL_RCC_DeInit+0x184>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a34      	ldr	r2, [pc, #208]	; (8003084 <HAL_RCC_DeInit+0x184>)
 8002fb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fb6:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fba:	f7fe f9eb 	bl	8001394 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e057      	b.n	800307c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002fcc:	4b2d      	ldr	r3, [pc, #180]	; (8003084 <HAL_RCC_DeInit+0x184>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1f0      	bne.n	8002fba <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002fd8:	f7fe f9dc 	bl	8001394 <HAL_GetTick>
 8002fdc:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8002fde:	4b29      	ldr	r3, [pc, #164]	; (8003084 <HAL_RCC_DeInit+0x184>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a28      	ldr	r2, [pc, #160]	; (8003084 <HAL_RCC_DeInit+0x184>)
 8002fe4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fe8:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fec:	f7fe f9d2 	bl	8001394 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e03e      	b.n	800307c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002ffe:	4b21      	ldr	r3, [pc, #132]	; (8003084 <HAL_RCC_DeInit+0x184>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 800300a:	4b1e      	ldr	r3, [pc, #120]	; (8003084 <HAL_RCC_DeInit+0x184>)
 800300c:	4a1e      	ldr	r2, [pc, #120]	; (8003088 <HAL_RCC_DeInit+0x188>)
 800300e:	605a      	str	r2, [r3, #4]
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F411xE)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8003010:	4b1c      	ldr	r3, [pc, #112]	; (8003084 <HAL_RCC_DeInit+0x184>)
 8003012:	4a1e      	ldr	r2, [pc, #120]	; (800308c <HAL_RCC_DeInit+0x18c>)
 8003014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8003018:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <HAL_RCC_DeInit+0x184>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	4a19      	ldr	r2, [pc, #100]	; (8003084 <HAL_RCC_DeInit+0x184>)
 800301e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003022:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8003024:	4b17      	ldr	r3, [pc, #92]	; (8003084 <HAL_RCC_DeInit+0x184>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	4a16      	ldr	r2, [pc, #88]	; (8003084 <HAL_RCC_DeInit+0x184>)
 800302a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800302e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8003030:	4b14      	ldr	r3, [pc, #80]	; (8003084 <HAL_RCC_DeInit+0x184>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	4a13      	ldr	r2, [pc, #76]	; (8003084 <HAL_RCC_DeInit+0x184>)
 8003036:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 800303a:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 800303c:	4b11      	ldr	r3, [pc, #68]	; (8003084 <HAL_RCC_DeInit+0x184>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4a10      	ldr	r2, [pc, #64]	; (8003084 <HAL_RCC_DeInit+0x184>)
 8003042:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003046:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003048:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <HAL_RCC_DeInit+0x184>)
 800304a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304c:	4a0d      	ldr	r2, [pc, #52]	; (8003084 <HAL_RCC_DeInit+0x184>)
 800304e:	f023 0301 	bic.w	r3, r3, #1
 8003052:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003054:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <HAL_RCC_DeInit+0x184>)
 8003056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003058:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <HAL_RCC_DeInit+0x184>)
 800305a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800305e:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_RCC_DeInit+0x190>)
 8003062:	4a0c      	ldr	r2, [pc, #48]	; (8003094 <HAL_RCC_DeInit+0x194>)
 8003064:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8003066:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <HAL_RCC_DeInit+0x198>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7fe f94e 	bl	800130c <HAL_InitTick>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 800307a:	2300      	movs	r3, #0
  }
}
 800307c:	4618      	mov	r0, r3
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40023800 	.word	0x40023800
 8003088:	04003010 	.word	0x04003010
 800308c:	20003010 	.word	0x20003010
 8003090:	20000000 	.word	0x20000000
 8003094:	00f42400 	.word	0x00f42400
 8003098:	20000004 	.word	0x20000004

0800309c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e18c      	b.n	80033c8 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a75      	ldr	r2, [pc, #468]	; (8003288 <HAL_SPI_Init+0x1ec>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d018      	beq.n	80030ea <HAL_SPI_Init+0x4e>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a73      	ldr	r2, [pc, #460]	; (800328c <HAL_SPI_Init+0x1f0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d013      	beq.n	80030ea <HAL_SPI_Init+0x4e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a72      	ldr	r2, [pc, #456]	; (8003290 <HAL_SPI_Init+0x1f4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d00e      	beq.n	80030ea <HAL_SPI_Init+0x4e>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a70      	ldr	r2, [pc, #448]	; (8003294 <HAL_SPI_Init+0x1f8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d009      	beq.n	80030ea <HAL_SPI_Init+0x4e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a6f      	ldr	r2, [pc, #444]	; (8003298 <HAL_SPI_Init+0x1fc>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d004      	beq.n	80030ea <HAL_SPI_Init+0x4e>
 80030e0:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80030e4:	486d      	ldr	r0, [pc, #436]	; (800329c <HAL_SPI_Init+0x200>)
 80030e6:	f7fd fec0 	bl	8000e6a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <HAL_SPI_Init+0x6a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030fa:	d004      	beq.n	8003106 <HAL_SPI_Init+0x6a>
 80030fc:	f240 1143 	movw	r1, #323	; 0x143
 8003100:	4866      	ldr	r0, [pc, #408]	; (800329c <HAL_SPI_Init+0x200>)
 8003102:	f7fd feb2 	bl	8000e6a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00e      	beq.n	800312c <HAL_SPI_Init+0x90>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003116:	d009      	beq.n	800312c <HAL_SPI_Init+0x90>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003120:	d004      	beq.n	800312c <HAL_SPI_Init+0x90>
 8003122:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8003126:	485d      	ldr	r0, [pc, #372]	; (800329c <HAL_SPI_Init+0x200>)
 8003128:	f7fd fe9f 	bl	8000e6a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003134:	d008      	beq.n	8003148 <HAL_SPI_Init+0xac>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d004      	beq.n	8003148 <HAL_SPI_Init+0xac>
 800313e:	f240 1145 	movw	r1, #325	; 0x145
 8003142:	4856      	ldr	r0, [pc, #344]	; (800329c <HAL_SPI_Init+0x200>)
 8003144:	f7fd fe91 	bl	8000e6a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003150:	d00d      	beq.n	800316e <HAL_SPI_Init+0xd2>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d009      	beq.n	800316e <HAL_SPI_Init+0xd2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003162:	d004      	beq.n	800316e <HAL_SPI_Init+0xd2>
 8003164:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8003168:	484c      	ldr	r0, [pc, #304]	; (800329c <HAL_SPI_Init+0x200>)
 800316a:	f7fd fe7e 	bl	8000e6a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d020      	beq.n	80031b8 <HAL_SPI_Init+0x11c>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	2b08      	cmp	r3, #8
 800317c:	d01c      	beq.n	80031b8 <HAL_SPI_Init+0x11c>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	2b10      	cmp	r3, #16
 8003184:	d018      	beq.n	80031b8 <HAL_SPI_Init+0x11c>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	2b18      	cmp	r3, #24
 800318c:	d014      	beq.n	80031b8 <HAL_SPI_Init+0x11c>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	2b20      	cmp	r3, #32
 8003194:	d010      	beq.n	80031b8 <HAL_SPI_Init+0x11c>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	2b28      	cmp	r3, #40	; 0x28
 800319c:	d00c      	beq.n	80031b8 <HAL_SPI_Init+0x11c>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	2b30      	cmp	r3, #48	; 0x30
 80031a4:	d008      	beq.n	80031b8 <HAL_SPI_Init+0x11c>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	2b38      	cmp	r3, #56	; 0x38
 80031ac:	d004      	beq.n	80031b8 <HAL_SPI_Init+0x11c>
 80031ae:	f240 1147 	movw	r1, #327	; 0x147
 80031b2:	483a      	ldr	r0, [pc, #232]	; (800329c <HAL_SPI_Init+0x200>)
 80031b4:	f7fd fe59 	bl	8000e6a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d008      	beq.n	80031d2 <HAL_SPI_Init+0x136>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	2b80      	cmp	r3, #128	; 0x80
 80031c6:	d004      	beq.n	80031d2 <HAL_SPI_Init+0x136>
 80031c8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80031cc:	4833      	ldr	r0, [pc, #204]	; (800329c <HAL_SPI_Init+0x200>)
 80031ce:	f7fd fe4c 	bl	8000e6a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d008      	beq.n	80031ec <HAL_SPI_Init+0x150>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	2b10      	cmp	r3, #16
 80031e0:	d004      	beq.n	80031ec <HAL_SPI_Init+0x150>
 80031e2:	f240 1149 	movw	r1, #329	; 0x149
 80031e6:	482d      	ldr	r0, [pc, #180]	; (800329c <HAL_SPI_Init+0x200>)
 80031e8:	f7fd fe3f 	bl	8000e6a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d155      	bne.n	80032a0 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d008      	beq.n	800320e <HAL_SPI_Init+0x172>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	2b02      	cmp	r3, #2
 8003202:	d004      	beq.n	800320e <HAL_SPI_Init+0x172>
 8003204:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8003208:	4824      	ldr	r0, [pc, #144]	; (800329c <HAL_SPI_Init+0x200>)
 800320a:	f7fd fe2e 	bl	8000e6a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d008      	beq.n	8003228 <HAL_SPI_Init+0x18c>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d004      	beq.n	8003228 <HAL_SPI_Init+0x18c>
 800321e:	f240 114d 	movw	r1, #333	; 0x14d
 8003222:	481e      	ldr	r0, [pc, #120]	; (800329c <HAL_SPI_Init+0x200>)
 8003224:	f7fd fe21 	bl	8000e6a <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003230:	d125      	bne.n	800327e <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d05d      	beq.n	80032f6 <HAL_SPI_Init+0x25a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	2b08      	cmp	r3, #8
 8003240:	d059      	beq.n	80032f6 <HAL_SPI_Init+0x25a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	2b10      	cmp	r3, #16
 8003248:	d055      	beq.n	80032f6 <HAL_SPI_Init+0x25a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	2b18      	cmp	r3, #24
 8003250:	d051      	beq.n	80032f6 <HAL_SPI_Init+0x25a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	2b20      	cmp	r3, #32
 8003258:	d04d      	beq.n	80032f6 <HAL_SPI_Init+0x25a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	2b28      	cmp	r3, #40	; 0x28
 8003260:	d049      	beq.n	80032f6 <HAL_SPI_Init+0x25a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	2b30      	cmp	r3, #48	; 0x30
 8003268:	d045      	beq.n	80032f6 <HAL_SPI_Init+0x25a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	2b38      	cmp	r3, #56	; 0x38
 8003270:	d041      	beq.n	80032f6 <HAL_SPI_Init+0x25a>
 8003272:	f240 1151 	movw	r1, #337	; 0x151
 8003276:	4809      	ldr	r0, [pc, #36]	; (800329c <HAL_SPI_Init+0x200>)
 8003278:	f7fd fdf7 	bl	8000e6a <assert_failed>
 800327c:	e03b      	b.n	80032f6 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	61da      	str	r2, [r3, #28]
 8003284:	e037      	b.n	80032f6 <HAL_SPI_Init+0x25a>
 8003286:	bf00      	nop
 8003288:	40013000 	.word	0x40013000
 800328c:	40003800 	.word	0x40003800
 8003290:	40003c00 	.word	0x40003c00
 8003294:	40013400 	.word	0x40013400
 8003298:	40015000 	.word	0x40015000
 800329c:	08007f0c 	.word	0x08007f0c
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d020      	beq.n	80032ea <HAL_SPI_Init+0x24e>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d01c      	beq.n	80032ea <HAL_SPI_Init+0x24e>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	2b10      	cmp	r3, #16
 80032b6:	d018      	beq.n	80032ea <HAL_SPI_Init+0x24e>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	2b18      	cmp	r3, #24
 80032be:	d014      	beq.n	80032ea <HAL_SPI_Init+0x24e>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	2b20      	cmp	r3, #32
 80032c6:	d010      	beq.n	80032ea <HAL_SPI_Init+0x24e>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	2b28      	cmp	r3, #40	; 0x28
 80032ce:	d00c      	beq.n	80032ea <HAL_SPI_Init+0x24e>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	2b30      	cmp	r3, #48	; 0x30
 80032d6:	d008      	beq.n	80032ea <HAL_SPI_Init+0x24e>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	2b38      	cmp	r3, #56	; 0x38
 80032de:	d004      	beq.n	80032ea <HAL_SPI_Init+0x24e>
 80032e0:	f240 115b 	movw	r1, #347	; 0x15b
 80032e4:	483a      	ldr	r0, [pc, #232]	; (80033d0 <HAL_SPI_Init+0x334>)
 80032e6:	f7fd fdc0 	bl	8000e6a <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d106      	bne.n	8003316 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7fd fdeb 	bl	8000eec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2202      	movs	r2, #2
 800331a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800332c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003348:	431a      	orrs	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337a:	ea42 0103 	orr.w	r1, r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003382:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	0c1b      	lsrs	r3, r3, #16
 8003394:	f003 0104 	and.w	r1, r3, #4
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	f003 0210 	and.w	r2, r3, #16
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	69da      	ldr	r2, [r3, #28]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	08007f0c 	.word	0x08007f0c

080033d4 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e038      	b.n	8003458 <HAL_SPI_DeInit+0x84>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a1d      	ldr	r2, [pc, #116]	; (8003460 <HAL_SPI_DeInit+0x8c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d018      	beq.n	8003422 <HAL_SPI_DeInit+0x4e>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a1b      	ldr	r2, [pc, #108]	; (8003464 <HAL_SPI_DeInit+0x90>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d013      	beq.n	8003422 <HAL_SPI_DeInit+0x4e>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a1a      	ldr	r2, [pc, #104]	; (8003468 <HAL_SPI_DeInit+0x94>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d00e      	beq.n	8003422 <HAL_SPI_DeInit+0x4e>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a18      	ldr	r2, [pc, #96]	; (800346c <HAL_SPI_DeInit+0x98>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d009      	beq.n	8003422 <HAL_SPI_DeInit+0x4e>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a17      	ldr	r2, [pc, #92]	; (8003470 <HAL_SPI_DeInit+0x9c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d004      	beq.n	8003422 <HAL_SPI_DeInit+0x4e>
 8003418:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800341c:	4815      	ldr	r0, [pc, #84]	; (8003474 <HAL_SPI_DeInit+0xa0>)
 800341e:	f7fd fd24 	bl	8000e6a <assert_failed>

  hspi->State = HAL_SPI_STATE_BUSY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2202      	movs	r2, #2
 8003426:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003438:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fd fd9e 	bl	8000f7c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40013000 	.word	0x40013000
 8003464:	40003800 	.word	0x40003800
 8003468:	40003c00 	.word	0x40003c00
 800346c:	40013400 	.word	0x40013400
 8003470:	40015000 	.word	0x40015000
 8003474:	08007f0c 	.word	0x08007f0c

08003478 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08c      	sub	sp, #48	; 0x30
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003486:	2301      	movs	r3, #1
 8003488:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800348a:	2300      	movs	r3, #0
 800348c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d004      	beq.n	80034a2 <HAL_SPI_TransmitReceive+0x2a>
 8003498:	f240 417e 	movw	r1, #1150	; 0x47e
 800349c:	4884      	ldr	r0, [pc, #528]	; (80036b0 <HAL_SPI_TransmitReceive+0x238>)
 800349e:	f7fd fce4 	bl	8000e6a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_SPI_TransmitReceive+0x38>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e18d      	b.n	80037cc <HAL_SPI_TransmitReceive+0x354>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034b8:	f7fd ff6c 	bl	8001394 <HAL_GetTick>
 80034bc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80034ce:	887b      	ldrh	r3, [r7, #2]
 80034d0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80034d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d00f      	beq.n	80034fa <HAL_SPI_TransmitReceive+0x82>
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034e0:	d107      	bne.n	80034f2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d103      	bne.n	80034f2 <HAL_SPI_TransmitReceive+0x7a>
 80034ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d003      	beq.n	80034fa <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 80034f2:	2302      	movs	r3, #2
 80034f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80034f8:	e15e      	b.n	80037b8 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d005      	beq.n	800350c <HAL_SPI_TransmitReceive+0x94>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <HAL_SPI_TransmitReceive+0x94>
 8003506:	887b      	ldrh	r3, [r7, #2]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d103      	bne.n	8003514 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003512:	e151      	b.n	80037b8 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b04      	cmp	r3, #4
 800351e:	d003      	beq.n	8003528 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2205      	movs	r2, #5
 8003524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	887a      	ldrh	r2, [r7, #2]
 8003538:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	887a      	ldrh	r2, [r7, #2]
 800353e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	887a      	ldrh	r2, [r7, #2]
 800354a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	887a      	ldrh	r2, [r7, #2]
 8003550:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003568:	2b40      	cmp	r3, #64	; 0x40
 800356a:	d007      	beq.n	800357c <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800357a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003584:	d178      	bne.n	8003678 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <HAL_SPI_TransmitReceive+0x11c>
 800358e:	8b7b      	ldrh	r3, [r7, #26]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d166      	bne.n	8003662 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	881a      	ldrh	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a4:	1c9a      	adds	r2, r3, #2
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035b8:	e053      	b.n	8003662 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d11b      	bne.n	8003600 <HAL_SPI_TransmitReceive+0x188>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d016      	beq.n	8003600 <HAL_SPI_TransmitReceive+0x188>
 80035d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d113      	bne.n	8003600 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	881a      	ldrh	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e8:	1c9a      	adds	r2, r3, #2
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b01      	cmp	r3, #1
 800360c:	d119      	bne.n	8003642 <HAL_SPI_TransmitReceive+0x1ca>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d014      	beq.n	8003642 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003622:	b292      	uxth	r2, r2
 8003624:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362a:	1c9a      	adds	r2, r3, #2
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003634:	b29b      	uxth	r3, r3
 8003636:	3b01      	subs	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800363e:	2301      	movs	r3, #1
 8003640:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003642:	f7fd fea7 	bl	8001394 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800364e:	429a      	cmp	r2, r3
 8003650:	d807      	bhi.n	8003662 <HAL_SPI_TransmitReceive+0x1ea>
 8003652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003654:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003658:	d003      	beq.n	8003662 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003660:	e0aa      	b.n	80037b8 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003666:	b29b      	uxth	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1a6      	bne.n	80035ba <HAL_SPI_TransmitReceive+0x142>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003670:	b29b      	uxth	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1a1      	bne.n	80035ba <HAL_SPI_TransmitReceive+0x142>
 8003676:	e07f      	b.n	8003778 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <HAL_SPI_TransmitReceive+0x20e>
 8003680:	8b7b      	ldrh	r3, [r7, #26]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d16e      	bne.n	8003764 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	330c      	adds	r3, #12
 8003690:	7812      	ldrb	r2, [r2, #0]
 8003692:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036ac:	e05a      	b.n	8003764 <HAL_SPI_TransmitReceive+0x2ec>
 80036ae:	bf00      	nop
 80036b0:	08007f0c 	.word	0x08007f0c
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d11c      	bne.n	80036fc <HAL_SPI_TransmitReceive+0x284>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d017      	beq.n	80036fc <HAL_SPI_TransmitReceive+0x284>
 80036cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d114      	bne.n	80036fc <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	330c      	adds	r3, #12
 80036dc:	7812      	ldrb	r2, [r2, #0]
 80036de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b01      	cmp	r3, #1
 8003708:	d119      	bne.n	800373e <HAL_SPI_TransmitReceive+0x2c6>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800370e:	b29b      	uxth	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d014      	beq.n	800373e <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003730:	b29b      	uxth	r3, r3
 8003732:	3b01      	subs	r3, #1
 8003734:	b29a      	uxth	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800373a:	2301      	movs	r3, #1
 800373c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800373e:	f7fd fe29 	bl	8001394 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800374a:	429a      	cmp	r2, r3
 800374c:	d803      	bhi.n	8003756 <HAL_SPI_TransmitReceive+0x2de>
 800374e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003754:	d102      	bne.n	800375c <HAL_SPI_TransmitReceive+0x2e4>
 8003756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003758:	2b00      	cmp	r3, #0
 800375a:	d103      	bne.n	8003764 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003762:	e029      	b.n	80037b8 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003768:	b29b      	uxth	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1a2      	bne.n	80036b4 <HAL_SPI_TransmitReceive+0x23c>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d19d      	bne.n	80036b4 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 f8b1 	bl	80038e4 <SPI_EndRxTxTransaction>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d006      	beq.n	8003796 <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2220      	movs	r2, #32
 8003792:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003794:	e010      	b.n	80037b8 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10b      	bne.n	80037b6 <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800379e:	2300      	movs	r3, #0
 80037a0:	617b      	str	r3, [r7, #20]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	617b      	str	r3, [r7, #20]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	e000      	b.n	80037b8 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 80037b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3730      	adds	r7, #48	; 0x30
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	603b      	str	r3, [r7, #0]
 80037e0:	4613      	mov	r3, r2
 80037e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037e4:	f7fd fdd6 	bl	8001394 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	4413      	add	r3, r2
 80037f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037f4:	f7fd fdce 	bl	8001394 <HAL_GetTick>
 80037f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037fa:	4b39      	ldr	r3, [pc, #228]	; (80038e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	015b      	lsls	r3, r3, #5
 8003800:	0d1b      	lsrs	r3, r3, #20
 8003802:	69fa      	ldr	r2, [r7, #28]
 8003804:	fb02 f303 	mul.w	r3, r2, r3
 8003808:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800380a:	e054      	b.n	80038b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003812:	d050      	beq.n	80038b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003814:	f7fd fdbe 	bl	8001394 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	69fa      	ldr	r2, [r7, #28]
 8003820:	429a      	cmp	r2, r3
 8003822:	d902      	bls.n	800382a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d13d      	bne.n	80038a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003838:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003842:	d111      	bne.n	8003868 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800384c:	d004      	beq.n	8003858 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003856:	d107      	bne.n	8003868 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003866:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003870:	d10f      	bne.n	8003892 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003890:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e017      	b.n	80038d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	4013      	ands	r3, r2
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	bf0c      	ite	eq
 80038c6:	2301      	moveq	r3, #1
 80038c8:	2300      	movne	r3, #0
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d19b      	bne.n	800380c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3720      	adds	r7, #32
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	20000000 	.word	0x20000000

080038e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b088      	sub	sp, #32
 80038e8:	af02      	add	r7, sp, #8
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80038f0:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <SPI_EndRxTxTransaction+0x7c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a1b      	ldr	r2, [pc, #108]	; (8003964 <SPI_EndRxTxTransaction+0x80>)
 80038f6:	fba2 2303 	umull	r2, r3, r2, r3
 80038fa:	0d5b      	lsrs	r3, r3, #21
 80038fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003900:	fb02 f303 	mul.w	r3, r2, r3
 8003904:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800390e:	d112      	bne.n	8003936 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2200      	movs	r2, #0
 8003918:	2180      	movs	r1, #128	; 0x80
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f7ff ff5a 	bl	80037d4 <SPI_WaitFlagStateUntilTimeout>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d016      	beq.n	8003954 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392a:	f043 0220 	orr.w	r2, r3, #32
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e00f      	b.n	8003956 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	3b01      	subs	r3, #1
 8003940:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394c:	2b80      	cmp	r3, #128	; 0x80
 800394e:	d0f2      	beq.n	8003936 <SPI_EndRxTxTransaction+0x52>
 8003950:	e000      	b.n	8003954 <SPI_EndRxTxTransaction+0x70>
        break;
 8003952:	bf00      	nop
  }

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	20000000 	.word	0x20000000
 8003964:	165e9f81 	.word	0x165e9f81

08003968 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e0a0      	b.n	8003abc <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d02c      	beq.n	80039dc <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a4f      	ldr	r2, [pc, #316]	; (8003ac4 <HAL_UART_Init+0x15c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d00e      	beq.n	80039aa <HAL_UART_Init+0x42>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a4d      	ldr	r2, [pc, #308]	; (8003ac8 <HAL_UART_Init+0x160>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d009      	beq.n	80039aa <HAL_UART_Init+0x42>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a4c      	ldr	r2, [pc, #304]	; (8003acc <HAL_UART_Init+0x164>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d004      	beq.n	80039aa <HAL_UART_Init+0x42>
 80039a0:	f44f 71b9 	mov.w	r1, #370	; 0x172
 80039a4:	484a      	ldr	r0, [pc, #296]	; (8003ad0 <HAL_UART_Init+0x168>)
 80039a6:	f7fd fa60 	bl	8000e6a <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d028      	beq.n	8003a04 <HAL_UART_Init+0x9c>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ba:	d023      	beq.n	8003a04 <HAL_UART_Init+0x9c>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c4:	d01e      	beq.n	8003a04 <HAL_UART_Init+0x9c>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039ce:	d019      	beq.n	8003a04 <HAL_UART_Init+0x9c>
 80039d0:	f240 1173 	movw	r1, #371	; 0x173
 80039d4:	483e      	ldr	r0, [pc, #248]	; (8003ad0 <HAL_UART_Init+0x168>)
 80039d6:	f7fd fa48 	bl	8000e6a <assert_failed>
 80039da:	e013      	b.n	8003a04 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a38      	ldr	r2, [pc, #224]	; (8003ac4 <HAL_UART_Init+0x15c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d00e      	beq.n	8003a04 <HAL_UART_Init+0x9c>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a37      	ldr	r2, [pc, #220]	; (8003ac8 <HAL_UART_Init+0x160>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d009      	beq.n	8003a04 <HAL_UART_Init+0x9c>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a35      	ldr	r2, [pc, #212]	; (8003acc <HAL_UART_Init+0x164>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d004      	beq.n	8003a04 <HAL_UART_Init+0x9c>
 80039fa:	f240 1177 	movw	r1, #375	; 0x177
 80039fe:	4834      	ldr	r0, [pc, #208]	; (8003ad0 <HAL_UART_Init+0x168>)
 8003a00:	f7fd fa33 	bl	8000e6a <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d009      	beq.n	8003a20 <HAL_UART_Init+0xb8>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a14:	d004      	beq.n	8003a20 <HAL_UART_Init+0xb8>
 8003a16:	f240 1179 	movw	r1, #377	; 0x179
 8003a1a:	482d      	ldr	r0, [pc, #180]	; (8003ad0 <HAL_UART_Init+0x168>)
 8003a1c:	f7fd fa25 	bl	8000e6a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d009      	beq.n	8003a3c <HAL_UART_Init+0xd4>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a30:	d004      	beq.n	8003a3c <HAL_UART_Init+0xd4>
 8003a32:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8003a36:	4826      	ldr	r0, [pc, #152]	; (8003ad0 <HAL_UART_Init+0x168>)
 8003a38:	f7fd fa17 	bl	8000e6a <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d106      	bne.n	8003a56 <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7fd fb75 	bl	8001140 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2224      	movs	r2, #36	; 0x24
 8003a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a6c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f97c 	bl	8003d6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	691a      	ldr	r2, [r3, #16]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a82:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695a      	ldr	r2, [r3, #20]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a92:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003aa2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2220      	movs	r2, #32
 8003aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40011000 	.word	0x40011000
 8003ac8:	40004400 	.word	0x40004400
 8003acc:	40011400 	.word	0x40011400
 8003ad0:	08007f44 	.word	0x08007f44

08003ad4 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e035      	b.n	8003b52 <HAL_UART_DeInit+0x7e>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a1c      	ldr	r2, [pc, #112]	; (8003b5c <HAL_UART_DeInit+0x88>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d00e      	beq.n	8003b0e <HAL_UART_DeInit+0x3a>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a1a      	ldr	r2, [pc, #104]	; (8003b60 <HAL_UART_DeInit+0x8c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d009      	beq.n	8003b0e <HAL_UART_DeInit+0x3a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a19      	ldr	r2, [pc, #100]	; (8003b64 <HAL_UART_DeInit+0x90>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d004      	beq.n	8003b0e <HAL_UART_DeInit+0x3a>
 8003b04:	f240 21a1 	movw	r1, #673	; 0x2a1
 8003b08:	4817      	ldr	r0, [pc, #92]	; (8003b68 <HAL_UART_DeInit+0x94>)
 8003b0a:	f7fd f9ae 	bl	8000e6a <assert_failed>

  huart->gState = HAL_UART_STATE_BUSY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2224      	movs	r2, #36	; 0x24
 8003b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b24:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7fd fb52 	bl	80011d0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40011000 	.word	0x40011000
 8003b60:	40004400 	.word	0x40004400
 8003b64:	40011400 	.word	0x40011400
 8003b68:	08007f44 	.word	0x08007f44

08003b6c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08a      	sub	sp, #40	; 0x28
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	603b      	str	r3, [r7, #0]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b20      	cmp	r3, #32
 8003b8a:	d17c      	bne.n	8003c86 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <HAL_UART_Transmit+0x2c>
 8003b92:	88fb      	ldrh	r3, [r7, #6]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e075      	b.n	8003c88 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_UART_Transmit+0x3e>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e06e      	b.n	8003c88 <HAL_UART_Transmit+0x11c>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2221      	movs	r2, #33	; 0x21
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bc0:	f7fd fbe8 	bl	8001394 <HAL_GetTick>
 8003bc4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	88fa      	ldrh	r2, [r7, #6]
 8003bca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	88fa      	ldrh	r2, [r7, #6]
 8003bd0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bda:	d108      	bne.n	8003bee <HAL_UART_Transmit+0x82>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d104      	bne.n	8003bee <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	61bb      	str	r3, [r7, #24]
 8003bec:	e003      	b.n	8003bf6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003bfe:	e02a      	b.n	8003c56 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	2200      	movs	r2, #0
 8003c08:	2180      	movs	r1, #128	; 0x80
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 f840 	bl	8003c90 <UART_WaitOnFlagUntilTimeout>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e036      	b.n	8003c88 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10b      	bne.n	8003c38 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	461a      	mov	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c2e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	3302      	adds	r3, #2
 8003c34:	61bb      	str	r3, [r7, #24]
 8003c36:	e007      	b.n	8003c48 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	781a      	ldrb	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	3301      	adds	r3, #1
 8003c46:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1cf      	bne.n	8003c00 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	2200      	movs	r2, #0
 8003c68:	2140      	movs	r1, #64	; 0x40
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 f810 	bl	8003c90 <UART_WaitOnFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e006      	b.n	8003c88 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	e000      	b.n	8003c88 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c86:	2302      	movs	r3, #2
  }
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3720      	adds	r7, #32
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b090      	sub	sp, #64	; 0x40
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	603b      	str	r3, [r7, #0]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ca0:	e050      	b.n	8003d44 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ca8:	d04c      	beq.n	8003d44 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d007      	beq.n	8003cc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cb0:	f7fd fb70 	bl	8001394 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d241      	bcs.n	8003d44 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	330c      	adds	r3, #12
 8003cc6:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cca:	e853 3f00 	ldrex	r3, [r3]
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	330c      	adds	r3, #12
 8003cde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ce0:	637a      	str	r2, [r7, #52]	; 0x34
 8003ce2:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ce6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ce8:	e841 2300 	strex	r3, r2, [r1]
 8003cec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1e5      	bne.n	8003cc0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3314      	adds	r3, #20
 8003cfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	e853 3f00 	ldrex	r3, [r3]
 8003d02:	613b      	str	r3, [r7, #16]
   return(result);
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f023 0301 	bic.w	r3, r3, #1
 8003d0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3314      	adds	r3, #20
 8003d12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d14:	623a      	str	r2, [r7, #32]
 8003d16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d18:	69f9      	ldr	r1, [r7, #28]
 8003d1a:	6a3a      	ldr	r2, [r7, #32]
 8003d1c:	e841 2300 	strex	r3, r2, [r1]
 8003d20:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1e5      	bne.n	8003cf4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e00f      	b.n	8003d64 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	bf0c      	ite	eq
 8003d54:	2301      	moveq	r3, #1
 8003d56:	2300      	movne	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	79fb      	ldrb	r3, [r7, #7]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d09f      	beq.n	8003ca2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3740      	adds	r7, #64	; 0x40
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d70:	b09f      	sub	sp, #124	; 0x7c
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	66f8      	str	r0, [r7, #108]	; 0x6c
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	4b9b      	ldr	r3, [pc, #620]	; (8003fe8 <UART_SetConfig+0x27c>)
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d904      	bls.n	8003d8a <UART_SetConfig+0x1e>
 8003d80:	f640 6156 	movw	r1, #3670	; 0xe56
 8003d84:	4899      	ldr	r0, [pc, #612]	; (8003fec <UART_SetConfig+0x280>)
 8003d86:	f7fd f870 	bl	8000e6a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8003d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d009      	beq.n	8003da6 <UART_SetConfig+0x3a>
 8003d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d9a:	d004      	beq.n	8003da6 <UART_SetConfig+0x3a>
 8003d9c:	f640 6157 	movw	r1, #3671	; 0xe57
 8003da0:	4892      	ldr	r0, [pc, #584]	; (8003fec <UART_SetConfig+0x280>)
 8003da2:	f7fd f862 	bl	8000e6a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00e      	beq.n	8003dcc <UART_SetConfig+0x60>
 8003dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db6:	d009      	beq.n	8003dcc <UART_SetConfig+0x60>
 8003db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003dc0:	d004      	beq.n	8003dcc <UART_SetConfig+0x60>
 8003dc2:	f640 6158 	movw	r1, #3672	; 0xe58
 8003dc6:	4889      	ldr	r0, [pc, #548]	; (8003fec <UART_SetConfig+0x280>)
 8003dc8:	f7fd f84f 	bl	8000e6a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8003dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dce:	695a      	ldr	r2, [r3, #20]
 8003dd0:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d103      	bne.n	8003de2 <UART_SetConfig+0x76>
 8003dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d104      	bne.n	8003dec <UART_SetConfig+0x80>
 8003de2:	f640 6159 	movw	r1, #3673	; 0xe59
 8003de6:	4881      	ldr	r0, [pc, #516]	; (8003fec <UART_SetConfig+0x280>)
 8003de8:	f7fd f83f 	bl	8000e6a <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df8:	68d9      	ldr	r1, [r3, #12]
 8003dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	ea40 0301 	orr.w	r3, r0, r1
 8003e02:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e26:	f021 010c 	bic.w	r1, r1, #12
 8003e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e30:	430b      	orrs	r3, r1
 8003e32:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e40:	6999      	ldr	r1, [r3, #24]
 8003e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	ea40 0301 	orr.w	r3, r0, r1
 8003e4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	4b67      	ldr	r3, [pc, #412]	; (8003ff0 <UART_SetConfig+0x284>)
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d004      	beq.n	8003e60 <UART_SetConfig+0xf4>
 8003e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	4b66      	ldr	r3, [pc, #408]	; (8003ff4 <UART_SetConfig+0x288>)
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d103      	bne.n	8003e68 <UART_SetConfig+0xfc>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e60:	f7ff f83a 	bl	8002ed8 <HAL_RCC_GetPCLK2Freq>
 8003e64:	6778      	str	r0, [r7, #116]	; 0x74
 8003e66:	e002      	b.n	8003e6e <UART_SetConfig+0x102>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e68:	f7ff f822 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 8003e6c:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e76:	f040 80c1 	bne.w	8003ffc <UART_SetConfig+0x290>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e7c:	461c      	mov	r4, r3
 8003e7e:	f04f 0500 	mov.w	r5, #0
 8003e82:	4622      	mov	r2, r4
 8003e84:	462b      	mov	r3, r5
 8003e86:	1891      	adds	r1, r2, r2
 8003e88:	6439      	str	r1, [r7, #64]	; 0x40
 8003e8a:	415b      	adcs	r3, r3
 8003e8c:	647b      	str	r3, [r7, #68]	; 0x44
 8003e8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e92:	1912      	adds	r2, r2, r4
 8003e94:	eb45 0303 	adc.w	r3, r5, r3
 8003e98:	f04f 0000 	mov.w	r0, #0
 8003e9c:	f04f 0100 	mov.w	r1, #0
 8003ea0:	00d9      	lsls	r1, r3, #3
 8003ea2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ea6:	00d0      	lsls	r0, r2, #3
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	1911      	adds	r1, r2, r4
 8003eae:	6639      	str	r1, [r7, #96]	; 0x60
 8003eb0:	416b      	adcs	r3, r5
 8003eb2:	667b      	str	r3, [r7, #100]	; 0x64
 8003eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	f04f 0300 	mov.w	r3, #0
 8003ebe:	1891      	adds	r1, r2, r2
 8003ec0:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ec2:	415b      	adcs	r3, r3
 8003ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ec6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003eca:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003ece:	f7fc f9df 	bl	8000290 <__aeabi_uldivmod>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	4b48      	ldr	r3, [pc, #288]	; (8003ff8 <UART_SetConfig+0x28c>)
 8003ed8:	fba3 2302 	umull	r2, r3, r3, r2
 8003edc:	095b      	lsrs	r3, r3, #5
 8003ede:	011e      	lsls	r6, r3, #4
 8003ee0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ee2:	461c      	mov	r4, r3
 8003ee4:	f04f 0500 	mov.w	r5, #0
 8003ee8:	4622      	mov	r2, r4
 8003eea:	462b      	mov	r3, r5
 8003eec:	1891      	adds	r1, r2, r2
 8003eee:	6339      	str	r1, [r7, #48]	; 0x30
 8003ef0:	415b      	adcs	r3, r3
 8003ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ef4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003ef8:	1912      	adds	r2, r2, r4
 8003efa:	eb45 0303 	adc.w	r3, r5, r3
 8003efe:	f04f 0000 	mov.w	r0, #0
 8003f02:	f04f 0100 	mov.w	r1, #0
 8003f06:	00d9      	lsls	r1, r3, #3
 8003f08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f0c:	00d0      	lsls	r0, r2, #3
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	1911      	adds	r1, r2, r4
 8003f14:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f16:	416b      	adcs	r3, r5
 8003f18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	1891      	adds	r1, r2, r2
 8003f26:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f28:	415b      	adcs	r3, r3
 8003f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f30:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003f34:	f7fc f9ac 	bl	8000290 <__aeabi_uldivmod>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4b2e      	ldr	r3, [pc, #184]	; (8003ff8 <UART_SetConfig+0x28c>)
 8003f3e:	fba3 1302 	umull	r1, r3, r3, r2
 8003f42:	095b      	lsrs	r3, r3, #5
 8003f44:	2164      	movs	r1, #100	; 0x64
 8003f46:	fb01 f303 	mul.w	r3, r1, r3
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	3332      	adds	r3, #50	; 0x32
 8003f50:	4a29      	ldr	r2, [pc, #164]	; (8003ff8 <UART_SetConfig+0x28c>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	095b      	lsrs	r3, r3, #5
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f5e:	441e      	add	r6, r3
 8003f60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f62:	4618      	mov	r0, r3
 8003f64:	f04f 0100 	mov.w	r1, #0
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	1894      	adds	r4, r2, r2
 8003f6e:	623c      	str	r4, [r7, #32]
 8003f70:	415b      	adcs	r3, r3
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
 8003f74:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f78:	1812      	adds	r2, r2, r0
 8003f7a:	eb41 0303 	adc.w	r3, r1, r3
 8003f7e:	f04f 0400 	mov.w	r4, #0
 8003f82:	f04f 0500 	mov.w	r5, #0
 8003f86:	00dd      	lsls	r5, r3, #3
 8003f88:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f8c:	00d4      	lsls	r4, r2, #3
 8003f8e:	4622      	mov	r2, r4
 8003f90:	462b      	mov	r3, r5
 8003f92:	1814      	adds	r4, r2, r0
 8003f94:	653c      	str	r4, [r7, #80]	; 0x50
 8003f96:	414b      	adcs	r3, r1
 8003f98:	657b      	str	r3, [r7, #84]	; 0x54
 8003f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	1891      	adds	r1, r2, r2
 8003fa6:	61b9      	str	r1, [r7, #24]
 8003fa8:	415b      	adcs	r3, r3
 8003faa:	61fb      	str	r3, [r7, #28]
 8003fac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fb0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003fb4:	f7fc f96c 	bl	8000290 <__aeabi_uldivmod>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4b0e      	ldr	r3, [pc, #56]	; (8003ff8 <UART_SetConfig+0x28c>)
 8003fbe:	fba3 1302 	umull	r1, r3, r3, r2
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	2164      	movs	r1, #100	; 0x64
 8003fc6:	fb01 f303 	mul.w	r3, r1, r3
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	3332      	adds	r3, #50	; 0x32
 8003fd0:	4a09      	ldr	r2, [pc, #36]	; (8003ff8 <UART_SetConfig+0x28c>)
 8003fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd6:	095b      	lsrs	r3, r3, #5
 8003fd8:	f003 0207 	and.w	r2, r3, #7
 8003fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4432      	add	r2, r6
 8003fe2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fe4:	e0c4      	b.n	8004170 <UART_SetConfig+0x404>
 8003fe6:	bf00      	nop
 8003fe8:	00a037a0 	.word	0x00a037a0
 8003fec:	08007f44 	.word	0x08007f44
 8003ff0:	40011000 	.word	0x40011000
 8003ff4:	40011400 	.word	0x40011400
 8003ff8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ffc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ffe:	461c      	mov	r4, r3
 8004000:	f04f 0500 	mov.w	r5, #0
 8004004:	4622      	mov	r2, r4
 8004006:	462b      	mov	r3, r5
 8004008:	1891      	adds	r1, r2, r2
 800400a:	6139      	str	r1, [r7, #16]
 800400c:	415b      	adcs	r3, r3
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004014:	1912      	adds	r2, r2, r4
 8004016:	eb45 0303 	adc.w	r3, r5, r3
 800401a:	f04f 0000 	mov.w	r0, #0
 800401e:	f04f 0100 	mov.w	r1, #0
 8004022:	00d9      	lsls	r1, r3, #3
 8004024:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004028:	00d0      	lsls	r0, r2, #3
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	eb12 0804 	adds.w	r8, r2, r4
 8004032:	eb43 0905 	adc.w	r9, r3, r5
 8004036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	4618      	mov	r0, r3
 800403c:	f04f 0100 	mov.w	r1, #0
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	008b      	lsls	r3, r1, #2
 800404a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800404e:	0082      	lsls	r2, r0, #2
 8004050:	4640      	mov	r0, r8
 8004052:	4649      	mov	r1, r9
 8004054:	f7fc f91c 	bl	8000290 <__aeabi_uldivmod>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4b47      	ldr	r3, [pc, #284]	; (800417c <UART_SetConfig+0x410>)
 800405e:	fba3 2302 	umull	r2, r3, r3, r2
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	011e      	lsls	r6, r3, #4
 8004066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004068:	4618      	mov	r0, r3
 800406a:	f04f 0100 	mov.w	r1, #0
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	1894      	adds	r4, r2, r2
 8004074:	60bc      	str	r4, [r7, #8]
 8004076:	415b      	adcs	r3, r3
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800407e:	1812      	adds	r2, r2, r0
 8004080:	eb41 0303 	adc.w	r3, r1, r3
 8004084:	f04f 0400 	mov.w	r4, #0
 8004088:	f04f 0500 	mov.w	r5, #0
 800408c:	00dd      	lsls	r5, r3, #3
 800408e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004092:	00d4      	lsls	r4, r2, #3
 8004094:	4622      	mov	r2, r4
 8004096:	462b      	mov	r3, r5
 8004098:	1814      	adds	r4, r2, r0
 800409a:	64bc      	str	r4, [r7, #72]	; 0x48
 800409c:	414b      	adcs	r3, r1
 800409e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f04f 0100 	mov.w	r1, #0
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	008b      	lsls	r3, r1, #2
 80040b4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040b8:	0082      	lsls	r2, r0, #2
 80040ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80040be:	f7fc f8e7 	bl	8000290 <__aeabi_uldivmod>
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	4b2d      	ldr	r3, [pc, #180]	; (800417c <UART_SetConfig+0x410>)
 80040c8:	fba3 1302 	umull	r1, r3, r3, r2
 80040cc:	095b      	lsrs	r3, r3, #5
 80040ce:	2164      	movs	r1, #100	; 0x64
 80040d0:	fb01 f303 	mul.w	r3, r1, r3
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	3332      	adds	r3, #50	; 0x32
 80040da:	4a28      	ldr	r2, [pc, #160]	; (800417c <UART_SetConfig+0x410>)
 80040dc:	fba2 2303 	umull	r2, r3, r2, r3
 80040e0:	095b      	lsrs	r3, r3, #5
 80040e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040e6:	441e      	add	r6, r3
 80040e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040ea:	4618      	mov	r0, r3
 80040ec:	f04f 0100 	mov.w	r1, #0
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	1894      	adds	r4, r2, r2
 80040f6:	603c      	str	r4, [r7, #0]
 80040f8:	415b      	adcs	r3, r3
 80040fa:	607b      	str	r3, [r7, #4]
 80040fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004100:	1812      	adds	r2, r2, r0
 8004102:	eb41 0303 	adc.w	r3, r1, r3
 8004106:	f04f 0400 	mov.w	r4, #0
 800410a:	f04f 0500 	mov.w	r5, #0
 800410e:	00dd      	lsls	r5, r3, #3
 8004110:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004114:	00d4      	lsls	r4, r2, #3
 8004116:	4622      	mov	r2, r4
 8004118:	462b      	mov	r3, r5
 800411a:	eb12 0a00 	adds.w	sl, r2, r0
 800411e:	eb43 0b01 	adc.w	fp, r3, r1
 8004122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	4618      	mov	r0, r3
 8004128:	f04f 0100 	mov.w	r1, #0
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	008b      	lsls	r3, r1, #2
 8004136:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800413a:	0082      	lsls	r2, r0, #2
 800413c:	4650      	mov	r0, sl
 800413e:	4659      	mov	r1, fp
 8004140:	f7fc f8a6 	bl	8000290 <__aeabi_uldivmod>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4b0c      	ldr	r3, [pc, #48]	; (800417c <UART_SetConfig+0x410>)
 800414a:	fba3 1302 	umull	r1, r3, r3, r2
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	2164      	movs	r1, #100	; 0x64
 8004152:	fb01 f303 	mul.w	r3, r1, r3
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	3332      	adds	r3, #50	; 0x32
 800415c:	4a07      	ldr	r2, [pc, #28]	; (800417c <UART_SetConfig+0x410>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	f003 020f 	and.w	r2, r3, #15
 8004168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4432      	add	r2, r6
 800416e:	609a      	str	r2, [r3, #8]
}
 8004170:	bf00      	nop
 8004172:	377c      	adds	r7, #124	; 0x7c
 8004174:	46bd      	mov	sp, r7
 8004176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800417a:	bf00      	nop
 800417c:	51eb851f 	.word	0x51eb851f

08004180 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004184:	4904      	ldr	r1, [pc, #16]	; (8004198 <MX_FATFS_Init+0x18>)
 8004186:	4805      	ldr	r0, [pc, #20]	; (800419c <MX_FATFS_Init+0x1c>)
 8004188:	f003 f90a 	bl	80073a0 <FATFS_LinkDriver>
 800418c:	4603      	mov	r3, r0
 800418e:	461a      	mov	r2, r3
 8004190:	4b03      	ldr	r3, [pc, #12]	; (80041a0 <MX_FATFS_Init+0x20>)
 8004192:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004194:	bf00      	nop
 8004196:	bd80      	pop	{r7, pc}
 8004198:	200002b0 	.word	0x200002b0
 800419c:	2000000c 	.word	0x2000000c
 80041a0:	200002b4 	.word	0x200002b4

080041a4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80041a8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	4603      	mov	r3, r0
 80041bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80041be:	79fb      	ldrb	r3, [r7, #7]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 f9d9 	bl	8004578 <USER_SPI_initialize>
 80041c6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	4603      	mov	r3, r0
 80041d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80041da:	79fb      	ldrb	r3, [r7, #7]
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fab7 	bl	8004750 <USER_SPI_status>
 80041e2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60b9      	str	r1, [r7, #8]
 80041f4:	607a      	str	r2, [r7, #4]
 80041f6:	603b      	str	r3, [r7, #0]
 80041f8:	4603      	mov	r3, r0
 80041fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 80041fc:	7bf8      	ldrb	r0, [r7, #15]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	68b9      	ldr	r1, [r7, #8]
 8004204:	f000 faba 	bl	800477c <USER_SPI_read>
 8004208:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b084      	sub	sp, #16
 8004216:	af00      	add	r7, sp, #0
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
 800421c:	603b      	str	r3, [r7, #0]
 800421e:	4603      	mov	r3, r0
 8004220:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8004222:	7bf8      	ldrb	r0, [r7, #15]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	68b9      	ldr	r1, [r7, #8]
 800422a:	f000 fb0d 	bl	8004848 <USER_SPI_write>
 800422e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	4603      	mov	r3, r0
 8004240:	603a      	str	r2, [r7, #0]
 8004242:	71fb      	strb	r3, [r7, #7]
 8004244:	460b      	mov	r3, r1
 8004246:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8004248:	79b9      	ldrb	r1, [r7, #6]
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f000 fb76 	bl	8004940 <USER_SPI_ioctl>
 8004254:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004268:	f7fd f894 	bl	8001394 <HAL_GetTick>
 800426c:	4603      	mov	r3, r0
 800426e:	4a04      	ldr	r2, [pc, #16]	; (8004280 <SPI_Timer_On+0x20>)
 8004270:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8004272:	4a04      	ldr	r2, [pc, #16]	; (8004284 <SPI_Timer_On+0x24>)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6013      	str	r3, [r2, #0]
}
 8004278:	bf00      	nop
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	20000718 	.word	0x20000718
 8004284:	2000071c 	.word	0x2000071c

08004288 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800428c:	f7fd f882 	bl	8001394 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	4b06      	ldr	r3, [pc, #24]	; (80042ac <SPI_Timer_Status+0x24>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	1ad2      	subs	r2, r2, r3
 8004298:	4b05      	ldr	r3, [pc, #20]	; (80042b0 <SPI_Timer_Status+0x28>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	429a      	cmp	r2, r3
 800429e:	bf34      	ite	cc
 80042a0:	2301      	movcc	r3, #1
 80042a2:	2300      	movcs	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20000718 	.word	0x20000718
 80042b0:	2000071c 	.word	0x2000071c

080042b4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af02      	add	r7, sp, #8
 80042ba:	4603      	mov	r3, r0
 80042bc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80042be:	f107 020f 	add.w	r2, r7, #15
 80042c2:	1df9      	adds	r1, r7, #7
 80042c4:	2332      	movs	r3, #50	; 0x32
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	2301      	movs	r3, #1
 80042ca:	4804      	ldr	r0, [pc, #16]	; (80042dc <xchg_spi+0x28>)
 80042cc:	f7ff f8d4 	bl	8003478 <HAL_SPI_TransmitReceive>
    return rxDat;
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	200001f0 	.word	0x200001f0

080042e0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80042e0:	b590      	push	{r4, r7, lr}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80042ea:	2300      	movs	r3, #0
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	e00a      	b.n	8004306 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	18d4      	adds	r4, r2, r3
 80042f6:	20ff      	movs	r0, #255	; 0xff
 80042f8:	f7ff ffdc 	bl	80042b4 <xchg_spi>
 80042fc:	4603      	mov	r3, r0
 80042fe:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	3301      	adds	r3, #1
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d3f0      	bcc.n	80042f0 <rcvr_spi_multi+0x10>
	}
}
 800430e:	bf00      	nop
 8004310:	bf00      	nop
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	bd90      	pop	{r4, r7, pc}

08004318 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8004322:	2300      	movs	r3, #0
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	e009      	b.n	800433c <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4413      	add	r3, r2
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff ffbf 	bl	80042b4 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	3301      	adds	r3, #1
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	429a      	cmp	r2, r3
 8004342:	d3f1      	bcc.n	8004328 <xmit_spi_multi+0x10>
	}
}
 8004344:	bf00      	nop
 8004346:	bf00      	nop
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b086      	sub	sp, #24
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8004356:	f7fd f81d 	bl	8001394 <HAL_GetTick>
 800435a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004360:	20ff      	movs	r0, #255	; 0xff
 8004362:	f7ff ffa7 	bl	80042b4 <xchg_spi>
 8004366:	4603      	mov	r3, r0
 8004368:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800436a:	7bfb      	ldrb	r3, [r7, #15]
 800436c:	2bff      	cmp	r3, #255	; 0xff
 800436e:	d007      	beq.n	8004380 <wait_ready+0x32>
 8004370:	f7fd f810 	bl	8001394 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	429a      	cmp	r2, r3
 800437e:	d8ef      	bhi.n	8004360 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	2bff      	cmp	r3, #255	; 0xff
 8004384:	bf0c      	ite	eq
 8004386:	2301      	moveq	r3, #1
 8004388:	2300      	movne	r3, #0
 800438a:	b2db      	uxtb	r3, r3
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8004398:	2201      	movs	r2, #1
 800439a:	2102      	movs	r1, #2
 800439c:	4803      	ldr	r0, [pc, #12]	; (80043ac <despiselect+0x18>)
 800439e:	f7fd ffb1 	bl	8002304 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80043a2:	20ff      	movs	r0, #255	; 0xff
 80043a4:	f7ff ff86 	bl	80042b4 <xchg_spi>

}
 80043a8:	bf00      	nop
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40020400 	.word	0x40020400

080043b0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80043b4:	2200      	movs	r2, #0
 80043b6:	2102      	movs	r1, #2
 80043b8:	4809      	ldr	r0, [pc, #36]	; (80043e0 <spiselect+0x30>)
 80043ba:	f7fd ffa3 	bl	8002304 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80043be:	20ff      	movs	r0, #255	; 0xff
 80043c0:	f7ff ff78 	bl	80042b4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80043c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80043c8:	f7ff ffc1 	bl	800434e <wait_ready>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <spiselect+0x26>
 80043d2:	2301      	movs	r3, #1
 80043d4:	e002      	b.n	80043dc <spiselect+0x2c>

	despiselect();
 80043d6:	f7ff ffdd 	bl	8004394 <despiselect>
	return 0;	/* Timeout */
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40020400 	.word	0x40020400

080043e4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80043ee:	20c8      	movs	r0, #200	; 0xc8
 80043f0:	f7ff ff36 	bl	8004260 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80043f4:	20ff      	movs	r0, #255	; 0xff
 80043f6:	f7ff ff5d 	bl	80042b4 <xchg_spi>
 80043fa:	4603      	mov	r3, r0
 80043fc:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
 8004400:	2bff      	cmp	r3, #255	; 0xff
 8004402:	d104      	bne.n	800440e <rcvr_datablock+0x2a>
 8004404:	f7ff ff40 	bl	8004288 <SPI_Timer_Status>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f2      	bne.n	80043f4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800440e:	7bfb      	ldrb	r3, [r7, #15]
 8004410:	2bfe      	cmp	r3, #254	; 0xfe
 8004412:	d001      	beq.n	8004418 <rcvr_datablock+0x34>
 8004414:	2300      	movs	r3, #0
 8004416:	e00a      	b.n	800442e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004418:	6839      	ldr	r1, [r7, #0]
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7ff ff60 	bl	80042e0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004420:	20ff      	movs	r0, #255	; 0xff
 8004422:	f7ff ff47 	bl	80042b4 <xchg_spi>
 8004426:	20ff      	movs	r0, #255	; 0xff
 8004428:	f7ff ff44 	bl	80042b4 <xchg_spi>

	return 1;						/* Function succeeded */
 800442c:	2301      	movs	r3, #1
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b084      	sub	sp, #16
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	460b      	mov	r3, r1
 8004440:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8004442:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004446:	f7ff ff82 	bl	800434e <wait_ready>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <xmit_datablock+0x1e>
 8004450:	2300      	movs	r3, #0
 8004452:	e01e      	b.n	8004492 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8004454:	78fb      	ldrb	r3, [r7, #3]
 8004456:	4618      	mov	r0, r3
 8004458:	f7ff ff2c 	bl	80042b4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	2bfd      	cmp	r3, #253	; 0xfd
 8004460:	d016      	beq.n	8004490 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8004462:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7ff ff56 	bl	8004318 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800446c:	20ff      	movs	r0, #255	; 0xff
 800446e:	f7ff ff21 	bl	80042b4 <xchg_spi>
 8004472:	20ff      	movs	r0, #255	; 0xff
 8004474:	f7ff ff1e 	bl	80042b4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8004478:	20ff      	movs	r0, #255	; 0xff
 800447a:	f7ff ff1b 	bl	80042b4 <xchg_spi>
 800447e:	4603      	mov	r3, r0
 8004480:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8004482:	7bfb      	ldrb	r3, [r7, #15]
 8004484:	f003 031f 	and.w	r3, r3, #31
 8004488:	2b05      	cmp	r3, #5
 800448a:	d001      	beq.n	8004490 <xmit_datablock+0x5a>
 800448c:	2300      	movs	r3, #0
 800448e:	e000      	b.n	8004492 <xmit_datablock+0x5c>
	}
	return 1;
 8004490:	2301      	movs	r3, #1
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b084      	sub	sp, #16
 800449e:	af00      	add	r7, sp, #0
 80044a0:	4603      	mov	r3, r0
 80044a2:	6039      	str	r1, [r7, #0]
 80044a4:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80044a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	da0e      	bge.n	80044cc <send_cmd+0x32>
		cmd &= 0x7F;
 80044ae:	79fb      	ldrb	r3, [r7, #7]
 80044b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044b4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80044b6:	2100      	movs	r1, #0
 80044b8:	2037      	movs	r0, #55	; 0x37
 80044ba:	f7ff ffee 	bl	800449a <send_cmd>
 80044be:	4603      	mov	r3, r0
 80044c0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80044c2:	7bbb      	ldrb	r3, [r7, #14]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d901      	bls.n	80044cc <send_cmd+0x32>
 80044c8:	7bbb      	ldrb	r3, [r7, #14]
 80044ca:	e051      	b.n	8004570 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80044cc:	79fb      	ldrb	r3, [r7, #7]
 80044ce:	2b0c      	cmp	r3, #12
 80044d0:	d008      	beq.n	80044e4 <send_cmd+0x4a>
		despiselect();
 80044d2:	f7ff ff5f 	bl	8004394 <despiselect>
		if (!spiselect()) return 0xFF;
 80044d6:	f7ff ff6b 	bl	80043b0 <spiselect>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <send_cmd+0x4a>
 80044e0:	23ff      	movs	r3, #255	; 0xff
 80044e2:	e045      	b.n	8004570 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80044e4:	79fb      	ldrb	r3, [r7, #7]
 80044e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff fee1 	bl	80042b4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	0e1b      	lsrs	r3, r3, #24
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff fedb 	bl	80042b4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	0c1b      	lsrs	r3, r3, #16
 8004502:	b2db      	uxtb	r3, r3
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff fed5 	bl	80042b4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	0a1b      	lsrs	r3, r3, #8
 800450e:	b2db      	uxtb	r3, r3
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff fecf 	bl	80042b4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	b2db      	uxtb	r3, r3
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff feca 	bl	80042b4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8004520:	2301      	movs	r3, #1
 8004522:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <send_cmd+0x94>
 800452a:	2395      	movs	r3, #149	; 0x95
 800452c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800452e:	79fb      	ldrb	r3, [r7, #7]
 8004530:	2b08      	cmp	r3, #8
 8004532:	d101      	bne.n	8004538 <send_cmd+0x9e>
 8004534:	2387      	movs	r3, #135	; 0x87
 8004536:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8004538:	7bfb      	ldrb	r3, [r7, #15]
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff feba 	bl	80042b4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	2b0c      	cmp	r3, #12
 8004544:	d102      	bne.n	800454c <send_cmd+0xb2>
 8004546:	20ff      	movs	r0, #255	; 0xff
 8004548:	f7ff feb4 	bl	80042b4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800454c:	230a      	movs	r3, #10
 800454e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8004550:	20ff      	movs	r0, #255	; 0xff
 8004552:	f7ff feaf 	bl	80042b4 <xchg_spi>
 8004556:	4603      	mov	r3, r0
 8004558:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800455a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800455e:	2b00      	cmp	r3, #0
 8004560:	da05      	bge.n	800456e <send_cmd+0xd4>
 8004562:	7bfb      	ldrb	r3, [r7, #15]
 8004564:	3b01      	subs	r3, #1
 8004566:	73fb      	strb	r3, [r7, #15]
 8004568:	7bfb      	ldrb	r3, [r7, #15]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f0      	bne.n	8004550 <send_cmd+0xb6>

	return res;							/* Return received response */
 800456e:	7bbb      	ldrb	r3, [r7, #14]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004578:	b590      	push	{r4, r7, lr}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	4603      	mov	r3, r0
 8004580:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8004582:	79fb      	ldrb	r3, [r7, #7]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <USER_SPI_initialize+0x14>
 8004588:	2301      	movs	r3, #1
 800458a:	e0d6      	b.n	800473a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800458c:	4b6d      	ldr	r3, [pc, #436]	; (8004744 <USER_SPI_initialize+0x1cc>)
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <USER_SPI_initialize+0x2a>
 800459a:	4b6a      	ldr	r3, [pc, #424]	; (8004744 <USER_SPI_initialize+0x1cc>)
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	e0cb      	b.n	800473a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80045a2:	4b69      	ldr	r3, [pc, #420]	; (8004748 <USER_SPI_initialize+0x1d0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80045ac:	4b66      	ldr	r3, [pc, #408]	; (8004748 <USER_SPI_initialize+0x1d0>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80045b4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80045b6:	230a      	movs	r3, #10
 80045b8:	73fb      	strb	r3, [r7, #15]
 80045ba:	e005      	b.n	80045c8 <USER_SPI_initialize+0x50>
 80045bc:	20ff      	movs	r0, #255	; 0xff
 80045be:	f7ff fe79 	bl	80042b4 <xchg_spi>
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	3b01      	subs	r3, #1
 80045c6:	73fb      	strb	r3, [r7, #15]
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f6      	bne.n	80045bc <USER_SPI_initialize+0x44>

	ty = 0;
 80045ce:	2300      	movs	r3, #0
 80045d0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80045d2:	2100      	movs	r1, #0
 80045d4:	2000      	movs	r0, #0
 80045d6:	f7ff ff60 	bl	800449a <send_cmd>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b01      	cmp	r3, #1
 80045de:	f040 808b 	bne.w	80046f8 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80045e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045e6:	f7ff fe3b 	bl	8004260 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80045ea:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80045ee:	2008      	movs	r0, #8
 80045f0:	f7ff ff53 	bl	800449a <send_cmd>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d151      	bne.n	800469e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80045fa:	2300      	movs	r3, #0
 80045fc:	73fb      	strb	r3, [r7, #15]
 80045fe:	e00d      	b.n	800461c <USER_SPI_initialize+0xa4>
 8004600:	7bfc      	ldrb	r4, [r7, #15]
 8004602:	20ff      	movs	r0, #255	; 0xff
 8004604:	f7ff fe56 	bl	80042b4 <xchg_spi>
 8004608:	4603      	mov	r3, r0
 800460a:	461a      	mov	r2, r3
 800460c:	f107 0310 	add.w	r3, r7, #16
 8004610:	4423      	add	r3, r4
 8004612:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004616:	7bfb      	ldrb	r3, [r7, #15]
 8004618:	3301      	adds	r3, #1
 800461a:	73fb      	strb	r3, [r7, #15]
 800461c:	7bfb      	ldrb	r3, [r7, #15]
 800461e:	2b03      	cmp	r3, #3
 8004620:	d9ee      	bls.n	8004600 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8004622:	7abb      	ldrb	r3, [r7, #10]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d167      	bne.n	80046f8 <USER_SPI_initialize+0x180>
 8004628:	7afb      	ldrb	r3, [r7, #11]
 800462a:	2baa      	cmp	r3, #170	; 0xaa
 800462c:	d164      	bne.n	80046f8 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800462e:	bf00      	nop
 8004630:	f7ff fe2a 	bl	8004288 <SPI_Timer_Status>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d007      	beq.n	800464a <USER_SPI_initialize+0xd2>
 800463a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800463e:	20a9      	movs	r0, #169	; 0xa9
 8004640:	f7ff ff2b 	bl	800449a <send_cmd>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f2      	bne.n	8004630 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800464a:	f7ff fe1d 	bl	8004288 <SPI_Timer_Status>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d051      	beq.n	80046f8 <USER_SPI_initialize+0x180>
 8004654:	2100      	movs	r1, #0
 8004656:	203a      	movs	r0, #58	; 0x3a
 8004658:	f7ff ff1f 	bl	800449a <send_cmd>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d14a      	bne.n	80046f8 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8004662:	2300      	movs	r3, #0
 8004664:	73fb      	strb	r3, [r7, #15]
 8004666:	e00d      	b.n	8004684 <USER_SPI_initialize+0x10c>
 8004668:	7bfc      	ldrb	r4, [r7, #15]
 800466a:	20ff      	movs	r0, #255	; 0xff
 800466c:	f7ff fe22 	bl	80042b4 <xchg_spi>
 8004670:	4603      	mov	r3, r0
 8004672:	461a      	mov	r2, r3
 8004674:	f107 0310 	add.w	r3, r7, #16
 8004678:	4423      	add	r3, r4
 800467a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800467e:	7bfb      	ldrb	r3, [r7, #15]
 8004680:	3301      	adds	r3, #1
 8004682:	73fb      	strb	r3, [r7, #15]
 8004684:	7bfb      	ldrb	r3, [r7, #15]
 8004686:	2b03      	cmp	r3, #3
 8004688:	d9ee      	bls.n	8004668 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800468a:	7a3b      	ldrb	r3, [r7, #8]
 800468c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <USER_SPI_initialize+0x120>
 8004694:	230c      	movs	r3, #12
 8004696:	e000      	b.n	800469a <USER_SPI_initialize+0x122>
 8004698:	2304      	movs	r3, #4
 800469a:	737b      	strb	r3, [r7, #13]
 800469c:	e02c      	b.n	80046f8 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800469e:	2100      	movs	r1, #0
 80046a0:	20a9      	movs	r0, #169	; 0xa9
 80046a2:	f7ff fefa 	bl	800449a <send_cmd>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d804      	bhi.n	80046b6 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80046ac:	2302      	movs	r3, #2
 80046ae:	737b      	strb	r3, [r7, #13]
 80046b0:	23a9      	movs	r3, #169	; 0xa9
 80046b2:	73bb      	strb	r3, [r7, #14]
 80046b4:	e003      	b.n	80046be <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80046b6:	2301      	movs	r3, #1
 80046b8:	737b      	strb	r3, [r7, #13]
 80046ba:	2301      	movs	r3, #1
 80046bc:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80046be:	bf00      	nop
 80046c0:	f7ff fde2 	bl	8004288 <SPI_Timer_Status>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d007      	beq.n	80046da <USER_SPI_initialize+0x162>
 80046ca:	7bbb      	ldrb	r3, [r7, #14]
 80046cc:	2100      	movs	r1, #0
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff fee3 	bl	800449a <send_cmd>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1f2      	bne.n	80046c0 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80046da:	f7ff fdd5 	bl	8004288 <SPI_Timer_Status>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d007      	beq.n	80046f4 <USER_SPI_initialize+0x17c>
 80046e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046e8:	2010      	movs	r0, #16
 80046ea:	f7ff fed6 	bl	800449a <send_cmd>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <USER_SPI_initialize+0x180>
				ty = 0;
 80046f4:	2300      	movs	r3, #0
 80046f6:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80046f8:	4a14      	ldr	r2, [pc, #80]	; (800474c <USER_SPI_initialize+0x1d4>)
 80046fa:	7b7b      	ldrb	r3, [r7, #13]
 80046fc:	7013      	strb	r3, [r2, #0]
	despiselect();
 80046fe:	f7ff fe49 	bl	8004394 <despiselect>

	if (ty) {			/* OK */
 8004702:	7b7b      	ldrb	r3, [r7, #13]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d012      	beq.n	800472e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8004708:	4b0f      	ldr	r3, [pc, #60]	; (8004748 <USER_SPI_initialize+0x1d0>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004712:	4b0d      	ldr	r3, [pc, #52]	; (8004748 <USER_SPI_initialize+0x1d0>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0210 	orr.w	r2, r2, #16
 800471a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800471c:	4b09      	ldr	r3, [pc, #36]	; (8004744 <USER_SPI_initialize+0x1cc>)
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	b2db      	uxtb	r3, r3
 8004722:	f023 0301 	bic.w	r3, r3, #1
 8004726:	b2da      	uxtb	r2, r3
 8004728:	4b06      	ldr	r3, [pc, #24]	; (8004744 <USER_SPI_initialize+0x1cc>)
 800472a:	701a      	strb	r2, [r3, #0]
 800472c:	e002      	b.n	8004734 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800472e:	4b05      	ldr	r3, [pc, #20]	; (8004744 <USER_SPI_initialize+0x1cc>)
 8004730:	2201      	movs	r2, #1
 8004732:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8004734:	4b03      	ldr	r3, [pc, #12]	; (8004744 <USER_SPI_initialize+0x1cc>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	b2db      	uxtb	r3, r3
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	bd90      	pop	{r4, r7, pc}
 8004742:	bf00      	nop
 8004744:	20000020 	.word	0x20000020
 8004748:	200001f0 	.word	0x200001f0
 800474c:	200001a8 	.word	0x200001a8

08004750 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	4603      	mov	r3, r0
 8004758:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800475a:	79fb      	ldrb	r3, [r7, #7]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <USER_SPI_status+0x14>
 8004760:	2301      	movs	r3, #1
 8004762:	e002      	b.n	800476a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8004764:	4b04      	ldr	r3, [pc, #16]	; (8004778 <USER_SPI_status+0x28>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	b2db      	uxtb	r3, r3
}
 800476a:	4618      	mov	r0, r3
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	20000020 	.word	0x20000020

0800477c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	607a      	str	r2, [r7, #4]
 8004786:	603b      	str	r3, [r7, #0]
 8004788:	4603      	mov	r3, r0
 800478a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d102      	bne.n	8004798 <USER_SPI_read+0x1c>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <USER_SPI_read+0x20>
 8004798:	2304      	movs	r3, #4
 800479a:	e04d      	b.n	8004838 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800479c:	4b28      	ldr	r3, [pc, #160]	; (8004840 <USER_SPI_read+0xc4>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <USER_SPI_read+0x32>
 80047aa:	2303      	movs	r3, #3
 80047ac:	e044      	b.n	8004838 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80047ae:	4b25      	ldr	r3, [pc, #148]	; (8004844 <USER_SPI_read+0xc8>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d102      	bne.n	80047c0 <USER_SPI_read+0x44>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	025b      	lsls	r3, r3, #9
 80047be:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d111      	bne.n	80047ea <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	2011      	movs	r0, #17
 80047ca:	f7ff fe66 	bl	800449a <send_cmd>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d129      	bne.n	8004828 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80047d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047d8:	68b8      	ldr	r0, [r7, #8]
 80047da:	f7ff fe03 	bl	80043e4 <rcvr_datablock>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d021      	beq.n	8004828 <USER_SPI_read+0xac>
			count = 0;
 80047e4:	2300      	movs	r3, #0
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	e01e      	b.n	8004828 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	2012      	movs	r0, #18
 80047ee:	f7ff fe54 	bl	800449a <send_cmd>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d117      	bne.n	8004828 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80047f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047fc:	68b8      	ldr	r0, [r7, #8]
 80047fe:	f7ff fdf1 	bl	80043e4 <rcvr_datablock>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00a      	beq.n	800481e <USER_SPI_read+0xa2>
				buff += 512;
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800480e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	3b01      	subs	r3, #1
 8004814:	603b      	str	r3, [r7, #0]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1ed      	bne.n	80047f8 <USER_SPI_read+0x7c>
 800481c:	e000      	b.n	8004820 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800481e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8004820:	2100      	movs	r1, #0
 8004822:	200c      	movs	r0, #12
 8004824:	f7ff fe39 	bl	800449a <send_cmd>
		}
	}
	despiselect();
 8004828:	f7ff fdb4 	bl	8004394 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	bf14      	ite	ne
 8004832:	2301      	movne	r3, #1
 8004834:	2300      	moveq	r3, #0
 8004836:	b2db      	uxtb	r3, r3
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	20000020 	.word	0x20000020
 8004844:	200001a8 	.word	0x200001a8

08004848 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	60b9      	str	r1, [r7, #8]
 8004850:	607a      	str	r2, [r7, #4]
 8004852:	603b      	str	r3, [r7, #0]
 8004854:	4603      	mov	r3, r0
 8004856:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004858:	7bfb      	ldrb	r3, [r7, #15]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d102      	bne.n	8004864 <USER_SPI_write+0x1c>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <USER_SPI_write+0x20>
 8004864:	2304      	movs	r3, #4
 8004866:	e063      	b.n	8004930 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8004868:	4b33      	ldr	r3, [pc, #204]	; (8004938 <USER_SPI_write+0xf0>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <USER_SPI_write+0x32>
 8004876:	2303      	movs	r3, #3
 8004878:	e05a      	b.n	8004930 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800487a:	4b2f      	ldr	r3, [pc, #188]	; (8004938 <USER_SPI_write+0xf0>)
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	b2db      	uxtb	r3, r3
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <USER_SPI_write+0x44>
 8004888:	2302      	movs	r3, #2
 800488a:	e051      	b.n	8004930 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800488c:	4b2b      	ldr	r3, [pc, #172]	; (800493c <USER_SPI_write+0xf4>)
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b00      	cmp	r3, #0
 8004896:	d102      	bne.n	800489e <USER_SPI_write+0x56>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	025b      	lsls	r3, r3, #9
 800489c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d110      	bne.n	80048c6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	2018      	movs	r0, #24
 80048a8:	f7ff fdf7 	bl	800449a <send_cmd>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d136      	bne.n	8004920 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80048b2:	21fe      	movs	r1, #254	; 0xfe
 80048b4:	68b8      	ldr	r0, [r7, #8]
 80048b6:	f7ff fdbe 	bl	8004436 <xmit_datablock>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d02f      	beq.n	8004920 <USER_SPI_write+0xd8>
			count = 0;
 80048c0:	2300      	movs	r3, #0
 80048c2:	603b      	str	r3, [r7, #0]
 80048c4:	e02c      	b.n	8004920 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80048c6:	4b1d      	ldr	r3, [pc, #116]	; (800493c <USER_SPI_write+0xf4>)
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	f003 0306 	and.w	r3, r3, #6
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <USER_SPI_write+0x92>
 80048d2:	6839      	ldr	r1, [r7, #0]
 80048d4:	2097      	movs	r0, #151	; 0x97
 80048d6:	f7ff fde0 	bl	800449a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80048da:	6879      	ldr	r1, [r7, #4]
 80048dc:	2019      	movs	r0, #25
 80048de:	f7ff fddc 	bl	800449a <send_cmd>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d11b      	bne.n	8004920 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80048e8:	21fc      	movs	r1, #252	; 0xfc
 80048ea:	68b8      	ldr	r0, [r7, #8]
 80048ec:	f7ff fda3 	bl	8004436 <xmit_datablock>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <USER_SPI_write+0xc4>
				buff += 512;
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80048fc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	3b01      	subs	r3, #1
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1ee      	bne.n	80048e8 <USER_SPI_write+0xa0>
 800490a:	e000      	b.n	800490e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800490c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800490e:	21fd      	movs	r1, #253	; 0xfd
 8004910:	2000      	movs	r0, #0
 8004912:	f7ff fd90 	bl	8004436 <xmit_datablock>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <USER_SPI_write+0xd8>
 800491c:	2301      	movs	r3, #1
 800491e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8004920:	f7ff fd38 	bl	8004394 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	bf14      	ite	ne
 800492a:	2301      	movne	r3, #1
 800492c:	2300      	moveq	r3, #0
 800492e:	b2db      	uxtb	r3, r3
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	20000020 	.word	0x20000020
 800493c:	200001a8 	.word	0x200001a8

08004940 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b08c      	sub	sp, #48	; 0x30
 8004944:	af00      	add	r7, sp, #0
 8004946:	4603      	mov	r3, r0
 8004948:	603a      	str	r2, [r7, #0]
 800494a:	71fb      	strb	r3, [r7, #7]
 800494c:	460b      	mov	r3, r1
 800494e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8004950:	79fb      	ldrb	r3, [r7, #7]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <USER_SPI_ioctl+0x1a>
 8004956:	2304      	movs	r3, #4
 8004958:	e15a      	b.n	8004c10 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800495a:	4baf      	ldr	r3, [pc, #700]	; (8004c18 <USER_SPI_ioctl+0x2d8>)
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	b2db      	uxtb	r3, r3
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <USER_SPI_ioctl+0x2c>
 8004968:	2303      	movs	r3, #3
 800496a:	e151      	b.n	8004c10 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8004972:	79bb      	ldrb	r3, [r7, #6]
 8004974:	2b04      	cmp	r3, #4
 8004976:	f200 8136 	bhi.w	8004be6 <USER_SPI_ioctl+0x2a6>
 800497a:	a201      	add	r2, pc, #4	; (adr r2, 8004980 <USER_SPI_ioctl+0x40>)
 800497c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004980:	08004995 	.word	0x08004995
 8004984:	080049a9 	.word	0x080049a9
 8004988:	08004be7 	.word	0x08004be7
 800498c:	08004a55 	.word	0x08004a55
 8004990:	08004b4b 	.word	0x08004b4b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8004994:	f7ff fd0c 	bl	80043b0 <spiselect>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 8127 	beq.w	8004bee <USER_SPI_ioctl+0x2ae>
 80049a0:	2300      	movs	r3, #0
 80049a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80049a6:	e122      	b.n	8004bee <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80049a8:	2100      	movs	r1, #0
 80049aa:	2009      	movs	r0, #9
 80049ac:	f7ff fd75 	bl	800449a <send_cmd>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f040 811d 	bne.w	8004bf2 <USER_SPI_ioctl+0x2b2>
 80049b8:	f107 030c 	add.w	r3, r7, #12
 80049bc:	2110      	movs	r1, #16
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff fd10 	bl	80043e4 <rcvr_datablock>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f000 8113 	beq.w	8004bf2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80049cc:	7b3b      	ldrb	r3, [r7, #12]
 80049ce:	099b      	lsrs	r3, r3, #6
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d111      	bne.n	80049fa <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80049d6:	7d7b      	ldrb	r3, [r7, #21]
 80049d8:	461a      	mov	r2, r3
 80049da:	7d3b      	ldrb	r3, [r7, #20]
 80049dc:	021b      	lsls	r3, r3, #8
 80049de:	4413      	add	r3, r2
 80049e0:	461a      	mov	r2, r3
 80049e2:	7cfb      	ldrb	r3, [r7, #19]
 80049e4:	041b      	lsls	r3, r3, #16
 80049e6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80049ea:	4413      	add	r3, r2
 80049ec:	3301      	adds	r3, #1
 80049ee:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	029a      	lsls	r2, r3, #10
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	e028      	b.n	8004a4c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80049fa:	7c7b      	ldrb	r3, [r7, #17]
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	7dbb      	ldrb	r3, [r7, #22]
 8004a04:	09db      	lsrs	r3, r3, #7
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	4413      	add	r3, r2
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	7d7b      	ldrb	r3, [r7, #21]
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	f003 0306 	and.w	r3, r3, #6
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	4413      	add	r3, r2
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	3302      	adds	r3, #2
 8004a1e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8004a22:	7d3b      	ldrb	r3, [r7, #20]
 8004a24:	099b      	lsrs	r3, r3, #6
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	461a      	mov	r2, r3
 8004a2a:	7cfb      	ldrb	r3, [r7, #19]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	441a      	add	r2, r3
 8004a30:	7cbb      	ldrb	r3, [r7, #18]
 8004a32:	029b      	lsls	r3, r3, #10
 8004a34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a38:	4413      	add	r3, r2
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8004a3e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a42:	3b09      	subs	r3, #9
 8004a44:	69fa      	ldr	r2, [r7, #28]
 8004a46:	409a      	lsls	r2, r3
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004a52:	e0ce      	b.n	8004bf2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8004a54:	4b71      	ldr	r3, [pc, #452]	; (8004c1c <USER_SPI_ioctl+0x2dc>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d031      	beq.n	8004ac4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004a60:	2100      	movs	r1, #0
 8004a62:	208d      	movs	r0, #141	; 0x8d
 8004a64:	f7ff fd19 	bl	800449a <send_cmd>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f040 80c3 	bne.w	8004bf6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8004a70:	20ff      	movs	r0, #255	; 0xff
 8004a72:	f7ff fc1f 	bl	80042b4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8004a76:	f107 030c 	add.w	r3, r7, #12
 8004a7a:	2110      	movs	r1, #16
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7ff fcb1 	bl	80043e4 <rcvr_datablock>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 80b6 	beq.w	8004bf6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8004a8a:	2330      	movs	r3, #48	; 0x30
 8004a8c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004a90:	e007      	b.n	8004aa2 <USER_SPI_ioctl+0x162>
 8004a92:	20ff      	movs	r0, #255	; 0xff
 8004a94:	f7ff fc0e 	bl	80042b4 <xchg_spi>
 8004a98:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004aa2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1f3      	bne.n	8004a92 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8004aaa:	7dbb      	ldrb	r3, [r7, #22]
 8004aac:	091b      	lsrs	r3, r3, #4
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	2310      	movs	r3, #16
 8004ab4:	fa03 f202 	lsl.w	r2, r3, r2
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8004abc:	2300      	movs	r3, #0
 8004abe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8004ac2:	e098      	b.n	8004bf6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	2009      	movs	r0, #9
 8004ac8:	f7ff fce7 	bl	800449a <send_cmd>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f040 8091 	bne.w	8004bf6 <USER_SPI_ioctl+0x2b6>
 8004ad4:	f107 030c 	add.w	r3, r7, #12
 8004ad8:	2110      	movs	r1, #16
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff fc82 	bl	80043e4 <rcvr_datablock>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 8087 	beq.w	8004bf6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8004ae8:	4b4c      	ldr	r3, [pc, #304]	; (8004c1c <USER_SPI_ioctl+0x2dc>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d012      	beq.n	8004b1a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8004af4:	7dbb      	ldrb	r3, [r7, #22]
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004afc:	7dfa      	ldrb	r2, [r7, #23]
 8004afe:	09d2      	lsrs	r2, r2, #7
 8004b00:	b2d2      	uxtb	r2, r2
 8004b02:	4413      	add	r3, r2
 8004b04:	1c5a      	adds	r2, r3, #1
 8004b06:	7e7b      	ldrb	r3, [r7, #25]
 8004b08:	099b      	lsrs	r3, r3, #6
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b12:	461a      	mov	r2, r3
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	e013      	b.n	8004b42 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8004b1a:	7dbb      	ldrb	r3, [r7, #22]
 8004b1c:	109b      	asrs	r3, r3, #2
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	f003 031f 	and.w	r3, r3, #31
 8004b24:	3301      	adds	r3, #1
 8004b26:	7dfa      	ldrb	r2, [r7, #23]
 8004b28:	00d2      	lsls	r2, r2, #3
 8004b2a:	f002 0218 	and.w	r2, r2, #24
 8004b2e:	7df9      	ldrb	r1, [r7, #23]
 8004b30:	0949      	lsrs	r1, r1, #5
 8004b32:	b2c9      	uxtb	r1, r1
 8004b34:	440a      	add	r2, r1
 8004b36:	3201      	adds	r2, #1
 8004b38:	fb02 f303 	mul.w	r3, r2, r3
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8004b42:	2300      	movs	r3, #0
 8004b44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004b48:	e055      	b.n	8004bf6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004b4a:	4b34      	ldr	r3, [pc, #208]	; (8004c1c <USER_SPI_ioctl+0x2dc>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	f003 0306 	and.w	r3, r3, #6
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d051      	beq.n	8004bfa <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004b56:	f107 020c 	add.w	r2, r7, #12
 8004b5a:	79fb      	ldrb	r3, [r7, #7]
 8004b5c:	210b      	movs	r1, #11
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7ff feee 	bl	8004940 <USER_SPI_ioctl>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d149      	bne.n	8004bfe <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004b6a:	7b3b      	ldrb	r3, [r7, #12]
 8004b6c:	099b      	lsrs	r3, r3, #6
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d104      	bne.n	8004b7e <USER_SPI_ioctl+0x23e>
 8004b74:	7dbb      	ldrb	r3, [r7, #22]
 8004b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d041      	beq.n	8004c02 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	623b      	str	r3, [r7, #32]
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8004b8e:	4b23      	ldr	r3, [pc, #140]	; (8004c1c <USER_SPI_ioctl+0x2dc>)
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	f003 0308 	and.w	r3, r3, #8
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d105      	bne.n	8004ba6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8004b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9c:	025b      	lsls	r3, r3, #9
 8004b9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	025b      	lsls	r3, r3, #9
 8004ba4:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004ba6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ba8:	2020      	movs	r0, #32
 8004baa:	f7ff fc76 	bl	800449a <send_cmd>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d128      	bne.n	8004c06 <USER_SPI_ioctl+0x2c6>
 8004bb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bb6:	2021      	movs	r0, #33	; 0x21
 8004bb8:	f7ff fc6f 	bl	800449a <send_cmd>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d121      	bne.n	8004c06 <USER_SPI_ioctl+0x2c6>
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	2026      	movs	r0, #38	; 0x26
 8004bc6:	f7ff fc68 	bl	800449a <send_cmd>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d11a      	bne.n	8004c06 <USER_SPI_ioctl+0x2c6>
 8004bd0:	f247 5030 	movw	r0, #30000	; 0x7530
 8004bd4:	f7ff fbbb 	bl	800434e <wait_ready>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d013      	beq.n	8004c06 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8004bde:	2300      	movs	r3, #0
 8004be0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004be4:	e00f      	b.n	8004c06 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8004be6:	2304      	movs	r3, #4
 8004be8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004bec:	e00c      	b.n	8004c08 <USER_SPI_ioctl+0x2c8>
		break;
 8004bee:	bf00      	nop
 8004bf0:	e00a      	b.n	8004c08 <USER_SPI_ioctl+0x2c8>
		break;
 8004bf2:	bf00      	nop
 8004bf4:	e008      	b.n	8004c08 <USER_SPI_ioctl+0x2c8>
		break;
 8004bf6:	bf00      	nop
 8004bf8:	e006      	b.n	8004c08 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004bfa:	bf00      	nop
 8004bfc:	e004      	b.n	8004c08 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004bfe:	bf00      	nop
 8004c00:	e002      	b.n	8004c08 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004c02:	bf00      	nop
 8004c04:	e000      	b.n	8004c08 <USER_SPI_ioctl+0x2c8>
		break;
 8004c06:	bf00      	nop
	}

	despiselect();
 8004c08:	f7ff fbc4 	bl	8004394 <despiselect>

	return res;
 8004c0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3730      	adds	r7, #48	; 0x30
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	20000020 	.word	0x20000020
 8004c1c:	200001a8 	.word	0x200001a8

08004c20 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	4603      	mov	r3, r0
 8004c28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	4a08      	ldr	r2, [pc, #32]	; (8004c50 <disk_status+0x30>)
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	79fa      	ldrb	r2, [r7, #7]
 8004c38:	4905      	ldr	r1, [pc, #20]	; (8004c50 <disk_status+0x30>)
 8004c3a:	440a      	add	r2, r1
 8004c3c:	7a12      	ldrb	r2, [r2, #8]
 8004c3e:	4610      	mov	r0, r2
 8004c40:	4798      	blx	r3
 8004c42:	4603      	mov	r3, r0
 8004c44:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	200001d4 	.word	0x200001d4

08004c54 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004c62:	79fb      	ldrb	r3, [r7, #7]
 8004c64:	4a0d      	ldr	r2, [pc, #52]	; (8004c9c <disk_initialize+0x48>)
 8004c66:	5cd3      	ldrb	r3, [r2, r3]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d111      	bne.n	8004c90 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004c6c:	79fb      	ldrb	r3, [r7, #7]
 8004c6e:	4a0b      	ldr	r2, [pc, #44]	; (8004c9c <disk_initialize+0x48>)
 8004c70:	2101      	movs	r1, #1
 8004c72:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004c74:	79fb      	ldrb	r3, [r7, #7]
 8004c76:	4a09      	ldr	r2, [pc, #36]	; (8004c9c <disk_initialize+0x48>)
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	79fa      	ldrb	r2, [r7, #7]
 8004c82:	4906      	ldr	r1, [pc, #24]	; (8004c9c <disk_initialize+0x48>)
 8004c84:	440a      	add	r2, r1
 8004c86:	7a12      	ldrb	r2, [r2, #8]
 8004c88:	4610      	mov	r0, r2
 8004c8a:	4798      	blx	r3
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	200001d4 	.word	0x200001d4

08004ca0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004ca0:	b590      	push	{r4, r7, lr}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	607a      	str	r2, [r7, #4]
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	4603      	mov	r3, r0
 8004cae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
 8004cb2:	4a0a      	ldr	r2, [pc, #40]	; (8004cdc <disk_read+0x3c>)
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	689c      	ldr	r4, [r3, #8]
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
 8004cbe:	4a07      	ldr	r2, [pc, #28]	; (8004cdc <disk_read+0x3c>)
 8004cc0:	4413      	add	r3, r2
 8004cc2:	7a18      	ldrb	r0, [r3, #8]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	68b9      	ldr	r1, [r7, #8]
 8004cca:	47a0      	blx	r4
 8004ccc:	4603      	mov	r3, r0
 8004cce:	75fb      	strb	r3, [r7, #23]
  return res;
 8004cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	371c      	adds	r7, #28
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd90      	pop	{r4, r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	200001d4 	.word	0x200001d4

08004ce0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004ce0:	b590      	push	{r4, r7, lr}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	607a      	str	r2, [r7, #4]
 8004cea:	603b      	str	r3, [r7, #0]
 8004cec:	4603      	mov	r3, r0
 8004cee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
 8004cf2:	4a0a      	ldr	r2, [pc, #40]	; (8004d1c <disk_write+0x3c>)
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	68dc      	ldr	r4, [r3, #12]
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
 8004cfe:	4a07      	ldr	r2, [pc, #28]	; (8004d1c <disk_write+0x3c>)
 8004d00:	4413      	add	r3, r2
 8004d02:	7a18      	ldrb	r0, [r3, #8]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	68b9      	ldr	r1, [r7, #8]
 8004d0a:	47a0      	blx	r4
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	371c      	adds	r7, #28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd90      	pop	{r4, r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	200001d4 	.word	0x200001d4

08004d20 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	4603      	mov	r3, r0
 8004d28:	603a      	str	r2, [r7, #0]
 8004d2a:	71fb      	strb	r3, [r7, #7]
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004d30:	79fb      	ldrb	r3, [r7, #7]
 8004d32:	4a09      	ldr	r2, [pc, #36]	; (8004d58 <disk_ioctl+0x38>)
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	79fa      	ldrb	r2, [r7, #7]
 8004d3e:	4906      	ldr	r1, [pc, #24]	; (8004d58 <disk_ioctl+0x38>)
 8004d40:	440a      	add	r2, r1
 8004d42:	7a10      	ldrb	r0, [r2, #8]
 8004d44:	79b9      	ldrb	r1, [r7, #6]
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	4798      	blx	r3
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	73fb      	strb	r3, [r7, #15]
  return res;
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	200001d4 	.word	0x200001d4

08004d5c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	3301      	adds	r3, #1
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004d6c:	89fb      	ldrh	r3, [r7, #14]
 8004d6e:	021b      	lsls	r3, r3, #8
 8004d70:	b21a      	sxth	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	b21b      	sxth	r3, r3
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	b21b      	sxth	r3, r3
 8004d7c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004d7e:	89fb      	ldrh	r3, [r7, #14]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3303      	adds	r3, #3
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	021b      	lsls	r3, r3, #8
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	3202      	adds	r2, #2
 8004da4:	7812      	ldrb	r2, [r2, #0]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	021b      	lsls	r3, r3, #8
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	3201      	adds	r2, #1
 8004db2:	7812      	ldrb	r2, [r2, #0]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	021b      	lsls	r3, r3, #8
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	7812      	ldrb	r2, [r2, #0]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]
	return rv;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	460b      	mov	r3, r1
 8004ddc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	887a      	ldrh	r2, [r7, #2]
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	701a      	strb	r2, [r3, #0]
 8004dea:	887b      	ldrh	r3, [r7, #2]
 8004dec:	0a1b      	lsrs	r3, r3, #8
 8004dee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	607a      	str	r2, [r7, #4]
 8004df6:	887a      	ldrh	r2, [r7, #2]
 8004df8:	b2d2      	uxtb	r2, r2
 8004dfa:	701a      	strb	r2, [r3, #0]
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	607a      	str	r2, [r7, #4]
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	0a1b      	lsrs	r3, r3, #8
 8004e22:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	607a      	str	r2, [r7, #4]
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	b2d2      	uxtb	r2, r2
 8004e2e:	701a      	strb	r2, [r3, #0]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	0a1b      	lsrs	r3, r3, #8
 8004e34:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	1c5a      	adds	r2, r3, #1
 8004e3a:	607a      	str	r2, [r7, #4]
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	701a      	strb	r2, [r3, #0]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	0a1b      	lsrs	r3, r3, #8
 8004e46:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	607a      	str	r2, [r7, #4]
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	b2d2      	uxtb	r2, r2
 8004e52:	701a      	strb	r2, [r3, #0]
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00d      	beq.n	8004e96 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	1c53      	adds	r3, r2, #1
 8004e7e:	613b      	str	r3, [r7, #16]
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	1c59      	adds	r1, r3, #1
 8004e84:	6179      	str	r1, [r7, #20]
 8004e86:	7812      	ldrb	r2, [r2, #0]
 8004e88:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	607b      	str	r3, [r7, #4]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1f1      	bne.n	8004e7a <mem_cpy+0x1a>
	}
}
 8004e96:	bf00      	nop
 8004e98:	371c      	adds	r7, #28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004ea2:	b480      	push	{r7}
 8004ea4:	b087      	sub	sp, #28
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	60f8      	str	r0, [r7, #12]
 8004eaa:	60b9      	str	r1, [r7, #8]
 8004eac:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	617a      	str	r2, [r7, #20]
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	b2d2      	uxtb	r2, r2
 8004ebc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	607b      	str	r3, [r7, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1f3      	bne.n	8004eb2 <mem_set+0x10>
}
 8004eca:	bf00      	nop
 8004ecc:	bf00      	nop
 8004ece:	371c      	adds	r7, #28
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004ed8:	b480      	push	{r7}
 8004eda:	b089      	sub	sp, #36	; 0x24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	61fb      	str	r3, [r7, #28]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	61fa      	str	r2, [r7, #28]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	4619      	mov	r1, r3
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	61ba      	str	r2, [r7, #24]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	1acb      	subs	r3, r1, r3
 8004f04:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	607b      	str	r3, [r7, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <mem_cmp+0x40>
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0eb      	beq.n	8004ef0 <mem_cmp+0x18>

	return r;
 8004f18:	697b      	ldr	r3, [r7, #20]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3724      	adds	r7, #36	; 0x24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004f30:	e002      	b.n	8004f38 <chk_chr+0x12>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3301      	adds	r3, #1
 8004f36:	607b      	str	r3, [r7, #4]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d005      	beq.n	8004f4c <chk_chr+0x26>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	461a      	mov	r2, r3
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d1f2      	bne.n	8004f32 <chk_chr+0xc>
	return *str;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004f66:	2300      	movs	r3, #0
 8004f68:	60bb      	str	r3, [r7, #8]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	60fb      	str	r3, [r7, #12]
 8004f6e:	e029      	b.n	8004fc4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004f70:	4a27      	ldr	r2, [pc, #156]	; (8005010 <chk_lock+0xb4>)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	4413      	add	r3, r2
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d01d      	beq.n	8004fba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004f7e:	4a24      	ldr	r2, [pc, #144]	; (8005010 <chk_lock+0xb4>)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	011b      	lsls	r3, r3, #4
 8004f84:	4413      	add	r3, r2
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d116      	bne.n	8004fbe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004f90:	4a1f      	ldr	r2, [pc, #124]	; (8005010 <chk_lock+0xb4>)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	4413      	add	r3, r2
 8004f98:	3304      	adds	r3, #4
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d10c      	bne.n	8004fbe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004fa4:	4a1a      	ldr	r2, [pc, #104]	; (8005010 <chk_lock+0xb4>)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	4413      	add	r3, r2
 8004fac:	3308      	adds	r3, #8
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d102      	bne.n	8004fbe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004fb8:	e007      	b.n	8004fca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d9d2      	bls.n	8004f70 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d109      	bne.n	8004fe4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d102      	bne.n	8004fdc <chk_lock+0x80>
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d101      	bne.n	8004fe0 <chk_lock+0x84>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	e010      	b.n	8005002 <chk_lock+0xa6>
 8004fe0:	2312      	movs	r3, #18
 8004fe2:	e00e      	b.n	8005002 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d108      	bne.n	8004ffc <chk_lock+0xa0>
 8004fea:	4a09      	ldr	r2, [pc, #36]	; (8005010 <chk_lock+0xb4>)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	011b      	lsls	r3, r3, #4
 8004ff0:	4413      	add	r3, r2
 8004ff2:	330c      	adds	r3, #12
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ffa:	d101      	bne.n	8005000 <chk_lock+0xa4>
 8004ffc:	2310      	movs	r3, #16
 8004ffe:	e000      	b.n	8005002 <chk_lock+0xa6>
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	200001b4 	.word	0x200001b4

08005014 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800501a:	2300      	movs	r3, #0
 800501c:	607b      	str	r3, [r7, #4]
 800501e:	e002      	b.n	8005026 <enq_lock+0x12>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	3301      	adds	r3, #1
 8005024:	607b      	str	r3, [r7, #4]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d806      	bhi.n	800503a <enq_lock+0x26>
 800502c:	4a09      	ldr	r2, [pc, #36]	; (8005054 <enq_lock+0x40>)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	4413      	add	r3, r2
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f2      	bne.n	8005020 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b02      	cmp	r3, #2
 800503e:	bf14      	ite	ne
 8005040:	2301      	movne	r3, #1
 8005042:	2300      	moveq	r3, #0
 8005044:	b2db      	uxtb	r3, r3
}
 8005046:	4618      	mov	r0, r3
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	200001b4 	.word	0x200001b4

08005058 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005062:	2300      	movs	r3, #0
 8005064:	60fb      	str	r3, [r7, #12]
 8005066:	e01f      	b.n	80050a8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005068:	4a41      	ldr	r2, [pc, #260]	; (8005170 <inc_lock+0x118>)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	4413      	add	r3, r2
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d113      	bne.n	80050a2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800507a:	4a3d      	ldr	r2, [pc, #244]	; (8005170 <inc_lock+0x118>)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	4413      	add	r3, r2
 8005082:	3304      	adds	r3, #4
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800508a:	429a      	cmp	r2, r3
 800508c:	d109      	bne.n	80050a2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800508e:	4a38      	ldr	r2, [pc, #224]	; (8005170 <inc_lock+0x118>)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	011b      	lsls	r3, r3, #4
 8005094:	4413      	add	r3, r2
 8005096:	3308      	adds	r3, #8
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800509e:	429a      	cmp	r2, r3
 80050a0:	d006      	beq.n	80050b0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	3301      	adds	r3, #1
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d9dc      	bls.n	8005068 <inc_lock+0x10>
 80050ae:	e000      	b.n	80050b2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80050b0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d132      	bne.n	800511e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80050b8:	2300      	movs	r3, #0
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	e002      	b.n	80050c4 <inc_lock+0x6c>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	3301      	adds	r3, #1
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d806      	bhi.n	80050d8 <inc_lock+0x80>
 80050ca:	4a29      	ldr	r2, [pc, #164]	; (8005170 <inc_lock+0x118>)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	4413      	add	r3, r2
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1f2      	bne.n	80050be <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d101      	bne.n	80050e2 <inc_lock+0x8a>
 80050de:	2300      	movs	r3, #0
 80050e0:	e040      	b.n	8005164 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	4922      	ldr	r1, [pc, #136]	; (8005170 <inc_lock+0x118>)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	440b      	add	r3, r1
 80050ee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	491e      	ldr	r1, [pc, #120]	; (8005170 <inc_lock+0x118>)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	440b      	add	r3, r1
 80050fc:	3304      	adds	r3, #4
 80050fe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	695a      	ldr	r2, [r3, #20]
 8005104:	491a      	ldr	r1, [pc, #104]	; (8005170 <inc_lock+0x118>)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	011b      	lsls	r3, r3, #4
 800510a:	440b      	add	r3, r1
 800510c:	3308      	adds	r3, #8
 800510e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005110:	4a17      	ldr	r2, [pc, #92]	; (8005170 <inc_lock+0x118>)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	011b      	lsls	r3, r3, #4
 8005116:	4413      	add	r3, r2
 8005118:	330c      	adds	r3, #12
 800511a:	2200      	movs	r2, #0
 800511c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d009      	beq.n	8005138 <inc_lock+0xe0>
 8005124:	4a12      	ldr	r2, [pc, #72]	; (8005170 <inc_lock+0x118>)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	011b      	lsls	r3, r3, #4
 800512a:	4413      	add	r3, r2
 800512c:	330c      	adds	r3, #12
 800512e:	881b      	ldrh	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <inc_lock+0xe0>
 8005134:	2300      	movs	r3, #0
 8005136:	e015      	b.n	8005164 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d108      	bne.n	8005150 <inc_lock+0xf8>
 800513e:	4a0c      	ldr	r2, [pc, #48]	; (8005170 <inc_lock+0x118>)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	011b      	lsls	r3, r3, #4
 8005144:	4413      	add	r3, r2
 8005146:	330c      	adds	r3, #12
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	3301      	adds	r3, #1
 800514c:	b29a      	uxth	r2, r3
 800514e:	e001      	b.n	8005154 <inc_lock+0xfc>
 8005150:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005154:	4906      	ldr	r1, [pc, #24]	; (8005170 <inc_lock+0x118>)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	440b      	add	r3, r1
 800515c:	330c      	adds	r3, #12
 800515e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	3301      	adds	r3, #1
}
 8005164:	4618      	mov	r0, r3
 8005166:	3714      	adds	r7, #20
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	200001b4 	.word	0x200001b4

08005174 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800517c:	2300      	movs	r3, #0
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	e010      	b.n	80051a4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005182:	4a0d      	ldr	r2, [pc, #52]	; (80051b8 <clear_lock+0x44>)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	4413      	add	r3, r2
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	429a      	cmp	r2, r3
 8005190:	d105      	bne.n	800519e <clear_lock+0x2a>
 8005192:	4a09      	ldr	r2, [pc, #36]	; (80051b8 <clear_lock+0x44>)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	4413      	add	r3, r2
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3301      	adds	r3, #1
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d9eb      	bls.n	8005182 <clear_lock+0xe>
	}
}
 80051aa:	bf00      	nop
 80051ac:	bf00      	nop
 80051ae:	3714      	adds	r7, #20
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	200001b4 	.word	0x200001b4

080051bc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80051c4:	2300      	movs	r3, #0
 80051c6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	78db      	ldrb	r3, [r3, #3]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d034      	beq.n	800523a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	7858      	ldrb	r0, [r3, #1]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80051e0:	2301      	movs	r3, #1
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	f7ff fd7c 	bl	8004ce0 <disk_write>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	73fb      	strb	r3, [r7, #15]
 80051f2:	e022      	b.n	800523a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	1ad2      	subs	r2, r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	429a      	cmp	r2, r3
 8005208:	d217      	bcs.n	800523a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	789b      	ldrb	r3, [r3, #2]
 800520e:	613b      	str	r3, [r7, #16]
 8005210:	e010      	b.n	8005234 <sync_window+0x78>
					wsect += fs->fsize;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4413      	add	r3, r2
 800521a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	7858      	ldrb	r0, [r3, #1]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005226:	2301      	movs	r3, #1
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	f7ff fd59 	bl	8004ce0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	3b01      	subs	r3, #1
 8005232:	613b      	str	r3, [r7, #16]
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d8eb      	bhi.n	8005212 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800523a:	7bfb      	ldrb	r3, [r7, #15]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800524e:	2300      	movs	r3, #0
 8005250:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d01b      	beq.n	8005294 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7ff ffad 	bl	80051bc <sync_window>
 8005262:	4603      	mov	r3, r0
 8005264:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d113      	bne.n	8005294 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	7858      	ldrb	r0, [r3, #1]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005276:	2301      	movs	r3, #1
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	f7ff fd11 	bl	8004ca0 <disk_read>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d004      	beq.n	800528e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005288:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800528a:	2301      	movs	r3, #1
 800528c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8005294:	7bfb      	ldrb	r3, [r7, #15]
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
	...

080052a0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7ff ff87 	bl	80051bc <sync_window>
 80052ae:	4603      	mov	r3, r0
 80052b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d158      	bne.n	800536a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d148      	bne.n	8005352 <sync_fs+0xb2>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	791b      	ldrb	r3, [r3, #4]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d144      	bne.n	8005352 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3330      	adds	r3, #48	; 0x30
 80052cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052d0:	2100      	movs	r1, #0
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7ff fde5 	bl	8004ea2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3330      	adds	r3, #48	; 0x30
 80052dc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80052e0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7ff fd74 	bl	8004dd2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	3330      	adds	r3, #48	; 0x30
 80052ee:	4921      	ldr	r1, [pc, #132]	; (8005374 <sync_fs+0xd4>)
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff fd89 	bl	8004e08 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	3330      	adds	r3, #48	; 0x30
 80052fa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80052fe:	491e      	ldr	r1, [pc, #120]	; (8005378 <sync_fs+0xd8>)
 8005300:	4618      	mov	r0, r3
 8005302:	f7ff fd81 	bl	8004e08 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	3330      	adds	r3, #48	; 0x30
 800530a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	4619      	mov	r1, r3
 8005314:	4610      	mov	r0, r2
 8005316:	f7ff fd77 	bl	8004e08 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	3330      	adds	r3, #48	; 0x30
 800531e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	4619      	mov	r1, r3
 8005328:	4610      	mov	r0, r2
 800532a:	f7ff fd6d 	bl	8004e08 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	7858      	ldrb	r0, [r3, #1]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005346:	2301      	movs	r3, #1
 8005348:	f7ff fcca 	bl	8004ce0 <disk_write>
			fs->fsi_flag = 0;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	785b      	ldrb	r3, [r3, #1]
 8005356:	2200      	movs	r2, #0
 8005358:	2100      	movs	r1, #0
 800535a:	4618      	mov	r0, r3
 800535c:	f7ff fce0 	bl	8004d20 <disk_ioctl>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <sync_fs+0xca>
 8005366:	2301      	movs	r3, #1
 8005368:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800536a:	7bfb      	ldrb	r3, [r7, #15]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	41615252 	.word	0x41615252
 8005378:	61417272 	.word	0x61417272

0800537c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	3b02      	subs	r3, #2
 800538a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	3b02      	subs	r3, #2
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	429a      	cmp	r2, r3
 8005396:	d301      	bcc.n	800539c <clust2sect+0x20>
 8005398:	2300      	movs	r3, #0
 800539a:	e008      	b.n	80053ae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	895b      	ldrh	r3, [r3, #10]
 80053a0:	461a      	mov	r2, r3
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	fb03 f202 	mul.w	r2, r3, r2
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ac:	4413      	add	r3, r2
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b086      	sub	sp, #24
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d904      	bls.n	80053da <get_fat+0x20>
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d302      	bcc.n	80053e0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80053da:	2301      	movs	r3, #1
 80053dc:	617b      	str	r3, [r7, #20]
 80053de:	e08f      	b.n	8005500 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80053e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053e4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b03      	cmp	r3, #3
 80053ec:	d062      	beq.n	80054b4 <get_fat+0xfa>
 80053ee:	2b03      	cmp	r3, #3
 80053f0:	dc7c      	bgt.n	80054ec <get_fat+0x132>
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d002      	beq.n	80053fc <get_fat+0x42>
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d042      	beq.n	8005480 <get_fat+0xc6>
 80053fa:	e077      	b.n	80054ec <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	085b      	lsrs	r3, r3, #1
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4413      	add	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	6a1a      	ldr	r2, [r3, #32]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	0a5b      	lsrs	r3, r3, #9
 8005412:	4413      	add	r3, r2
 8005414:	4619      	mov	r1, r3
 8005416:	6938      	ldr	r0, [r7, #16]
 8005418:	f7ff ff14 	bl	8005244 <move_window>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d167      	bne.n	80054f2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	1c5a      	adds	r2, r3, #1
 8005426:	60fa      	str	r2, [r7, #12]
 8005428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4413      	add	r3, r2
 8005430:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005434:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	6a1a      	ldr	r2, [r3, #32]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	0a5b      	lsrs	r3, r3, #9
 800543e:	4413      	add	r3, r2
 8005440:	4619      	mov	r1, r3
 8005442:	6938      	ldr	r0, [r7, #16]
 8005444:	f7ff fefe 	bl	8005244 <move_window>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d153      	bne.n	80054f6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	4413      	add	r3, r2
 8005458:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800545c:	021b      	lsls	r3, r3, #8
 800545e:	461a      	mov	r2, r3
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	4313      	orrs	r3, r2
 8005464:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b00      	cmp	r3, #0
 800546e:	d002      	beq.n	8005476 <get_fat+0xbc>
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	091b      	lsrs	r3, r3, #4
 8005474:	e002      	b.n	800547c <get_fat+0xc2>
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800547c:	617b      	str	r3, [r7, #20]
			break;
 800547e:	e03f      	b.n	8005500 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	6a1a      	ldr	r2, [r3, #32]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	0a1b      	lsrs	r3, r3, #8
 8005488:	4413      	add	r3, r2
 800548a:	4619      	mov	r1, r3
 800548c:	6938      	ldr	r0, [r7, #16]
 800548e:	f7ff fed9 	bl	8005244 <move_window>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d130      	bne.n	80054fa <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80054a6:	4413      	add	r3, r2
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7ff fc57 	bl	8004d5c <ld_word>
 80054ae:	4603      	mov	r3, r0
 80054b0:	617b      	str	r3, [r7, #20]
			break;
 80054b2:	e025      	b.n	8005500 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	6a1a      	ldr	r2, [r3, #32]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	09db      	lsrs	r3, r3, #7
 80054bc:	4413      	add	r3, r2
 80054be:	4619      	mov	r1, r3
 80054c0:	6938      	ldr	r0, [r7, #16]
 80054c2:	f7ff febf 	bl	8005244 <move_window>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d118      	bne.n	80054fe <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80054da:	4413      	add	r3, r2
 80054dc:	4618      	mov	r0, r3
 80054de:	f7ff fc55 	bl	8004d8c <ld_dword>
 80054e2:	4603      	mov	r3, r0
 80054e4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80054e8:	617b      	str	r3, [r7, #20]
			break;
 80054ea:	e009      	b.n	8005500 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80054ec:	2301      	movs	r3, #1
 80054ee:	617b      	str	r3, [r7, #20]
 80054f0:	e006      	b.n	8005500 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054f2:	bf00      	nop
 80054f4:	e004      	b.n	8005500 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054f6:	bf00      	nop
 80054f8:	e002      	b.n	8005500 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80054fa:	bf00      	nop
 80054fc:	e000      	b.n	8005500 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80054fe:	bf00      	nop
		}
	}

	return val;
 8005500:	697b      	ldr	r3, [r7, #20]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3718      	adds	r7, #24
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800550a:	b590      	push	{r4, r7, lr}
 800550c:	b089      	sub	sp, #36	; 0x24
 800550e:	af00      	add	r7, sp, #0
 8005510:	60f8      	str	r0, [r7, #12]
 8005512:	60b9      	str	r1, [r7, #8]
 8005514:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005516:	2302      	movs	r3, #2
 8005518:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2b01      	cmp	r3, #1
 800551e:	f240 80d2 	bls.w	80056c6 <put_fat+0x1bc>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	429a      	cmp	r2, r3
 800552a:	f080 80cc 	bcs.w	80056c6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	2b03      	cmp	r3, #3
 8005534:	f000 8096 	beq.w	8005664 <put_fat+0x15a>
 8005538:	2b03      	cmp	r3, #3
 800553a:	f300 80cd 	bgt.w	80056d8 <put_fat+0x1ce>
 800553e:	2b01      	cmp	r3, #1
 8005540:	d002      	beq.n	8005548 <put_fat+0x3e>
 8005542:	2b02      	cmp	r3, #2
 8005544:	d06e      	beq.n	8005624 <put_fat+0x11a>
 8005546:	e0c7      	b.n	80056d8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	61bb      	str	r3, [r7, #24]
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	085b      	lsrs	r3, r3, #1
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	4413      	add	r3, r2
 8005554:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a1a      	ldr	r2, [r3, #32]
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	0a5b      	lsrs	r3, r3, #9
 800555e:	4413      	add	r3, r2
 8005560:	4619      	mov	r1, r3
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f7ff fe6e 	bl	8005244 <move_window>
 8005568:	4603      	mov	r3, r0
 800556a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800556c:	7ffb      	ldrb	r3, [r7, #31]
 800556e:	2b00      	cmp	r3, #0
 8005570:	f040 80ab 	bne.w	80056ca <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	1c59      	adds	r1, r3, #1
 800557e:	61b9      	str	r1, [r7, #24]
 8005580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005584:	4413      	add	r3, r2
 8005586:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00d      	beq.n	80055ae <put_fat+0xa4>
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	b25b      	sxtb	r3, r3
 8005598:	f003 030f 	and.w	r3, r3, #15
 800559c:	b25a      	sxtb	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	011b      	lsls	r3, r3, #4
 80055a4:	b25b      	sxtb	r3, r3
 80055a6:	4313      	orrs	r3, r2
 80055a8:	b25b      	sxtb	r3, r3
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	e001      	b.n	80055b2 <put_fat+0xa8>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2201      	movs	r2, #1
 80055ba:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6a1a      	ldr	r2, [r3, #32]
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	0a5b      	lsrs	r3, r3, #9
 80055c4:	4413      	add	r3, r2
 80055c6:	4619      	mov	r1, r3
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f7ff fe3b 	bl	8005244 <move_window>
 80055ce:	4603      	mov	r3, r0
 80055d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80055d2:	7ffb      	ldrb	r3, [r7, #31]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d17a      	bne.n	80056ce <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e4:	4413      	add	r3, r2
 80055e6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <put_fat+0xf0>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	091b      	lsrs	r3, r3, #4
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	e00e      	b.n	8005618 <put_fat+0x10e>
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	b25b      	sxtb	r3, r3
 8005600:	f023 030f 	bic.w	r3, r3, #15
 8005604:	b25a      	sxtb	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	0a1b      	lsrs	r3, r3, #8
 800560a:	b25b      	sxtb	r3, r3
 800560c:	f003 030f 	and.w	r3, r3, #15
 8005610:	b25b      	sxtb	r3, r3
 8005612:	4313      	orrs	r3, r2
 8005614:	b25b      	sxtb	r3, r3
 8005616:	b2db      	uxtb	r3, r3
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2201      	movs	r2, #1
 8005620:	70da      	strb	r2, [r3, #3]
			break;
 8005622:	e059      	b.n	80056d8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a1a      	ldr	r2, [r3, #32]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	0a1b      	lsrs	r3, r3, #8
 800562c:	4413      	add	r3, r2
 800562e:	4619      	mov	r1, r3
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f7ff fe07 	bl	8005244 <move_window>
 8005636:	4603      	mov	r3, r0
 8005638:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800563a:	7ffb      	ldrb	r3, [r7, #31]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d148      	bne.n	80056d2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800564e:	4413      	add	r3, r2
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	b292      	uxth	r2, r2
 8005654:	4611      	mov	r1, r2
 8005656:	4618      	mov	r0, r3
 8005658:	f7ff fbbb 	bl	8004dd2 <st_word>
			fs->wflag = 1;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2201      	movs	r2, #1
 8005660:	70da      	strb	r2, [r3, #3]
			break;
 8005662:	e039      	b.n	80056d8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a1a      	ldr	r2, [r3, #32]
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	09db      	lsrs	r3, r3, #7
 800566c:	4413      	add	r3, r2
 800566e:	4619      	mov	r1, r3
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f7ff fde7 	bl	8005244 <move_window>
 8005676:	4603      	mov	r3, r0
 8005678:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800567a:	7ffb      	ldrb	r3, [r7, #31]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d12a      	bne.n	80056d6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005694:	4413      	add	r3, r2
 8005696:	4618      	mov	r0, r3
 8005698:	f7ff fb78 	bl	8004d8c <ld_dword>
 800569c:	4603      	mov	r3, r0
 800569e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80056a2:	4323      	orrs	r3, r4
 80056a4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80056b4:	4413      	add	r3, r2
 80056b6:	6879      	ldr	r1, [r7, #4]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7ff fba5 	bl	8004e08 <st_dword>
			fs->wflag = 1;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2201      	movs	r2, #1
 80056c2:	70da      	strb	r2, [r3, #3]
			break;
 80056c4:	e008      	b.n	80056d8 <put_fat+0x1ce>
		}
	}
 80056c6:	bf00      	nop
 80056c8:	e006      	b.n	80056d8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80056ca:	bf00      	nop
 80056cc:	e004      	b.n	80056d8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80056ce:	bf00      	nop
 80056d0:	e002      	b.n	80056d8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80056d2:	bf00      	nop
 80056d4:	e000      	b.n	80056d8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80056d6:	bf00      	nop
	return res;
 80056d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3724      	adds	r7, #36	; 0x24
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd90      	pop	{r4, r7, pc}

080056e2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b088      	sub	sp, #32
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d904      	bls.n	8005708 <remove_chain+0x26>
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	429a      	cmp	r2, r3
 8005706:	d301      	bcc.n	800570c <remove_chain+0x2a>
 8005708:	2302      	movs	r3, #2
 800570a:	e04b      	b.n	80057a4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00c      	beq.n	800572c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005712:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005716:	6879      	ldr	r1, [r7, #4]
 8005718:	69b8      	ldr	r0, [r7, #24]
 800571a:	f7ff fef6 	bl	800550a <put_fat>
 800571e:	4603      	mov	r3, r0
 8005720:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005722:	7ffb      	ldrb	r3, [r7, #31]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <remove_chain+0x4a>
 8005728:	7ffb      	ldrb	r3, [r7, #31]
 800572a:	e03b      	b.n	80057a4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800572c:	68b9      	ldr	r1, [r7, #8]
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f7ff fe43 	bl	80053ba <get_fat>
 8005734:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d031      	beq.n	80057a0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d101      	bne.n	8005746 <remove_chain+0x64>
 8005742:	2302      	movs	r3, #2
 8005744:	e02e      	b.n	80057a4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800574c:	d101      	bne.n	8005752 <remove_chain+0x70>
 800574e:	2301      	movs	r3, #1
 8005750:	e028      	b.n	80057a4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005752:	2200      	movs	r2, #0
 8005754:	68b9      	ldr	r1, [r7, #8]
 8005756:	69b8      	ldr	r0, [r7, #24]
 8005758:	f7ff fed7 	bl	800550a <put_fat>
 800575c:	4603      	mov	r3, r0
 800575e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005760:	7ffb      	ldrb	r3, [r7, #31]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <remove_chain+0x88>
 8005766:	7ffb      	ldrb	r3, [r7, #31]
 8005768:	e01c      	b.n	80057a4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	691a      	ldr	r2, [r3, #16]
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	3b02      	subs	r3, #2
 8005774:	429a      	cmp	r2, r3
 8005776:	d20b      	bcs.n	8005790 <remove_chain+0xae>
			fs->free_clst++;
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	1c5a      	adds	r2, r3, #1
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	791b      	ldrb	r3, [r3, #4]
 8005786:	f043 0301 	orr.w	r3, r3, #1
 800578a:	b2da      	uxtb	r2, r3
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	429a      	cmp	r2, r3
 800579c:	d3c6      	bcc.n	800572c <remove_chain+0x4a>
 800579e:	e000      	b.n	80057a2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80057a0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3720      	adds	r7, #32
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b088      	sub	sp, #32
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10d      	bne.n	80057de <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d004      	beq.n	80057d8 <create_chain+0x2c>
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d31b      	bcc.n	8005810 <create_chain+0x64>
 80057d8:	2301      	movs	r3, #1
 80057da:	61bb      	str	r3, [r7, #24]
 80057dc:	e018      	b.n	8005810 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80057de:	6839      	ldr	r1, [r7, #0]
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7ff fdea 	bl	80053ba <get_fat>
 80057e6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d801      	bhi.n	80057f2 <create_chain+0x46>
 80057ee:	2301      	movs	r3, #1
 80057f0:	e070      	b.n	80058d4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057f8:	d101      	bne.n	80057fe <create_chain+0x52>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	e06a      	b.n	80058d4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	429a      	cmp	r2, r3
 8005806:	d201      	bcs.n	800580c <create_chain+0x60>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	e063      	b.n	80058d4 <create_chain+0x128>
		scl = clst;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	3301      	adds	r3, #1
 8005818:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	69fa      	ldr	r2, [r7, #28]
 8005820:	429a      	cmp	r2, r3
 8005822:	d307      	bcc.n	8005834 <create_chain+0x88>
				ncl = 2;
 8005824:	2302      	movs	r3, #2
 8005826:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005828:	69fa      	ldr	r2, [r7, #28]
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	429a      	cmp	r2, r3
 800582e:	d901      	bls.n	8005834 <create_chain+0x88>
 8005830:	2300      	movs	r3, #0
 8005832:	e04f      	b.n	80058d4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005834:	69f9      	ldr	r1, [r7, #28]
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7ff fdbf 	bl	80053ba <get_fat>
 800583c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00e      	beq.n	8005862 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d003      	beq.n	8005852 <create_chain+0xa6>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005850:	d101      	bne.n	8005856 <create_chain+0xaa>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	e03e      	b.n	80058d4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005856:	69fa      	ldr	r2, [r7, #28]
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	429a      	cmp	r2, r3
 800585c:	d1da      	bne.n	8005814 <create_chain+0x68>
 800585e:	2300      	movs	r3, #0
 8005860:	e038      	b.n	80058d4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005862:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005864:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005868:	69f9      	ldr	r1, [r7, #28]
 800586a:	6938      	ldr	r0, [r7, #16]
 800586c:	f7ff fe4d 	bl	800550a <put_fat>
 8005870:	4603      	mov	r3, r0
 8005872:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005874:	7dfb      	ldrb	r3, [r7, #23]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d109      	bne.n	800588e <create_chain+0xe2>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d006      	beq.n	800588e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005880:	69fa      	ldr	r2, [r7, #28]
 8005882:	6839      	ldr	r1, [r7, #0]
 8005884:	6938      	ldr	r0, [r7, #16]
 8005886:	f7ff fe40 	bl	800550a <put_fat>
 800588a:	4603      	mov	r3, r0
 800588c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800588e:	7dfb      	ldrb	r3, [r7, #23]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d116      	bne.n	80058c2 <create_chain+0x116>
		fs->last_clst = ncl;
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	69fa      	ldr	r2, [r7, #28]
 8005898:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	691a      	ldr	r2, [r3, #16]
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	3b02      	subs	r3, #2
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d804      	bhi.n	80058b2 <create_chain+0x106>
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	1e5a      	subs	r2, r3, #1
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	791b      	ldrb	r3, [r3, #4]
 80058b6:	f043 0301 	orr.w	r3, r3, #1
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	711a      	strb	r2, [r3, #4]
 80058c0:	e007      	b.n	80058d2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80058c2:	7dfb      	ldrb	r3, [r7, #23]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d102      	bne.n	80058ce <create_chain+0x122>
 80058c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058cc:	e000      	b.n	80058d0 <create_chain+0x124>
 80058ce:	2301      	movs	r3, #1
 80058d0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80058d2:	69fb      	ldr	r3, [r7, #28]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3720      	adds	r7, #32
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80058dc:	b480      	push	{r7}
 80058de:	b087      	sub	sp, #28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f0:	3304      	adds	r3, #4
 80058f2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	0a5b      	lsrs	r3, r3, #9
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	8952      	ldrh	r2, [r2, #10]
 80058fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005900:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1d1a      	adds	r2, r3, #4
 8005906:	613a      	str	r2, [r7, #16]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <clmt_clust+0x3a>
 8005912:	2300      	movs	r3, #0
 8005914:	e010      	b.n	8005938 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	429a      	cmp	r2, r3
 800591c:	d307      	bcc.n	800592e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	617b      	str	r3, [r7, #20]
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	3304      	adds	r3, #4
 800592a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800592c:	e7e9      	b.n	8005902 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800592e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	4413      	add	r3, r2
}
 8005938:	4618      	mov	r0, r3
 800593a:	371c      	adds	r7, #28
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800595a:	d204      	bcs.n	8005966 <dir_sdi+0x22>
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	f003 031f 	and.w	r3, r3, #31
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <dir_sdi+0x26>
		return FR_INT_ERR;
 8005966:	2302      	movs	r3, #2
 8005968:	e063      	b.n	8005a32 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d106      	bne.n	800598a <dir_sdi+0x46>
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b02      	cmp	r3, #2
 8005982:	d902      	bls.n	800598a <dir_sdi+0x46>
		clst = fs->dirbase;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005988:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10c      	bne.n	80059aa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	095b      	lsrs	r3, r3, #5
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	8912      	ldrh	r2, [r2, #8]
 8005998:	4293      	cmp	r3, r2
 800599a:	d301      	bcc.n	80059a0 <dir_sdi+0x5c>
 800599c:	2302      	movs	r3, #2
 800599e:	e048      	b.n	8005a32 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	61da      	str	r2, [r3, #28]
 80059a8:	e029      	b.n	80059fe <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	895b      	ldrh	r3, [r3, #10]
 80059ae:	025b      	lsls	r3, r3, #9
 80059b0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80059b2:	e019      	b.n	80059e8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6979      	ldr	r1, [r7, #20]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7ff fcfe 	bl	80053ba <get_fat>
 80059be:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059c6:	d101      	bne.n	80059cc <dir_sdi+0x88>
 80059c8:	2301      	movs	r3, #1
 80059ca:	e032      	b.n	8005a32 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d904      	bls.n	80059dc <dir_sdi+0x98>
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d301      	bcc.n	80059e0 <dir_sdi+0x9c>
 80059dc:	2302      	movs	r3, #2
 80059de:	e028      	b.n	8005a32 <dir_sdi+0xee>
			ofs -= csz;
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d2e1      	bcs.n	80059b4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80059f0:	6979      	ldr	r1, [r7, #20]
 80059f2:	6938      	ldr	r0, [r7, #16]
 80059f4:	f7ff fcc2 	bl	800537c <clust2sect>
 80059f8:	4602      	mov	r2, r0
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	69db      	ldr	r3, [r3, #28]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <dir_sdi+0xcc>
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	e010      	b.n	8005a32 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	69da      	ldr	r2, [r3, #28]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	0a5b      	lsrs	r3, r3, #9
 8005a18:	441a      	add	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a2a:	441a      	add	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b086      	sub	sp, #24
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
 8005a42:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	3320      	adds	r3, #32
 8005a50:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <dir_next+0x28>
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a60:	d301      	bcc.n	8005a66 <dir_next+0x2c>
 8005a62:	2304      	movs	r3, #4
 8005a64:	e0aa      	b.n	8005bbc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f040 8098 	bne.w	8005ba2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10b      	bne.n	8005a9c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	095b      	lsrs	r3, r3, #5
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	8912      	ldrh	r2, [r2, #8]
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	f0c0 8088 	bcc.w	8005ba2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	61da      	str	r2, [r3, #28]
 8005a98:	2304      	movs	r3, #4
 8005a9a:	e08f      	b.n	8005bbc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	0a5b      	lsrs	r3, r3, #9
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	8952      	ldrh	r2, [r2, #10]
 8005aa4:	3a01      	subs	r2, #1
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d17a      	bne.n	8005ba2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	f7ff fc80 	bl	80053ba <get_fat>
 8005aba:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d801      	bhi.n	8005ac6 <dir_next+0x8c>
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	e07a      	b.n	8005bbc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005acc:	d101      	bne.n	8005ad2 <dir_next+0x98>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e074      	b.n	8005bbc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d358      	bcc.n	8005b8e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d104      	bne.n	8005aec <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	61da      	str	r2, [r3, #28]
 8005ae8:	2304      	movs	r3, #4
 8005aea:	e067      	b.n	8005bbc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	4619      	mov	r1, r3
 8005af4:	4610      	mov	r0, r2
 8005af6:	f7ff fe59 	bl	80057ac <create_chain>
 8005afa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <dir_next+0xcc>
 8005b02:	2307      	movs	r3, #7
 8005b04:	e05a      	b.n	8005bbc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d101      	bne.n	8005b10 <dir_next+0xd6>
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	e055      	b.n	8005bbc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b16:	d101      	bne.n	8005b1c <dir_next+0xe2>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e04f      	b.n	8005bbc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f7ff fb4d 	bl	80051bc <sync_window>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <dir_next+0xf2>
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e047      	b.n	8005bbc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	3330      	adds	r3, #48	; 0x30
 8005b30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b34:	2100      	movs	r1, #0
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7ff f9b3 	bl	8004ea2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	613b      	str	r3, [r7, #16]
 8005b40:	6979      	ldr	r1, [r7, #20]
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f7ff fc1a 	bl	800537c <clust2sect>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8005b4e:	e012      	b.n	8005b76 <dir_next+0x13c>
						fs->wflag = 1;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2201      	movs	r2, #1
 8005b54:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f7ff fb30 	bl	80051bc <sync_window>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <dir_next+0x12c>
 8005b62:	2301      	movs	r3, #1
 8005b64:	e02a      	b.n	8005bbc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	613b      	str	r3, [r7, #16]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	62da      	str	r2, [r3, #44]	; 0x2c
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	895b      	ldrh	r3, [r3, #10]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d3e6      	bcc.n	8005b50 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad2      	subs	r2, r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005b94:	6979      	ldr	r1, [r7, #20]
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f7ff fbf0 	bl	800537c <clust2sect>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bb4:	441a      	add	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3718      	adds	r7, #24
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7ff feb4 	bl	8005944 <dir_sdi>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005be0:	7dfb      	ldrb	r3, [r7, #23]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d12b      	bne.n	8005c3e <dir_alloc+0x7a>
		n = 0;
 8005be6:	2300      	movs	r3, #0
 8005be8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	4619      	mov	r1, r3
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f7ff fb27 	bl	8005244 <move_window>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005bfa:	7dfb      	ldrb	r3, [r7, #23]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d11d      	bne.n	8005c3c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	2be5      	cmp	r3, #229	; 0xe5
 8005c08:	d004      	beq.n	8005c14 <dir_alloc+0x50>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d107      	bne.n	8005c24 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	3301      	adds	r3, #1
 8005c18:	613b      	str	r3, [r7, #16]
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d102      	bne.n	8005c28 <dir_alloc+0x64>
 8005c22:	e00c      	b.n	8005c3e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005c24:	2300      	movs	r3, #0
 8005c26:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005c28:	2101      	movs	r1, #1
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7ff ff05 	bl	8005a3a <dir_next>
 8005c30:	4603      	mov	r3, r0
 8005c32:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005c34:	7dfb      	ldrb	r3, [r7, #23]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0d7      	beq.n	8005bea <dir_alloc+0x26>
 8005c3a:	e000      	b.n	8005c3e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005c3c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005c3e:	7dfb      	ldrb	r3, [r7, #23]
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	d101      	bne.n	8005c48 <dir_alloc+0x84>
 8005c44:	2307      	movs	r3, #7
 8005c46:	75fb      	strb	r3, [r7, #23]
	return res;
 8005c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3718      	adds	r7, #24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b084      	sub	sp, #16
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
 8005c5a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	331a      	adds	r3, #26
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7ff f87b 	bl	8004d5c <ld_word>
 8005c66:	4603      	mov	r3, r0
 8005c68:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	d109      	bne.n	8005c86 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	3314      	adds	r3, #20
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7ff f870 	bl	8004d5c <ld_word>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	041b      	lsls	r3, r3, #16
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005c86:	68fb      	ldr	r3, [r7, #12]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	331a      	adds	r3, #26
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	b292      	uxth	r2, r2
 8005ca4:	4611      	mov	r1, r2
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7ff f893 	bl	8004dd2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	2b03      	cmp	r3, #3
 8005cb2:	d109      	bne.n	8005cc8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f103 0214 	add.w	r2, r3, #20
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	0c1b      	lsrs	r3, r3, #16
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	4610      	mov	r0, r2
 8005cc4:	f7ff f885 	bl	8004dd2 <st_word>
	}
}
 8005cc8:	bf00      	nop
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8005cda:	2304      	movs	r3, #4
 8005cdc:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8005ce4:	e03c      	b.n	8005d60 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	4619      	mov	r1, r3
 8005cec:	6938      	ldr	r0, [r7, #16]
 8005cee:	f7ff faa9 	bl	8005244 <move_window>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005cf6:	7dfb      	ldrb	r3, [r7, #23]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d136      	bne.n	8005d6a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8005d04:	7bfb      	ldrb	r3, [r7, #15]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d102      	bne.n	8005d10 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8005d0a:	2304      	movs	r3, #4
 8005d0c:	75fb      	strb	r3, [r7, #23]
 8005d0e:	e031      	b.n	8005d74 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	330b      	adds	r3, #11
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d1c:	73bb      	strb	r3, [r7, #14]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	7bba      	ldrb	r2, [r7, #14]
 8005d22:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8005d24:	7bfb      	ldrb	r3, [r7, #15]
 8005d26:	2be5      	cmp	r3, #229	; 0xe5
 8005d28:	d011      	beq.n	8005d4e <dir_read+0x7e>
 8005d2a:	7bfb      	ldrb	r3, [r7, #15]
 8005d2c:	2b2e      	cmp	r3, #46	; 0x2e
 8005d2e:	d00e      	beq.n	8005d4e <dir_read+0x7e>
 8005d30:	7bbb      	ldrb	r3, [r7, #14]
 8005d32:	2b0f      	cmp	r3, #15
 8005d34:	d00b      	beq.n	8005d4e <dir_read+0x7e>
 8005d36:	7bbb      	ldrb	r3, [r7, #14]
 8005d38:	f023 0320 	bic.w	r3, r3, #32
 8005d3c:	2b08      	cmp	r3, #8
 8005d3e:	bf0c      	ite	eq
 8005d40:	2301      	moveq	r3, #1
 8005d42:	2300      	movne	r3, #0
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	461a      	mov	r2, r3
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00f      	beq.n	8005d6e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8005d4e:	2100      	movs	r1, #0
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f7ff fe72 	bl	8005a3a <dir_next>
 8005d56:	4603      	mov	r3, r0
 8005d58:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005d5a:	7dfb      	ldrb	r3, [r7, #23]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d108      	bne.n	8005d72 <dir_read+0xa2>
	while (dp->sect) {
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	69db      	ldr	r3, [r3, #28]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1be      	bne.n	8005ce6 <dir_read+0x16>
 8005d68:	e004      	b.n	8005d74 <dir_read+0xa4>
		if (res != FR_OK) break;
 8005d6a:	bf00      	nop
 8005d6c:	e002      	b.n	8005d74 <dir_read+0xa4>
				break;
 8005d6e:	bf00      	nop
 8005d70:	e000      	b.n	8005d74 <dir_read+0xa4>
		if (res != FR_OK) break;
 8005d72:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005d74:	7dfb      	ldrb	r3, [r7, #23]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d002      	beq.n	8005d80 <dir_read+0xb0>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	61da      	str	r2, [r3, #28]
	return res;
 8005d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3718      	adds	r7, #24
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b086      	sub	sp, #24
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005d98:	2100      	movs	r1, #0
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7ff fdd2 	bl	8005944 <dir_sdi>
 8005da0:	4603      	mov	r3, r0
 8005da2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005da4:	7dfb      	ldrb	r3, [r7, #23]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <dir_find+0x24>
 8005daa:	7dfb      	ldrb	r3, [r7, #23]
 8005dac:	e03e      	b.n	8005e2c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	4619      	mov	r1, r3
 8005db4:	6938      	ldr	r0, [r7, #16]
 8005db6:	f7ff fa45 	bl	8005244 <move_window>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005dbe:	7dfb      	ldrb	r3, [r7, #23]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d12f      	bne.n	8005e24 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d102      	bne.n	8005dd8 <dir_find+0x4e>
 8005dd2:	2304      	movs	r3, #4
 8005dd4:	75fb      	strb	r3, [r7, #23]
 8005dd6:	e028      	b.n	8005e2a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	330b      	adds	r3, #11
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	330b      	adds	r3, #11
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	f003 0308 	and.w	r3, r3, #8
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10a      	bne.n	8005e10 <dir_find+0x86>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a18      	ldr	r0, [r3, #32]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	3324      	adds	r3, #36	; 0x24
 8005e02:	220b      	movs	r2, #11
 8005e04:	4619      	mov	r1, r3
 8005e06:	f7ff f867 	bl	8004ed8 <mem_cmp>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00b      	beq.n	8005e28 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005e10:	2100      	movs	r1, #0
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7ff fe11 	bl	8005a3a <dir_next>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005e1c:	7dfb      	ldrb	r3, [r7, #23]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d0c5      	beq.n	8005dae <dir_find+0x24>
 8005e22:	e002      	b.n	8005e2a <dir_find+0xa0>
		if (res != FR_OK) break;
 8005e24:	bf00      	nop
 8005e26:	e000      	b.n	8005e2a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005e28:	bf00      	nop

	return res;
 8005e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3718      	adds	r7, #24
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005e42:	2101      	movs	r1, #1
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f7ff febd 	bl	8005bc4 <dir_alloc>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d11c      	bne.n	8005e8e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	69db      	ldr	r3, [r3, #28]
 8005e58:	4619      	mov	r1, r3
 8005e5a:	68b8      	ldr	r0, [r7, #8]
 8005e5c:	f7ff f9f2 	bl	8005244 <move_window>
 8005e60:	4603      	mov	r3, r0
 8005e62:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005e64:	7bfb      	ldrb	r3, [r7, #15]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d111      	bne.n	8005e8e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	2100      	movs	r1, #0
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7ff f815 	bl	8004ea2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a18      	ldr	r0, [r3, #32]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	3324      	adds	r3, #36	; 0x24
 8005e80:	220b      	movs	r2, #11
 8005e82:	4619      	mov	r1, r3
 8005e84:	f7fe ffec 	bl	8004e60 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	4619      	mov	r1, r3
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f7ff f9c9 	bl	8005244 <move_window>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8005eb6:	7afb      	ldrb	r3, [r7, #11]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d106      	bne.n	8005eca <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	22e5      	movs	r2, #229	; 0xe5
 8005ec2:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8005eca:	7afb      	ldrb	r3, [r7, #11]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b088      	sub	sp, #32
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3324      	adds	r3, #36	; 0x24
 8005ee8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005eea:	220b      	movs	r2, #11
 8005eec:	2120      	movs	r1, #32
 8005eee:	68b8      	ldr	r0, [r7, #8]
 8005ef0:	f7fe ffd7 	bl	8004ea2 <mem_set>
	si = i = 0; ni = 8;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	613b      	str	r3, [r7, #16]
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	61fb      	str	r3, [r7, #28]
 8005efc:	2308      	movs	r3, #8
 8005efe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	61fa      	str	r2, [r7, #28]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	4413      	add	r3, r2
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005f0e:	7efb      	ldrb	r3, [r7, #27]
 8005f10:	2b20      	cmp	r3, #32
 8005f12:	d94e      	bls.n	8005fb2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005f14:	7efb      	ldrb	r3, [r7, #27]
 8005f16:	2b2f      	cmp	r3, #47	; 0x2f
 8005f18:	d006      	beq.n	8005f28 <create_name+0x54>
 8005f1a:	7efb      	ldrb	r3, [r7, #27]
 8005f1c:	2b5c      	cmp	r3, #92	; 0x5c
 8005f1e:	d110      	bne.n	8005f42 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005f20:	e002      	b.n	8005f28 <create_name+0x54>
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	3301      	adds	r3, #1
 8005f26:	61fb      	str	r3, [r7, #28]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	2b2f      	cmp	r3, #47	; 0x2f
 8005f32:	d0f6      	beq.n	8005f22 <create_name+0x4e>
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	4413      	add	r3, r2
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	2b5c      	cmp	r3, #92	; 0x5c
 8005f3e:	d0f0      	beq.n	8005f22 <create_name+0x4e>
			break;
 8005f40:	e038      	b.n	8005fb4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005f42:	7efb      	ldrb	r3, [r7, #27]
 8005f44:	2b2e      	cmp	r3, #46	; 0x2e
 8005f46:	d003      	beq.n	8005f50 <create_name+0x7c>
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d30c      	bcc.n	8005f6a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	2b0b      	cmp	r3, #11
 8005f54:	d002      	beq.n	8005f5c <create_name+0x88>
 8005f56:	7efb      	ldrb	r3, [r7, #27]
 8005f58:	2b2e      	cmp	r3, #46	; 0x2e
 8005f5a:	d001      	beq.n	8005f60 <create_name+0x8c>
 8005f5c:	2306      	movs	r3, #6
 8005f5e:	e044      	b.n	8005fea <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005f60:	2308      	movs	r3, #8
 8005f62:	613b      	str	r3, [r7, #16]
 8005f64:	230b      	movs	r3, #11
 8005f66:	617b      	str	r3, [r7, #20]
			continue;
 8005f68:	e022      	b.n	8005fb0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005f6a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	da04      	bge.n	8005f7c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005f72:	7efb      	ldrb	r3, [r7, #27]
 8005f74:	3b80      	subs	r3, #128	; 0x80
 8005f76:	4a1f      	ldr	r2, [pc, #124]	; (8005ff4 <create_name+0x120>)
 8005f78:	5cd3      	ldrb	r3, [r2, r3]
 8005f7a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005f7c:	7efb      	ldrb	r3, [r7, #27]
 8005f7e:	4619      	mov	r1, r3
 8005f80:	481d      	ldr	r0, [pc, #116]	; (8005ff8 <create_name+0x124>)
 8005f82:	f7fe ffd0 	bl	8004f26 <chk_chr>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <create_name+0xbc>
 8005f8c:	2306      	movs	r3, #6
 8005f8e:	e02c      	b.n	8005fea <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005f90:	7efb      	ldrb	r3, [r7, #27]
 8005f92:	2b60      	cmp	r3, #96	; 0x60
 8005f94:	d905      	bls.n	8005fa2 <create_name+0xce>
 8005f96:	7efb      	ldrb	r3, [r7, #27]
 8005f98:	2b7a      	cmp	r3, #122	; 0x7a
 8005f9a:	d802      	bhi.n	8005fa2 <create_name+0xce>
 8005f9c:	7efb      	ldrb	r3, [r7, #27]
 8005f9e:	3b20      	subs	r3, #32
 8005fa0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	1c5a      	adds	r2, r3, #1
 8005fa6:	613a      	str	r2, [r7, #16]
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	4413      	add	r3, r2
 8005fac:	7efa      	ldrb	r2, [r7, #27]
 8005fae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005fb0:	e7a6      	b.n	8005f00 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005fb2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	441a      	add	r2, r3
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <create_name+0xf4>
 8005fc4:	2306      	movs	r3, #6
 8005fc6:	e010      	b.n	8005fea <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	2be5      	cmp	r3, #229	; 0xe5
 8005fce:	d102      	bne.n	8005fd6 <create_name+0x102>
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2205      	movs	r2, #5
 8005fd4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005fd6:	7efb      	ldrb	r3, [r7, #27]
 8005fd8:	2b20      	cmp	r3, #32
 8005fda:	d801      	bhi.n	8005fe0 <create_name+0x10c>
 8005fdc:	2204      	movs	r2, #4
 8005fde:	e000      	b.n	8005fe2 <create_name+0x10e>
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	330b      	adds	r3, #11
 8005fe6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005fe8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3720      	adds	r7, #32
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	08007fe8 	.word	0x08007fe8
 8005ff8:	08007f80 	.word	0x08007f80

08005ffc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006010:	e002      	b.n	8006018 <follow_path+0x1c>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	3301      	adds	r3, #1
 8006016:	603b      	str	r3, [r7, #0]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	2b2f      	cmp	r3, #47	; 0x2f
 800601e:	d0f8      	beq.n	8006012 <follow_path+0x16>
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	2b5c      	cmp	r3, #92	; 0x5c
 8006026:	d0f4      	beq.n	8006012 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	2200      	movs	r2, #0
 800602c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	2b1f      	cmp	r3, #31
 8006034:	d80a      	bhi.n	800604c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2280      	movs	r2, #128	; 0x80
 800603a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800603e:	2100      	movs	r1, #0
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7ff fc7f 	bl	8005944 <dir_sdi>
 8006046:	4603      	mov	r3, r0
 8006048:	75fb      	strb	r3, [r7, #23]
 800604a:	e043      	b.n	80060d4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800604c:	463b      	mov	r3, r7
 800604e:	4619      	mov	r1, r3
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f7ff ff3f 	bl	8005ed4 <create_name>
 8006056:	4603      	mov	r3, r0
 8006058:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800605a:	7dfb      	ldrb	r3, [r7, #23]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d134      	bne.n	80060ca <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7ff fe92 	bl	8005d8a <dir_find>
 8006066:	4603      	mov	r3, r0
 8006068:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006070:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006072:	7dfb      	ldrb	r3, [r7, #23]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00a      	beq.n	800608e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006078:	7dfb      	ldrb	r3, [r7, #23]
 800607a:	2b04      	cmp	r3, #4
 800607c:	d127      	bne.n	80060ce <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800607e:	7afb      	ldrb	r3, [r7, #11]
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	2b00      	cmp	r3, #0
 8006086:	d122      	bne.n	80060ce <follow_path+0xd2>
 8006088:	2305      	movs	r3, #5
 800608a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800608c:	e01f      	b.n	80060ce <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800608e:	7afb      	ldrb	r3, [r7, #11]
 8006090:	f003 0304 	and.w	r3, r3, #4
 8006094:	2b00      	cmp	r3, #0
 8006096:	d11c      	bne.n	80060d2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	799b      	ldrb	r3, [r3, #6]
 800609c:	f003 0310 	and.w	r3, r3, #16
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d102      	bne.n	80060aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 80060a4:	2305      	movs	r3, #5
 80060a6:	75fb      	strb	r3, [r7, #23]
 80060a8:	e014      	b.n	80060d4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b8:	4413      	add	r3, r2
 80060ba:	4619      	mov	r1, r3
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f7ff fdc8 	bl	8005c52 <ld_clust>
 80060c2:	4602      	mov	r2, r0
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80060c8:	e7c0      	b.n	800604c <follow_path+0x50>
			if (res != FR_OK) break;
 80060ca:	bf00      	nop
 80060cc:	e002      	b.n	80060d4 <follow_path+0xd8>
				break;
 80060ce:	bf00      	nop
 80060d0:	e000      	b.n	80060d4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80060d2:	bf00      	nop
			}
		}
	}

	return res;
 80060d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3718      	adds	r7, #24
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80060de:	b480      	push	{r7}
 80060e0:	b087      	sub	sp, #28
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80060e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060ea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d031      	beq.n	8006158 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	617b      	str	r3, [r7, #20]
 80060fa:	e002      	b.n	8006102 <get_ldnumber+0x24>
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	3301      	adds	r3, #1
 8006100:	617b      	str	r3, [r7, #20]
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	2b20      	cmp	r3, #32
 8006108:	d903      	bls.n	8006112 <get_ldnumber+0x34>
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	2b3a      	cmp	r3, #58	; 0x3a
 8006110:	d1f4      	bne.n	80060fc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	2b3a      	cmp	r3, #58	; 0x3a
 8006118:	d11c      	bne.n	8006154 <get_ldnumber+0x76>
			tp = *path;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	1c5a      	adds	r2, r3, #1
 8006124:	60fa      	str	r2, [r7, #12]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	3b30      	subs	r3, #48	; 0x30
 800612a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2b09      	cmp	r3, #9
 8006130:	d80e      	bhi.n	8006150 <get_ldnumber+0x72>
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	429a      	cmp	r2, r3
 8006138:	d10a      	bne.n	8006150 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d107      	bne.n	8006150 <get_ldnumber+0x72>
					vol = (int)i;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	3301      	adds	r3, #1
 8006148:	617b      	str	r3, [r7, #20]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	e002      	b.n	800615a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006154:	2300      	movs	r3, #0
 8006156:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006158:	693b      	ldr	r3, [r7, #16]
}
 800615a:	4618      	mov	r0, r3
 800615c:	371c      	adds	r7, #28
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
	...

08006168 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	70da      	strb	r2, [r3, #3]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800617e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006180:	6839      	ldr	r1, [r7, #0]
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7ff f85e 	bl	8005244 <move_window>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <check_fs+0x2a>
 800618e:	2304      	movs	r3, #4
 8006190:	e038      	b.n	8006204 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	3330      	adds	r3, #48	; 0x30
 8006196:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800619a:	4618      	mov	r0, r3
 800619c:	f7fe fdde 	bl	8004d5c <ld_word>
 80061a0:	4603      	mov	r3, r0
 80061a2:	461a      	mov	r2, r3
 80061a4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d001      	beq.n	80061b0 <check_fs+0x48>
 80061ac:	2303      	movs	r3, #3
 80061ae:	e029      	b.n	8006204 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80061b6:	2be9      	cmp	r3, #233	; 0xe9
 80061b8:	d009      	beq.n	80061ce <check_fs+0x66>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80061c0:	2beb      	cmp	r3, #235	; 0xeb
 80061c2:	d11e      	bne.n	8006202 <check_fs+0x9a>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80061ca:	2b90      	cmp	r3, #144	; 0x90
 80061cc:	d119      	bne.n	8006202 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	3330      	adds	r3, #48	; 0x30
 80061d2:	3336      	adds	r3, #54	; 0x36
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7fe fdd9 	bl	8004d8c <ld_dword>
 80061da:	4603      	mov	r3, r0
 80061dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80061e0:	4a0a      	ldr	r2, [pc, #40]	; (800620c <check_fs+0xa4>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d101      	bne.n	80061ea <check_fs+0x82>
 80061e6:	2300      	movs	r3, #0
 80061e8:	e00c      	b.n	8006204 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	3330      	adds	r3, #48	; 0x30
 80061ee:	3352      	adds	r3, #82	; 0x52
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7fe fdcb 	bl	8004d8c <ld_dword>
 80061f6:	4603      	mov	r3, r0
 80061f8:	4a05      	ldr	r2, [pc, #20]	; (8006210 <check_fs+0xa8>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d101      	bne.n	8006202 <check_fs+0x9a>
 80061fe:	2300      	movs	r3, #0
 8006200:	e000      	b.n	8006204 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006202:	2302      	movs	r3, #2
}
 8006204:	4618      	mov	r0, r3
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	00544146 	.word	0x00544146
 8006210:	33544146 	.word	0x33544146

08006214 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b096      	sub	sp, #88	; 0x58
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	4613      	mov	r3, r2
 8006220:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	2200      	movs	r2, #0
 8006226:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f7ff ff58 	bl	80060de <get_ldnumber>
 800622e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006232:	2b00      	cmp	r3, #0
 8006234:	da01      	bge.n	800623a <find_volume+0x26>
 8006236:	230b      	movs	r3, #11
 8006238:	e22e      	b.n	8006698 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800623a:	4aa8      	ldr	r2, [pc, #672]	; (80064dc <find_volume+0x2c8>)
 800623c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800623e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006242:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <find_volume+0x3a>
 800624a:	230c      	movs	r3, #12
 800624c:	e224      	b.n	8006698 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006252:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006254:	79fb      	ldrb	r3, [r7, #7]
 8006256:	f023 0301 	bic.w	r3, r3, #1
 800625a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800625c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d01a      	beq.n	800629a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006266:	785b      	ldrb	r3, [r3, #1]
 8006268:	4618      	mov	r0, r3
 800626a:	f7fe fcd9 	bl	8004c20 <disk_status>
 800626e:	4603      	mov	r3, r0
 8006270:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006274:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10c      	bne.n	800629a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006280:	79fb      	ldrb	r3, [r7, #7]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d007      	beq.n	8006296 <find_volume+0x82>
 8006286:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800628a:	f003 0304 	and.w	r3, r3, #4
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006292:	230a      	movs	r3, #10
 8006294:	e200      	b.n	8006698 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8006296:	2300      	movs	r3, #0
 8006298:	e1fe      	b.n	8006698 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800629a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629c:	2200      	movs	r2, #0
 800629e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80062a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a2:	b2da      	uxtb	r2, r3
 80062a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80062a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062aa:	785b      	ldrb	r3, [r3, #1]
 80062ac:	4618      	mov	r0, r3
 80062ae:	f7fe fcd1 	bl	8004c54 <disk_initialize>
 80062b2:	4603      	mov	r3, r0
 80062b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80062b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80062c4:	2303      	movs	r3, #3
 80062c6:	e1e7      	b.n	8006698 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80062c8:	79fb      	ldrb	r3, [r7, #7]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d007      	beq.n	80062de <find_volume+0xca>
 80062ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80062d2:	f003 0304 	and.w	r3, r3, #4
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80062da:	230a      	movs	r3, #10
 80062dc:	e1dc      	b.n	8006698 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80062de:	2300      	movs	r3, #0
 80062e0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80062e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80062e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80062e6:	f7ff ff3f 	bl	8006168 <check_fs>
 80062ea:	4603      	mov	r3, r0
 80062ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80062f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d14b      	bne.n	8006390 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80062f8:	2300      	movs	r3, #0
 80062fa:	643b      	str	r3, [r7, #64]	; 0x40
 80062fc:	e01f      	b.n	800633e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80062fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006300:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800630c:	4413      	add	r3, r2
 800630e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006312:	3304      	adds	r3, #4
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d006      	beq.n	8006328 <find_volume+0x114>
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	3308      	adds	r3, #8
 800631e:	4618      	mov	r0, r3
 8006320:	f7fe fd34 	bl	8004d8c <ld_dword>
 8006324:	4602      	mov	r2, r0
 8006326:	e000      	b.n	800632a <find_volume+0x116>
 8006328:	2200      	movs	r2, #0
 800632a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006332:	440b      	add	r3, r1
 8006334:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800633a:	3301      	adds	r3, #1
 800633c:	643b      	str	r3, [r7, #64]	; 0x40
 800633e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006340:	2b03      	cmp	r3, #3
 8006342:	d9dc      	bls.n	80062fe <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006344:	2300      	movs	r3, #0
 8006346:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800634a:	2b00      	cmp	r3, #0
 800634c:	d002      	beq.n	8006354 <find_volume+0x140>
 800634e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006350:	3b01      	subs	r3, #1
 8006352:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800635c:	4413      	add	r3, r2
 800635e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006362:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006366:	2b00      	cmp	r3, #0
 8006368:	d005      	beq.n	8006376 <find_volume+0x162>
 800636a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800636c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800636e:	f7ff fefb 	bl	8006168 <check_fs>
 8006372:	4603      	mov	r3, r0
 8006374:	e000      	b.n	8006378 <find_volume+0x164>
 8006376:	2303      	movs	r3, #3
 8006378:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800637c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006380:	2b01      	cmp	r3, #1
 8006382:	d905      	bls.n	8006390 <find_volume+0x17c>
 8006384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006386:	3301      	adds	r3, #1
 8006388:	643b      	str	r3, [r7, #64]	; 0x40
 800638a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800638c:	2b03      	cmp	r3, #3
 800638e:	d9e1      	bls.n	8006354 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006390:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006394:	2b04      	cmp	r3, #4
 8006396:	d101      	bne.n	800639c <find_volume+0x188>
 8006398:	2301      	movs	r3, #1
 800639a:	e17d      	b.n	8006698 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800639c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d901      	bls.n	80063a8 <find_volume+0x194>
 80063a4:	230d      	movs	r3, #13
 80063a6:	e177      	b.n	8006698 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80063a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063aa:	3330      	adds	r3, #48	; 0x30
 80063ac:	330b      	adds	r3, #11
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fe fcd4 	bl	8004d5c <ld_word>
 80063b4:	4603      	mov	r3, r0
 80063b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063ba:	d001      	beq.n	80063c0 <find_volume+0x1ac>
 80063bc:	230d      	movs	r3, #13
 80063be:	e16b      	b.n	8006698 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80063c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c2:	3330      	adds	r3, #48	; 0x30
 80063c4:	3316      	adds	r3, #22
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fe fcc8 	bl	8004d5c <ld_word>
 80063cc:	4603      	mov	r3, r0
 80063ce:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80063d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d106      	bne.n	80063e4 <find_volume+0x1d0>
 80063d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d8:	3330      	adds	r3, #48	; 0x30
 80063da:	3324      	adds	r3, #36	; 0x24
 80063dc:	4618      	mov	r0, r3
 80063de:	f7fe fcd5 	bl	8004d8c <ld_dword>
 80063e2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80063e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063e8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80063ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ec:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80063f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80063f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f6:	789b      	ldrb	r3, [r3, #2]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d005      	beq.n	8006408 <find_volume+0x1f4>
 80063fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fe:	789b      	ldrb	r3, [r3, #2]
 8006400:	2b02      	cmp	r3, #2
 8006402:	d001      	beq.n	8006408 <find_volume+0x1f4>
 8006404:	230d      	movs	r3, #13
 8006406:	e147      	b.n	8006698 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640a:	789b      	ldrb	r3, [r3, #2]
 800640c:	461a      	mov	r2, r3
 800640e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006410:	fb02 f303 	mul.w	r3, r2, r3
 8006414:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800641c:	b29a      	uxth	r2, r3
 800641e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006420:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006424:	895b      	ldrh	r3, [r3, #10]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d008      	beq.n	800643c <find_volume+0x228>
 800642a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642c:	895b      	ldrh	r3, [r3, #10]
 800642e:	461a      	mov	r2, r3
 8006430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006432:	895b      	ldrh	r3, [r3, #10]
 8006434:	3b01      	subs	r3, #1
 8006436:	4013      	ands	r3, r2
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <find_volume+0x22c>
 800643c:	230d      	movs	r3, #13
 800643e:	e12b      	b.n	8006698 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006442:	3330      	adds	r3, #48	; 0x30
 8006444:	3311      	adds	r3, #17
 8006446:	4618      	mov	r0, r3
 8006448:	f7fe fc88 	bl	8004d5c <ld_word>
 800644c:	4603      	mov	r3, r0
 800644e:	461a      	mov	r2, r3
 8006450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006452:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006456:	891b      	ldrh	r3, [r3, #8]
 8006458:	f003 030f 	and.w	r3, r3, #15
 800645c:	b29b      	uxth	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <find_volume+0x252>
 8006462:	230d      	movs	r3, #13
 8006464:	e118      	b.n	8006698 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006468:	3330      	adds	r3, #48	; 0x30
 800646a:	3313      	adds	r3, #19
 800646c:	4618      	mov	r0, r3
 800646e:	f7fe fc75 	bl	8004d5c <ld_word>
 8006472:	4603      	mov	r3, r0
 8006474:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006478:	2b00      	cmp	r3, #0
 800647a:	d106      	bne.n	800648a <find_volume+0x276>
 800647c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647e:	3330      	adds	r3, #48	; 0x30
 8006480:	3320      	adds	r3, #32
 8006482:	4618      	mov	r0, r3
 8006484:	f7fe fc82 	bl	8004d8c <ld_dword>
 8006488:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800648a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648c:	3330      	adds	r3, #48	; 0x30
 800648e:	330e      	adds	r3, #14
 8006490:	4618      	mov	r0, r3
 8006492:	f7fe fc63 	bl	8004d5c <ld_word>
 8006496:	4603      	mov	r3, r0
 8006498:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800649a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <find_volume+0x290>
 80064a0:	230d      	movs	r3, #13
 80064a2:	e0f9      	b.n	8006698 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80064a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80064a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064a8:	4413      	add	r3, r2
 80064aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064ac:	8912      	ldrh	r2, [r2, #8]
 80064ae:	0912      	lsrs	r2, r2, #4
 80064b0:	b292      	uxth	r2, r2
 80064b2:	4413      	add	r3, r2
 80064b4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80064b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d201      	bcs.n	80064c2 <find_volume+0x2ae>
 80064be:	230d      	movs	r3, #13
 80064c0:	e0ea      	b.n	8006698 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80064c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064ca:	8952      	ldrh	r2, [r2, #10]
 80064cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d103      	bne.n	80064e0 <find_volume+0x2cc>
 80064d8:	230d      	movs	r3, #13
 80064da:	e0dd      	b.n	8006698 <find_volume+0x484>
 80064dc:	200001ac 	.word	0x200001ac
		fmt = FS_FAT32;
 80064e0:	2303      	movs	r3, #3
 80064e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80064e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d802      	bhi.n	80064f6 <find_volume+0x2e2>
 80064f0:	2302      	movs	r3, #2
 80064f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d802      	bhi.n	8006506 <find_volume+0x2f2>
 8006500:	2301      	movs	r3, #1
 8006502:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	1c9a      	adds	r2, r3, #2
 800650a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800650e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006510:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006512:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006514:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006518:	441a      	add	r2, r3
 800651a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800651e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006522:	441a      	add	r2, r3
 8006524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006526:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006528:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800652c:	2b03      	cmp	r3, #3
 800652e:	d11e      	bne.n	800656e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006532:	3330      	adds	r3, #48	; 0x30
 8006534:	332a      	adds	r3, #42	; 0x2a
 8006536:	4618      	mov	r0, r3
 8006538:	f7fe fc10 	bl	8004d5c <ld_word>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <find_volume+0x332>
 8006542:	230d      	movs	r3, #13
 8006544:	e0a8      	b.n	8006698 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006548:	891b      	ldrh	r3, [r3, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <find_volume+0x33e>
 800654e:	230d      	movs	r3, #13
 8006550:	e0a2      	b.n	8006698 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006554:	3330      	adds	r3, #48	; 0x30
 8006556:	332c      	adds	r3, #44	; 0x2c
 8006558:	4618      	mov	r0, r3
 800655a:	f7fe fc17 	bl	8004d8c <ld_dword>
 800655e:	4602      	mov	r2, r0
 8006560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006562:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	647b      	str	r3, [r7, #68]	; 0x44
 800656c:	e01f      	b.n	80065ae <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800656e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006570:	891b      	ldrh	r3, [r3, #8]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <find_volume+0x366>
 8006576:	230d      	movs	r3, #13
 8006578:	e08e      	b.n	8006698 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800657a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657c:	6a1a      	ldr	r2, [r3, #32]
 800657e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006580:	441a      	add	r2, r3
 8006582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006584:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006586:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800658a:	2b02      	cmp	r3, #2
 800658c:	d103      	bne.n	8006596 <find_volume+0x382>
 800658e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	005b      	lsls	r3, r3, #1
 8006594:	e00a      	b.n	80065ac <find_volume+0x398>
 8006596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006598:	695a      	ldr	r2, [r3, #20]
 800659a:	4613      	mov	r3, r2
 800659c:	005b      	lsls	r3, r3, #1
 800659e:	4413      	add	r3, r2
 80065a0:	085a      	lsrs	r2, r3, #1
 80065a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80065ac:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80065ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b0:	699a      	ldr	r2, [r3, #24]
 80065b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065b4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80065b8:	0a5b      	lsrs	r3, r3, #9
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d201      	bcs.n	80065c2 <find_volume+0x3ae>
 80065be:	230d      	movs	r3, #13
 80065c0:	e06a      	b.n	8006698 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80065c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065c8:	611a      	str	r2, [r3, #16]
 80065ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065cc:	691a      	ldr	r2, [r3, #16]
 80065ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d0:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80065d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d4:	2280      	movs	r2, #128	; 0x80
 80065d6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80065d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065dc:	2b03      	cmp	r3, #3
 80065de:	d149      	bne.n	8006674 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80065e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e2:	3330      	adds	r3, #48	; 0x30
 80065e4:	3330      	adds	r3, #48	; 0x30
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7fe fbb8 	bl	8004d5c <ld_word>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d140      	bne.n	8006674 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80065f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065f4:	3301      	adds	r3, #1
 80065f6:	4619      	mov	r1, r3
 80065f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80065fa:	f7fe fe23 	bl	8005244 <move_window>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d137      	bne.n	8006674 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8006604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006606:	2200      	movs	r2, #0
 8006608:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800660a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660c:	3330      	adds	r3, #48	; 0x30
 800660e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006612:	4618      	mov	r0, r3
 8006614:	f7fe fba2 	bl	8004d5c <ld_word>
 8006618:	4603      	mov	r3, r0
 800661a:	461a      	mov	r2, r3
 800661c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006620:	429a      	cmp	r2, r3
 8006622:	d127      	bne.n	8006674 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006626:	3330      	adds	r3, #48	; 0x30
 8006628:	4618      	mov	r0, r3
 800662a:	f7fe fbaf 	bl	8004d8c <ld_dword>
 800662e:	4603      	mov	r3, r0
 8006630:	4a1b      	ldr	r2, [pc, #108]	; (80066a0 <find_volume+0x48c>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d11e      	bne.n	8006674 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006638:	3330      	adds	r3, #48	; 0x30
 800663a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800663e:	4618      	mov	r0, r3
 8006640:	f7fe fba4 	bl	8004d8c <ld_dword>
 8006644:	4603      	mov	r3, r0
 8006646:	4a17      	ldr	r2, [pc, #92]	; (80066a4 <find_volume+0x490>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d113      	bne.n	8006674 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800664c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664e:	3330      	adds	r3, #48	; 0x30
 8006650:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006654:	4618      	mov	r0, r3
 8006656:	f7fe fb99 	bl	8004d8c <ld_dword>
 800665a:	4602      	mov	r2, r0
 800665c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006662:	3330      	adds	r3, #48	; 0x30
 8006664:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006668:	4618      	mov	r0, r3
 800666a:	f7fe fb8f 	bl	8004d8c <ld_dword>
 800666e:	4602      	mov	r2, r0
 8006670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006672:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006676:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800667a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800667c:	4b0a      	ldr	r3, [pc, #40]	; (80066a8 <find_volume+0x494>)
 800667e:	881b      	ldrh	r3, [r3, #0]
 8006680:	3301      	adds	r3, #1
 8006682:	b29a      	uxth	r2, r3
 8006684:	4b08      	ldr	r3, [pc, #32]	; (80066a8 <find_volume+0x494>)
 8006686:	801a      	strh	r2, [r3, #0]
 8006688:	4b07      	ldr	r3, [pc, #28]	; (80066a8 <find_volume+0x494>)
 800668a:	881a      	ldrh	r2, [r3, #0]
 800668c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006690:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006692:	f7fe fd6f 	bl	8005174 <clear_lock>
#endif
	return FR_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3758      	adds	r7, #88	; 0x58
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	41615252 	.word	0x41615252
 80066a4:	61417272 	.word	0x61417272
 80066a8:	200001b0 	.word	0x200001b0

080066ac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80066b6:	2309      	movs	r3, #9
 80066b8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d01c      	beq.n	80066fa <validate+0x4e>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d018      	beq.n	80066fa <validate+0x4e>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d013      	beq.n	80066fa <validate+0x4e>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	889a      	ldrh	r2, [r3, #4]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	88db      	ldrh	r3, [r3, #6]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d10c      	bne.n	80066fa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	785b      	ldrb	r3, [r3, #1]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fe fa9a 	bl	8004c20 <disk_status>
 80066ec:	4603      	mov	r3, r0
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <validate+0x4e>
			res = FR_OK;
 80066f6:	2300      	movs	r3, #0
 80066f8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d102      	bne.n	8006706 <validate+0x5a>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	e000      	b.n	8006708 <validate+0x5c>
 8006706:	2300      	movs	r3, #0
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	6013      	str	r3, [r2, #0]
	return res;
 800670c:	7bfb      	ldrb	r3, [r7, #15]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
	...

08006718 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b088      	sub	sp, #32
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	4613      	mov	r3, r2
 8006724:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800672a:	f107 0310 	add.w	r3, r7, #16
 800672e:	4618      	mov	r0, r3
 8006730:	f7ff fcd5 	bl	80060de <get_ldnumber>
 8006734:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	2b00      	cmp	r3, #0
 800673a:	da01      	bge.n	8006740 <f_mount+0x28>
 800673c:	230b      	movs	r3, #11
 800673e:	e02b      	b.n	8006798 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006740:	4a17      	ldr	r2, [pc, #92]	; (80067a0 <f_mount+0x88>)
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006748:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d005      	beq.n	800675c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006750:	69b8      	ldr	r0, [r7, #24]
 8006752:	f7fe fd0f 	bl	8005174 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	2200      	movs	r2, #0
 800675a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d002      	beq.n	8006768 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	490d      	ldr	r1, [pc, #52]	; (80067a0 <f_mount+0x88>)
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d002      	beq.n	800677e <f_mount+0x66>
 8006778:	79fb      	ldrb	r3, [r7, #7]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d001      	beq.n	8006782 <f_mount+0x6a>
 800677e:	2300      	movs	r3, #0
 8006780:	e00a      	b.n	8006798 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006782:	f107 010c 	add.w	r1, r7, #12
 8006786:	f107 0308 	add.w	r3, r7, #8
 800678a:	2200      	movs	r2, #0
 800678c:	4618      	mov	r0, r3
 800678e:	f7ff fd41 	bl	8006214 <find_volume>
 8006792:	4603      	mov	r3, r0
 8006794:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006796:	7dfb      	ldrb	r3, [r7, #23]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3720      	adds	r7, #32
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	200001ac 	.word	0x200001ac

080067a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b098      	sub	sp, #96	; 0x60
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	4613      	mov	r3, r2
 80067b0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <f_open+0x18>
 80067b8:	2309      	movs	r3, #9
 80067ba:	e1ad      	b.n	8006b18 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80067bc:	79fb      	ldrb	r3, [r7, #7]
 80067be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067c2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80067c4:	79fa      	ldrb	r2, [r7, #7]
 80067c6:	f107 0110 	add.w	r1, r7, #16
 80067ca:	f107 0308 	add.w	r3, r7, #8
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7ff fd20 	bl	8006214 <find_volume>
 80067d4:	4603      	mov	r3, r0
 80067d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80067da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f040 8191 	bne.w	8006b06 <f_open+0x362>
		dj.obj.fs = fs;
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	f107 0314 	add.w	r3, r7, #20
 80067ee:	4611      	mov	r1, r2
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7ff fc03 	bl	8005ffc <follow_path>
 80067f6:	4603      	mov	r3, r0
 80067f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80067fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006800:	2b00      	cmp	r3, #0
 8006802:	d11a      	bne.n	800683a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006804:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006808:	b25b      	sxtb	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	da03      	bge.n	8006816 <f_open+0x72>
				res = FR_INVALID_NAME;
 800680e:	2306      	movs	r3, #6
 8006810:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006814:	e011      	b.n	800683a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006816:	79fb      	ldrb	r3, [r7, #7]
 8006818:	f023 0301 	bic.w	r3, r3, #1
 800681c:	2b00      	cmp	r3, #0
 800681e:	bf14      	ite	ne
 8006820:	2301      	movne	r3, #1
 8006822:	2300      	moveq	r3, #0
 8006824:	b2db      	uxtb	r3, r3
 8006826:	461a      	mov	r2, r3
 8006828:	f107 0314 	add.w	r3, r7, #20
 800682c:	4611      	mov	r1, r2
 800682e:	4618      	mov	r0, r3
 8006830:	f7fe fb94 	bl	8004f5c <chk_lock>
 8006834:	4603      	mov	r3, r0
 8006836:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800683a:	79fb      	ldrb	r3, [r7, #7]
 800683c:	f003 031c 	and.w	r3, r3, #28
 8006840:	2b00      	cmp	r3, #0
 8006842:	d07f      	beq.n	8006944 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006844:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006848:	2b00      	cmp	r3, #0
 800684a:	d017      	beq.n	800687c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800684c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006850:	2b04      	cmp	r3, #4
 8006852:	d10e      	bne.n	8006872 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006854:	f7fe fbde 	bl	8005014 <enq_lock>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d006      	beq.n	800686c <f_open+0xc8>
 800685e:	f107 0314 	add.w	r3, r7, #20
 8006862:	4618      	mov	r0, r3
 8006864:	f7ff fae6 	bl	8005e34 <dir_register>
 8006868:	4603      	mov	r3, r0
 800686a:	e000      	b.n	800686e <f_open+0xca>
 800686c:	2312      	movs	r3, #18
 800686e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006872:	79fb      	ldrb	r3, [r7, #7]
 8006874:	f043 0308 	orr.w	r3, r3, #8
 8006878:	71fb      	strb	r3, [r7, #7]
 800687a:	e010      	b.n	800689e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800687c:	7ebb      	ldrb	r3, [r7, #26]
 800687e:	f003 0311 	and.w	r3, r3, #17
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <f_open+0xea>
					res = FR_DENIED;
 8006886:	2307      	movs	r3, #7
 8006888:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800688c:	e007      	b.n	800689e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800688e:	79fb      	ldrb	r3, [r7, #7]
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b00      	cmp	r3, #0
 8006896:	d002      	beq.n	800689e <f_open+0xfa>
 8006898:	2308      	movs	r3, #8
 800689a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800689e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d168      	bne.n	8006978 <f_open+0x1d4>
 80068a6:	79fb      	ldrb	r3, [r7, #7]
 80068a8:	f003 0308 	and.w	r3, r3, #8
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d063      	beq.n	8006978 <f_open+0x1d4>
				dw = GET_FATTIME();
 80068b0:	f7fd fc78 	bl	80041a4 <get_fattime>
 80068b4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80068b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b8:	330e      	adds	r3, #14
 80068ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80068bc:	4618      	mov	r0, r3
 80068be:	f7fe faa3 	bl	8004e08 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80068c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c4:	3316      	adds	r3, #22
 80068c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7fe fa9d 	bl	8004e08 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80068ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d0:	330b      	adds	r3, #11
 80068d2:	2220      	movs	r2, #32
 80068d4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068da:	4611      	mov	r1, r2
 80068dc:	4618      	mov	r0, r3
 80068de:	f7ff f9b8 	bl	8005c52 <ld_clust>
 80068e2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80068e8:	2200      	movs	r2, #0
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7ff f9d0 	bl	8005c90 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80068f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f2:	331c      	adds	r3, #28
 80068f4:	2100      	movs	r1, #0
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fe fa86 	bl	8004e08 <st_dword>
					fs->wflag = 1;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	2201      	movs	r2, #1
 8006900:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006904:	2b00      	cmp	r3, #0
 8006906:	d037      	beq.n	8006978 <f_open+0x1d4>
						dw = fs->winsect;
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800690e:	f107 0314 	add.w	r3, r7, #20
 8006912:	2200      	movs	r2, #0
 8006914:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006916:	4618      	mov	r0, r3
 8006918:	f7fe fee3 	bl	80056e2 <remove_chain>
 800691c:	4603      	mov	r3, r0
 800691e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006922:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006926:	2b00      	cmp	r3, #0
 8006928:	d126      	bne.n	8006978 <f_open+0x1d4>
							res = move_window(fs, dw);
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800692e:	4618      	mov	r0, r3
 8006930:	f7fe fc88 	bl	8005244 <move_window>
 8006934:	4603      	mov	r3, r0
 8006936:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800693e:	3a01      	subs	r2, #1
 8006940:	60da      	str	r2, [r3, #12]
 8006942:	e019      	b.n	8006978 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006944:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006948:	2b00      	cmp	r3, #0
 800694a:	d115      	bne.n	8006978 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800694c:	7ebb      	ldrb	r3, [r7, #26]
 800694e:	f003 0310 	and.w	r3, r3, #16
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <f_open+0x1ba>
					res = FR_NO_FILE;
 8006956:	2304      	movs	r3, #4
 8006958:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800695c:	e00c      	b.n	8006978 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800695e:	79fb      	ldrb	r3, [r7, #7]
 8006960:	f003 0302 	and.w	r3, r3, #2
 8006964:	2b00      	cmp	r3, #0
 8006966:	d007      	beq.n	8006978 <f_open+0x1d4>
 8006968:	7ebb      	ldrb	r3, [r7, #26]
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <f_open+0x1d4>
						res = FR_DENIED;
 8006972:	2307      	movs	r3, #7
 8006974:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006978:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800697c:	2b00      	cmp	r3, #0
 800697e:	d128      	bne.n	80069d2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006980:	79fb      	ldrb	r3, [r7, #7]
 8006982:	f003 0308 	and.w	r3, r3, #8
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800698a:	79fb      	ldrb	r3, [r7, #7]
 800698c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006990:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800699a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80069a0:	79fb      	ldrb	r3, [r7, #7]
 80069a2:	f023 0301 	bic.w	r3, r3, #1
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	bf14      	ite	ne
 80069aa:	2301      	movne	r3, #1
 80069ac:	2300      	moveq	r3, #0
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	461a      	mov	r2, r3
 80069b2:	f107 0314 	add.w	r3, r7, #20
 80069b6:	4611      	mov	r1, r2
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7fe fb4d 	bl	8005058 <inc_lock>
 80069be:	4602      	mov	r2, r0
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d102      	bne.n	80069d2 <f_open+0x22e>
 80069cc:	2302      	movs	r3, #2
 80069ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80069d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f040 8095 	bne.w	8006b06 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069e0:	4611      	mov	r1, r2
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7ff f935 	bl	8005c52 <ld_clust>
 80069e8:	4602      	mov	r2, r0
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80069ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f0:	331c      	adds	r3, #28
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fe f9ca 	bl	8004d8c <ld_dword>
 80069f8:	4602      	mov	r2, r0
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	88da      	ldrh	r2, [r3, #6]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	79fa      	ldrb	r2, [r7, #7]
 8006a16:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	3330      	adds	r3, #48	; 0x30
 8006a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a32:	2100      	movs	r1, #0
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7fe fa34 	bl	8004ea2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006a3a:	79fb      	ldrb	r3, [r7, #7]
 8006a3c:	f003 0320 	and.w	r3, r3, #32
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d060      	beq.n	8006b06 <f_open+0x362>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d05c      	beq.n	8006b06 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	68da      	ldr	r2, [r3, #12]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	895b      	ldrh	r3, [r3, #10]
 8006a58:	025b      	lsls	r3, r3, #9
 8006a5a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	657b      	str	r3, [r7, #84]	; 0x54
 8006a68:	e016      	b.n	8006a98 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fe fca3 	bl	80053ba <get_fat>
 8006a74:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006a76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d802      	bhi.n	8006a82 <f_open+0x2de>
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006a82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a88:	d102      	bne.n	8006a90 <f_open+0x2ec>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006a90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	657b      	str	r3, [r7, #84]	; 0x54
 8006a98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d103      	bne.n	8006aa8 <f_open+0x304>
 8006aa0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d8e0      	bhi.n	8006a6a <f_open+0x2c6>
				}
				fp->clust = clst;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006aac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006aae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d127      	bne.n	8006b06 <f_open+0x362>
 8006ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d022      	beq.n	8006b06 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fe fc59 	bl	800537c <clust2sect>
 8006aca:	6478      	str	r0, [r7, #68]	; 0x44
 8006acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d103      	bne.n	8006ada <f_open+0x336>
						res = FR_INT_ERR;
 8006ad2:	2302      	movs	r3, #2
 8006ad4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006ad8:	e015      	b.n	8006b06 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006adc:	0a5a      	lsrs	r2, r3, #9
 8006ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ae0:	441a      	add	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	7858      	ldrb	r0, [r3, #1]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6a1a      	ldr	r2, [r3, #32]
 8006af4:	2301      	movs	r3, #1
 8006af6:	f7fe f8d3 	bl	8004ca0 <disk_read>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d002      	beq.n	8006b06 <f_open+0x362>
 8006b00:	2301      	movs	r3, #1
 8006b02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006b06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d002      	beq.n	8006b14 <f_open+0x370>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006b14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3760      	adds	r7, #96	; 0x60
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b08e      	sub	sp, #56	; 0x38
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2200      	movs	r2, #0
 8006b36:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f107 0214 	add.w	r2, r7, #20
 8006b3e:	4611      	mov	r1, r2
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7ff fdb3 	bl	80066ac <validate>
 8006b46:	4603      	mov	r3, r0
 8006b48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006b4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d107      	bne.n	8006b64 <f_read+0x44>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	7d5b      	ldrb	r3, [r3, #21]
 8006b58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006b5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d002      	beq.n	8006b6a <f_read+0x4a>
 8006b64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b68:	e115      	b.n	8006d96 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	7d1b      	ldrb	r3, [r3, #20]
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <f_read+0x5a>
 8006b76:	2307      	movs	r3, #7
 8006b78:	e10d      	b.n	8006d96 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	68da      	ldr	r2, [r3, #12]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	f240 80fe 	bls.w	8006d8c <f_read+0x26c>
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006b94:	e0fa      	b.n	8006d8c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	f040 80c6 	bne.w	8006d30 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	0a5b      	lsrs	r3, r3, #9
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	8952      	ldrh	r2, [r2, #10]
 8006bae:	3a01      	subs	r2, #1
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d12f      	bne.n	8006c1a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d103      	bne.n	8006bca <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	633b      	str	r3, [r7, #48]	; 0x30
 8006bc8:	e013      	b.n	8006bf2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d007      	beq.n	8006be2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f7fe fe7f 	bl	80058dc <clmt_clust>
 8006bde:	6338      	str	r0, [r7, #48]	; 0x30
 8006be0:	e007      	b.n	8006bf2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	69db      	ldr	r3, [r3, #28]
 8006be8:	4619      	mov	r1, r3
 8006bea:	4610      	mov	r0, r2
 8006bec:	f7fe fbe5 	bl	80053ba <get_fat>
 8006bf0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d804      	bhi.n	8006c02 <f_read+0xe2>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	755a      	strb	r2, [r3, #21]
 8006bfe:	2302      	movs	r3, #2
 8006c00:	e0c9      	b.n	8006d96 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c08:	d104      	bne.n	8006c14 <f_read+0xf4>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	755a      	strb	r2, [r3, #21]
 8006c10:	2301      	movs	r3, #1
 8006c12:	e0c0      	b.n	8006d96 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c18:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	4619      	mov	r1, r3
 8006c22:	4610      	mov	r0, r2
 8006c24:	f7fe fbaa 	bl	800537c <clust2sect>
 8006c28:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d104      	bne.n	8006c3a <f_read+0x11a>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2202      	movs	r2, #2
 8006c34:	755a      	strb	r2, [r3, #21]
 8006c36:	2302      	movs	r3, #2
 8006c38:	e0ad      	b.n	8006d96 <f_read+0x276>
			sect += csect;
 8006c3a:	69ba      	ldr	r2, [r7, #24]
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	4413      	add	r3, r2
 8006c40:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	0a5b      	lsrs	r3, r3, #9
 8006c46:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d039      	beq.n	8006cc2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006c4e:	69fa      	ldr	r2, [r7, #28]
 8006c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c52:	4413      	add	r3, r2
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	8952      	ldrh	r2, [r2, #10]
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d905      	bls.n	8006c68 <f_read+0x148>
					cc = fs->csize - csect;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	895b      	ldrh	r3, [r3, #10]
 8006c60:	461a      	mov	r2, r3
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	7858      	ldrb	r0, [r3, #1]
 8006c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6e:	69ba      	ldr	r2, [r7, #24]
 8006c70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c72:	f7fe f815 	bl	8004ca0 <disk_read>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d004      	beq.n	8006c86 <f_read+0x166>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	755a      	strb	r2, [r3, #21]
 8006c82:	2301      	movs	r3, #1
 8006c84:	e087      	b.n	8006d96 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	7d1b      	ldrb	r3, [r3, #20]
 8006c8a:	b25b      	sxtb	r3, r3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	da14      	bge.n	8006cba <f_read+0x19a>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6a1a      	ldr	r2, [r3, #32]
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d90d      	bls.n	8006cba <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6a1a      	ldr	r2, [r3, #32]
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	025b      	lsls	r3, r3, #9
 8006ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006caa:	18d0      	adds	r0, r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	3330      	adds	r3, #48	; 0x30
 8006cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	f7fe f8d3 	bl	8004e60 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbc:	025b      	lsls	r3, r3, #9
 8006cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006cc0:	e050      	b.n	8006d64 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d02e      	beq.n	8006d2a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	7d1b      	ldrb	r3, [r3, #20]
 8006cd0:	b25b      	sxtb	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	da18      	bge.n	8006d08 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	7858      	ldrb	r0, [r3, #1]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6a1a      	ldr	r2, [r3, #32]
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	f7fd fffb 	bl	8004ce0 <disk_write>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d004      	beq.n	8006cfa <f_read+0x1da>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	755a      	strb	r2, [r3, #21]
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e04d      	b.n	8006d96 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	7d1b      	ldrb	r3, [r3, #20]
 8006cfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	7858      	ldrb	r0, [r3, #1]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006d12:	2301      	movs	r3, #1
 8006d14:	69ba      	ldr	r2, [r7, #24]
 8006d16:	f7fd ffc3 	bl	8004ca0 <disk_read>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d004      	beq.n	8006d2a <f_read+0x20a>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2201      	movs	r2, #1
 8006d24:	755a      	strb	r2, [r3, #21]
 8006d26:	2301      	movs	r3, #1
 8006d28:	e035      	b.n	8006d96 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	69ba      	ldr	r2, [r7, #24]
 8006d2e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d38:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d901      	bls.n	8006d4a <f_read+0x22a>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d58:	4413      	add	r3, r2
 8006d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d60:	f7fe f87e 	bl	8004e60 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d68:	4413      	add	r3, r2
 8006d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	699a      	ldr	r2, [r3, #24]
 8006d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d72:	441a      	add	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	619a      	str	r2, [r3, #24]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7e:	441a      	add	r2, r3
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f47f af01 	bne.w	8006b96 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3738      	adds	r7, #56	; 0x38
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b090      	sub	sp, #64	; 0x40
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f107 0208 	add.w	r2, r7, #8
 8006dae:	4611      	mov	r1, r2
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7ff fc7b 	bl	80066ac <validate>
 8006db6:	4603      	mov	r3, r0
 8006db8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8006dbc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d103      	bne.n	8006dcc <f_lseek+0x2e>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	7d5b      	ldrb	r3, [r3, #21]
 8006dc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8006dcc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d002      	beq.n	8006dda <f_lseek+0x3c>
 8006dd4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006dd8:	e1e6      	b.n	80071a8 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f000 80d1 	beq.w	8006f86 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dea:	d15a      	bne.n	8006ea2 <f_lseek+0x104>
			tbl = fp->cltbl;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df0:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	1d1a      	adds	r2, r3, #4
 8006df6:	627a      	str	r2, [r7, #36]	; 0x24
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	617b      	str	r3, [r7, #20]
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8006e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d03a      	beq.n	8006e82 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0e:	613b      	str	r3, [r7, #16]
 8006e10:	2300      	movs	r3, #0
 8006e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e16:	3302      	adds	r3, #2
 8006e18:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1c:	60fb      	str	r3, [r7, #12]
 8006e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e20:	3301      	adds	r3, #1
 8006e22:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fe fac6 	bl	80053ba <get_fat>
 8006e2e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8006e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d804      	bhi.n	8006e40 <f_lseek+0xa2>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2202      	movs	r2, #2
 8006e3a:	755a      	strb	r2, [r3, #21]
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	e1b3      	b.n	80071a8 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e46:	d104      	bne.n	8006e52 <f_lseek+0xb4>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	755a      	strb	r2, [r3, #21]
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e1aa      	b.n	80071a8 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	3301      	adds	r3, #1
 8006e56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d0de      	beq.n	8006e1a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8006e5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d809      	bhi.n	8006e78 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	1d1a      	adds	r2, r3, #4
 8006e68:	627a      	str	r2, [r7, #36]	; 0x24
 8006e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e6c:	601a      	str	r2, [r3, #0]
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e70:	1d1a      	adds	r2, r3, #4
 8006e72:	627a      	str	r2, [r7, #36]	; 0x24
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	695b      	ldr	r3, [r3, #20]
 8006e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d3c4      	bcc.n	8006e0c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e88:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8006e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d803      	bhi.n	8006e9a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e94:	2200      	movs	r2, #0
 8006e96:	601a      	str	r2, [r3, #0]
 8006e98:	e184      	b.n	80071a4 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8006e9a:	2311      	movs	r3, #17
 8006e9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006ea0:	e180      	b.n	80071a4 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d902      	bls.n	8006eb2 <f_lseek+0x114>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f000 8172 	beq.w	80071a4 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7fe fd08 	bl	80058dc <clmt_clust>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8006ed2:	68ba      	ldr	r2, [r7, #8]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	69db      	ldr	r3, [r3, #28]
 8006ed8:	4619      	mov	r1, r3
 8006eda:	4610      	mov	r0, r2
 8006edc:	f7fe fa4e 	bl	800537c <clust2sect>
 8006ee0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d104      	bne.n	8006ef2 <f_lseek+0x154>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2202      	movs	r2, #2
 8006eec:	755a      	strb	r2, [r3, #21]
 8006eee:	2302      	movs	r3, #2
 8006ef0:	e15a      	b.n	80071a8 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	0a5b      	lsrs	r3, r3, #9
 8006ef8:	68ba      	ldr	r2, [r7, #8]
 8006efa:	8952      	ldrh	r2, [r2, #10]
 8006efc:	3a01      	subs	r2, #1
 8006efe:	4013      	ands	r3, r2
 8006f00:	69ba      	ldr	r2, [r7, #24]
 8006f02:	4413      	add	r3, r2
 8006f04:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f000 8148 	beq.w	80071a4 <f_lseek+0x406>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a1b      	ldr	r3, [r3, #32]
 8006f18:	69ba      	ldr	r2, [r7, #24]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	f000 8142 	beq.w	80071a4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	7d1b      	ldrb	r3, [r3, #20]
 8006f24:	b25b      	sxtb	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	da18      	bge.n	8006f5c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	7858      	ldrb	r0, [r3, #1]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a1a      	ldr	r2, [r3, #32]
 8006f38:	2301      	movs	r3, #1
 8006f3a:	f7fd fed1 	bl	8004ce0 <disk_write>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d004      	beq.n	8006f4e <f_lseek+0x1b0>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	755a      	strb	r2, [r3, #21]
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e12c      	b.n	80071a8 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	7d1b      	ldrb	r3, [r3, #20]
 8006f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f56:	b2da      	uxtb	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	7858      	ldrb	r0, [r3, #1]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006f66:	2301      	movs	r3, #1
 8006f68:	69ba      	ldr	r2, [r7, #24]
 8006f6a:	f7fd fe99 	bl	8004ca0 <disk_read>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d004      	beq.n	8006f7e <f_lseek+0x1e0>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	755a      	strb	r2, [r3, #21]
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e114      	b.n	80071a8 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	69ba      	ldr	r2, [r7, #24]
 8006f82:	621a      	str	r2, [r3, #32]
 8006f84:	e10e      	b.n	80071a4 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d908      	bls.n	8006fa2 <f_lseek+0x204>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	7d1b      	ldrb	r3, [r3, #20]
 8006f94:	f003 0302 	and.w	r3, r3, #2
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d102      	bne.n	8006fa2 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	637b      	str	r3, [r7, #52]	; 0x34
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fb0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f000 80a7 	beq.w	8007108 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	895b      	ldrh	r3, [r3, #10]
 8006fbe:	025b      	lsls	r3, r3, #9
 8006fc0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d01b      	beq.n	8007000 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	1e5a      	subs	r2, r3, #1
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	fbb2 f2f3 	udiv	r2, r2, r3
 8006fd2:	6a3b      	ldr	r3, [r7, #32]
 8006fd4:	1e59      	subs	r1, r3, #1
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d30f      	bcc.n	8007000 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8006fe0:	6a3b      	ldr	r3, [r7, #32]
 8006fe2:	1e5a      	subs	r2, r3, #1
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	425b      	negs	r3, r3
 8006fe8:	401a      	ands	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	69db      	ldr	r3, [r3, #28]
 8006ffc:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ffe:	e022      	b.n	8007046 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007008:	2b00      	cmp	r3, #0
 800700a:	d119      	bne.n	8007040 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2100      	movs	r1, #0
 8007010:	4618      	mov	r0, r3
 8007012:	f7fe fbcb 	bl	80057ac <create_chain>
 8007016:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701a:	2b01      	cmp	r3, #1
 800701c:	d104      	bne.n	8007028 <f_lseek+0x28a>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2202      	movs	r2, #2
 8007022:	755a      	strb	r2, [r3, #21]
 8007024:	2302      	movs	r3, #2
 8007026:	e0bf      	b.n	80071a8 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800702e:	d104      	bne.n	800703a <f_lseek+0x29c>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	755a      	strb	r2, [r3, #21]
 8007036:	2301      	movs	r3, #1
 8007038:	e0b6      	b.n	80071a8 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800703e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007044:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8007046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007048:	2b00      	cmp	r3, #0
 800704a:	d05d      	beq.n	8007108 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800704c:	e03a      	b.n	80070c4 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	603b      	str	r3, [r7, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	699a      	ldr	r2, [r3, #24]
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	441a      	add	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	7d1b      	ldrb	r3, [r3, #20]
 8007066:	f003 0302 	and.w	r3, r3, #2
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00b      	beq.n	8007086 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007072:	4618      	mov	r0, r3
 8007074:	f7fe fb9a 	bl	80057ac <create_chain>
 8007078:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800707a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707c:	2b00      	cmp	r3, #0
 800707e:	d108      	bne.n	8007092 <f_lseek+0x2f4>
							ofs = 0; break;
 8007080:	2300      	movs	r3, #0
 8007082:	603b      	str	r3, [r7, #0]
 8007084:	e022      	b.n	80070cc <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800708a:	4618      	mov	r0, r3
 800708c:	f7fe f995 	bl	80053ba <get_fat>
 8007090:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007098:	d104      	bne.n	80070a4 <f_lseek+0x306>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	755a      	strb	r2, [r3, #21]
 80070a0:	2301      	movs	r3, #1
 80070a2:	e081      	b.n	80071a8 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80070a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d904      	bls.n	80070b4 <f_lseek+0x316>
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	695b      	ldr	r3, [r3, #20]
 80070ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d304      	bcc.n	80070be <f_lseek+0x320>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2202      	movs	r2, #2
 80070b8:	755a      	strb	r2, [r3, #21]
 80070ba:	2302      	movs	r3, #2
 80070bc:	e074      	b.n	80071a8 <f_lseek+0x40a>
					fp->clust = clst;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070c2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80070c4:	683a      	ldr	r2, [r7, #0]
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d8c0      	bhi.n	800704e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	699a      	ldr	r2, [r3, #24]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	441a      	add	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d012      	beq.n	8007108 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fe f948 	bl	800537c <clust2sect>
 80070ec:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80070ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d104      	bne.n	80070fe <f_lseek+0x360>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2202      	movs	r2, #2
 80070f8:	755a      	strb	r2, [r3, #21]
 80070fa:	2302      	movs	r3, #2
 80070fc:	e054      	b.n	80071a8 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	0a5b      	lsrs	r3, r3, #9
 8007102:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007104:	4413      	add	r3, r2
 8007106:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	699a      	ldr	r2, [r3, #24]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	429a      	cmp	r2, r3
 8007112:	d90a      	bls.n	800712a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	699a      	ldr	r2, [r3, #24]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	7d1b      	ldrb	r3, [r3, #20]
 8007120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007124:	b2da      	uxtb	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007132:	2b00      	cmp	r3, #0
 8007134:	d036      	beq.n	80071a4 <f_lseek+0x406>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800713c:	429a      	cmp	r2, r3
 800713e:	d031      	beq.n	80071a4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	7d1b      	ldrb	r3, [r3, #20]
 8007144:	b25b      	sxtb	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	da18      	bge.n	800717c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	7858      	ldrb	r0, [r3, #1]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a1a      	ldr	r2, [r3, #32]
 8007158:	2301      	movs	r3, #1
 800715a:	f7fd fdc1 	bl	8004ce0 <disk_write>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d004      	beq.n	800716e <f_lseek+0x3d0>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	755a      	strb	r2, [r3, #21]
 800716a:	2301      	movs	r3, #1
 800716c:	e01c      	b.n	80071a8 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	7d1b      	ldrb	r3, [r3, #20]
 8007172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007176:	b2da      	uxtb	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	7858      	ldrb	r0, [r3, #1]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007186:	2301      	movs	r3, #1
 8007188:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800718a:	f7fd fd89 	bl	8004ca0 <disk_read>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d004      	beq.n	800719e <f_lseek+0x400>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	755a      	strb	r2, [r3, #21]
 800719a:	2301      	movs	r3, #1
 800719c:	e004      	b.n	80071a8 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071a2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80071a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3740      	adds	r7, #64	; 0x40
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b09e      	sub	sp, #120	; 0x78
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80071b8:	2300      	movs	r3, #0
 80071ba:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80071bc:	f107 010c 	add.w	r1, r7, #12
 80071c0:	1d3b      	adds	r3, r7, #4
 80071c2:	2202      	movs	r2, #2
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7ff f825 	bl	8006214 <find_volume>
 80071ca:	4603      	mov	r3, r0
 80071cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 80071d4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f040 808e 	bne.w	80072fa <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80071e4:	4611      	mov	r1, r2
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7fe ff08 	bl	8005ffc <follow_path>
 80071ec:	4603      	mov	r3, r0
 80071ee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80071f2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d108      	bne.n	800720c <f_unlink+0x5c>
 80071fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80071fe:	2102      	movs	r1, #2
 8007200:	4618      	mov	r0, r3
 8007202:	f7fd feab 	bl	8004f5c <chk_lock>
 8007206:	4603      	mov	r3, r0
 8007208:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800720c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007210:	2b00      	cmp	r3, #0
 8007212:	d172      	bne.n	80072fa <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8007214:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007218:	b25b      	sxtb	r3, r3
 800721a:	2b00      	cmp	r3, #0
 800721c:	da03      	bge.n	8007226 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800721e:	2306      	movs	r3, #6
 8007220:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007224:	e008      	b.n	8007238 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8007226:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	2b00      	cmp	r3, #0
 8007230:	d002      	beq.n	8007238 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8007232:	2307      	movs	r3, #7
 8007234:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8007238:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800723c:	2b00      	cmp	r3, #0
 800723e:	d134      	bne.n	80072aa <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007244:	4611      	mov	r1, r2
 8007246:	4618      	mov	r0, r3
 8007248:	f7fe fd03 	bl	8005c52 <ld_clust>
 800724c:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800724e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007252:	f003 0310 	and.w	r3, r3, #16
 8007256:	2b00      	cmp	r3, #0
 8007258:	d027      	beq.n	80072aa <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800725e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007260:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8007262:	f107 0310 	add.w	r3, r7, #16
 8007266:	2100      	movs	r1, #0
 8007268:	4618      	mov	r0, r3
 800726a:	f7fe fb6b 	bl	8005944 <dir_sdi>
 800726e:	4603      	mov	r3, r0
 8007270:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8007274:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007278:	2b00      	cmp	r3, #0
 800727a:	d116      	bne.n	80072aa <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800727c:	f107 0310 	add.w	r3, r7, #16
 8007280:	2100      	movs	r1, #0
 8007282:	4618      	mov	r0, r3
 8007284:	f7fe fd24 	bl	8005cd0 <dir_read>
 8007288:	4603      	mov	r3, r0
 800728a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800728e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007292:	2b00      	cmp	r3, #0
 8007294:	d102      	bne.n	800729c <f_unlink+0xec>
 8007296:	2307      	movs	r3, #7
 8007298:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800729c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80072a0:	2b04      	cmp	r3, #4
 80072a2:	d102      	bne.n	80072aa <f_unlink+0xfa>
 80072a4:	2300      	movs	r3, #0
 80072a6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80072aa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d123      	bne.n	80072fa <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80072b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7fe fdee 	bl	8005e98 <dir_remove>
 80072bc:	4603      	mov	r3, r0
 80072be:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80072c2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10c      	bne.n	80072e4 <f_unlink+0x134>
 80072ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d009      	beq.n	80072e4 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80072d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80072d4:	2200      	movs	r2, #0
 80072d6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80072d8:	4618      	mov	r0, r3
 80072da:	f7fe fa02 	bl	80056e2 <remove_chain>
 80072de:	4603      	mov	r3, r0
 80072e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80072e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d106      	bne.n	80072fa <f_unlink+0x14a>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7fd ffd6 	bl	80052a0 <sync_fs>
 80072f4:	4603      	mov	r3, r0
 80072f6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80072fa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3778      	adds	r7, #120	; 0x78
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
	...

08007308 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007308:	b480      	push	{r7}
 800730a:	b087      	sub	sp, #28
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	4613      	mov	r3, r2
 8007314:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007316:	2301      	movs	r3, #1
 8007318:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800731a:	2300      	movs	r3, #0
 800731c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800731e:	4b1f      	ldr	r3, [pc, #124]	; (800739c <FATFS_LinkDriverEx+0x94>)
 8007320:	7a5b      	ldrb	r3, [r3, #9]
 8007322:	b2db      	uxtb	r3, r3
 8007324:	2b00      	cmp	r3, #0
 8007326:	d131      	bne.n	800738c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007328:	4b1c      	ldr	r3, [pc, #112]	; (800739c <FATFS_LinkDriverEx+0x94>)
 800732a:	7a5b      	ldrb	r3, [r3, #9]
 800732c:	b2db      	uxtb	r3, r3
 800732e:	461a      	mov	r2, r3
 8007330:	4b1a      	ldr	r3, [pc, #104]	; (800739c <FATFS_LinkDriverEx+0x94>)
 8007332:	2100      	movs	r1, #0
 8007334:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007336:	4b19      	ldr	r3, [pc, #100]	; (800739c <FATFS_LinkDriverEx+0x94>)
 8007338:	7a5b      	ldrb	r3, [r3, #9]
 800733a:	b2db      	uxtb	r3, r3
 800733c:	4a17      	ldr	r2, [pc, #92]	; (800739c <FATFS_LinkDriverEx+0x94>)
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007346:	4b15      	ldr	r3, [pc, #84]	; (800739c <FATFS_LinkDriverEx+0x94>)
 8007348:	7a5b      	ldrb	r3, [r3, #9]
 800734a:	b2db      	uxtb	r3, r3
 800734c:	461a      	mov	r2, r3
 800734e:	4b13      	ldr	r3, [pc, #76]	; (800739c <FATFS_LinkDriverEx+0x94>)
 8007350:	4413      	add	r3, r2
 8007352:	79fa      	ldrb	r2, [r7, #7]
 8007354:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007356:	4b11      	ldr	r3, [pc, #68]	; (800739c <FATFS_LinkDriverEx+0x94>)
 8007358:	7a5b      	ldrb	r3, [r3, #9]
 800735a:	b2db      	uxtb	r3, r3
 800735c:	1c5a      	adds	r2, r3, #1
 800735e:	b2d1      	uxtb	r1, r2
 8007360:	4a0e      	ldr	r2, [pc, #56]	; (800739c <FATFS_LinkDriverEx+0x94>)
 8007362:	7251      	strb	r1, [r2, #9]
 8007364:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007366:	7dbb      	ldrb	r3, [r7, #22]
 8007368:	3330      	adds	r3, #48	; 0x30
 800736a:	b2da      	uxtb	r2, r3
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	3301      	adds	r3, #1
 8007374:	223a      	movs	r2, #58	; 0x3a
 8007376:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	3302      	adds	r3, #2
 800737c:	222f      	movs	r2, #47	; 0x2f
 800737e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	3303      	adds	r3, #3
 8007384:	2200      	movs	r2, #0
 8007386:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007388:	2300      	movs	r3, #0
 800738a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800738c:	7dfb      	ldrb	r3, [r7, #23]
}
 800738e:	4618      	mov	r0, r3
 8007390:	371c      	adds	r7, #28
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	200001d4 	.word	0x200001d4

080073a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80073aa:	2200      	movs	r2, #0
 80073ac:	6839      	ldr	r1, [r7, #0]
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f7ff ffaa 	bl	8007308 <FATFS_LinkDriverEx>
 80073b4:	4603      	mov	r3, r0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
	...

080073c0 <__errno>:
 80073c0:	4b01      	ldr	r3, [pc, #4]	; (80073c8 <__errno+0x8>)
 80073c2:	6818      	ldr	r0, [r3, #0]
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	20000024 	.word	0x20000024

080073cc <__libc_init_array>:
 80073cc:	b570      	push	{r4, r5, r6, lr}
 80073ce:	4d0d      	ldr	r5, [pc, #52]	; (8007404 <__libc_init_array+0x38>)
 80073d0:	4c0d      	ldr	r4, [pc, #52]	; (8007408 <__libc_init_array+0x3c>)
 80073d2:	1b64      	subs	r4, r4, r5
 80073d4:	10a4      	asrs	r4, r4, #2
 80073d6:	2600      	movs	r6, #0
 80073d8:	42a6      	cmp	r6, r4
 80073da:	d109      	bne.n	80073f0 <__libc_init_array+0x24>
 80073dc:	4d0b      	ldr	r5, [pc, #44]	; (800740c <__libc_init_array+0x40>)
 80073de:	4c0c      	ldr	r4, [pc, #48]	; (8007410 <__libc_init_array+0x44>)
 80073e0:	f000 fc4e 	bl	8007c80 <_init>
 80073e4:	1b64      	subs	r4, r4, r5
 80073e6:	10a4      	asrs	r4, r4, #2
 80073e8:	2600      	movs	r6, #0
 80073ea:	42a6      	cmp	r6, r4
 80073ec:	d105      	bne.n	80073fa <__libc_init_array+0x2e>
 80073ee:	bd70      	pop	{r4, r5, r6, pc}
 80073f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80073f4:	4798      	blx	r3
 80073f6:	3601      	adds	r6, #1
 80073f8:	e7ee      	b.n	80073d8 <__libc_init_array+0xc>
 80073fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80073fe:	4798      	blx	r3
 8007400:	3601      	adds	r6, #1
 8007402:	e7f2      	b.n	80073ea <__libc_init_array+0x1e>
 8007404:	080080a4 	.word	0x080080a4
 8007408:	080080a4 	.word	0x080080a4
 800740c:	080080a4 	.word	0x080080a4
 8007410:	080080a8 	.word	0x080080a8

08007414 <memset>:
 8007414:	4402      	add	r2, r0
 8007416:	4603      	mov	r3, r0
 8007418:	4293      	cmp	r3, r2
 800741a:	d100      	bne.n	800741e <memset+0xa>
 800741c:	4770      	bx	lr
 800741e:	f803 1b01 	strb.w	r1, [r3], #1
 8007422:	e7f9      	b.n	8007418 <memset+0x4>

08007424 <siprintf>:
 8007424:	b40e      	push	{r1, r2, r3}
 8007426:	b500      	push	{lr}
 8007428:	b09c      	sub	sp, #112	; 0x70
 800742a:	ab1d      	add	r3, sp, #116	; 0x74
 800742c:	9002      	str	r0, [sp, #8]
 800742e:	9006      	str	r0, [sp, #24]
 8007430:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007434:	4809      	ldr	r0, [pc, #36]	; (800745c <siprintf+0x38>)
 8007436:	9107      	str	r1, [sp, #28]
 8007438:	9104      	str	r1, [sp, #16]
 800743a:	4909      	ldr	r1, [pc, #36]	; (8007460 <siprintf+0x3c>)
 800743c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007440:	9105      	str	r1, [sp, #20]
 8007442:	6800      	ldr	r0, [r0, #0]
 8007444:	9301      	str	r3, [sp, #4]
 8007446:	a902      	add	r1, sp, #8
 8007448:	f000 f868 	bl	800751c <_svfiprintf_r>
 800744c:	9b02      	ldr	r3, [sp, #8]
 800744e:	2200      	movs	r2, #0
 8007450:	701a      	strb	r2, [r3, #0]
 8007452:	b01c      	add	sp, #112	; 0x70
 8007454:	f85d eb04 	ldr.w	lr, [sp], #4
 8007458:	b003      	add	sp, #12
 800745a:	4770      	bx	lr
 800745c:	20000024 	.word	0x20000024
 8007460:	ffff0208 	.word	0xffff0208

08007464 <__ssputs_r>:
 8007464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007468:	688e      	ldr	r6, [r1, #8]
 800746a:	429e      	cmp	r6, r3
 800746c:	4682      	mov	sl, r0
 800746e:	460c      	mov	r4, r1
 8007470:	4690      	mov	r8, r2
 8007472:	461f      	mov	r7, r3
 8007474:	d838      	bhi.n	80074e8 <__ssputs_r+0x84>
 8007476:	898a      	ldrh	r2, [r1, #12]
 8007478:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800747c:	d032      	beq.n	80074e4 <__ssputs_r+0x80>
 800747e:	6825      	ldr	r5, [r4, #0]
 8007480:	6909      	ldr	r1, [r1, #16]
 8007482:	eba5 0901 	sub.w	r9, r5, r1
 8007486:	6965      	ldr	r5, [r4, #20]
 8007488:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800748c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007490:	3301      	adds	r3, #1
 8007492:	444b      	add	r3, r9
 8007494:	106d      	asrs	r5, r5, #1
 8007496:	429d      	cmp	r5, r3
 8007498:	bf38      	it	cc
 800749a:	461d      	movcc	r5, r3
 800749c:	0553      	lsls	r3, r2, #21
 800749e:	d531      	bpl.n	8007504 <__ssputs_r+0xa0>
 80074a0:	4629      	mov	r1, r5
 80074a2:	f000 fb47 	bl	8007b34 <_malloc_r>
 80074a6:	4606      	mov	r6, r0
 80074a8:	b950      	cbnz	r0, 80074c0 <__ssputs_r+0x5c>
 80074aa:	230c      	movs	r3, #12
 80074ac:	f8ca 3000 	str.w	r3, [sl]
 80074b0:	89a3      	ldrh	r3, [r4, #12]
 80074b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074b6:	81a3      	strh	r3, [r4, #12]
 80074b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074c0:	6921      	ldr	r1, [r4, #16]
 80074c2:	464a      	mov	r2, r9
 80074c4:	f000 fabe 	bl	8007a44 <memcpy>
 80074c8:	89a3      	ldrh	r3, [r4, #12]
 80074ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074d2:	81a3      	strh	r3, [r4, #12]
 80074d4:	6126      	str	r6, [r4, #16]
 80074d6:	6165      	str	r5, [r4, #20]
 80074d8:	444e      	add	r6, r9
 80074da:	eba5 0509 	sub.w	r5, r5, r9
 80074de:	6026      	str	r6, [r4, #0]
 80074e0:	60a5      	str	r5, [r4, #8]
 80074e2:	463e      	mov	r6, r7
 80074e4:	42be      	cmp	r6, r7
 80074e6:	d900      	bls.n	80074ea <__ssputs_r+0x86>
 80074e8:	463e      	mov	r6, r7
 80074ea:	4632      	mov	r2, r6
 80074ec:	6820      	ldr	r0, [r4, #0]
 80074ee:	4641      	mov	r1, r8
 80074f0:	f000 fab6 	bl	8007a60 <memmove>
 80074f4:	68a3      	ldr	r3, [r4, #8]
 80074f6:	6822      	ldr	r2, [r4, #0]
 80074f8:	1b9b      	subs	r3, r3, r6
 80074fa:	4432      	add	r2, r6
 80074fc:	60a3      	str	r3, [r4, #8]
 80074fe:	6022      	str	r2, [r4, #0]
 8007500:	2000      	movs	r0, #0
 8007502:	e7db      	b.n	80074bc <__ssputs_r+0x58>
 8007504:	462a      	mov	r2, r5
 8007506:	f000 fb6f 	bl	8007be8 <_realloc_r>
 800750a:	4606      	mov	r6, r0
 800750c:	2800      	cmp	r0, #0
 800750e:	d1e1      	bne.n	80074d4 <__ssputs_r+0x70>
 8007510:	6921      	ldr	r1, [r4, #16]
 8007512:	4650      	mov	r0, sl
 8007514:	f000 fabe 	bl	8007a94 <_free_r>
 8007518:	e7c7      	b.n	80074aa <__ssputs_r+0x46>
	...

0800751c <_svfiprintf_r>:
 800751c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007520:	4698      	mov	r8, r3
 8007522:	898b      	ldrh	r3, [r1, #12]
 8007524:	061b      	lsls	r3, r3, #24
 8007526:	b09d      	sub	sp, #116	; 0x74
 8007528:	4607      	mov	r7, r0
 800752a:	460d      	mov	r5, r1
 800752c:	4614      	mov	r4, r2
 800752e:	d50e      	bpl.n	800754e <_svfiprintf_r+0x32>
 8007530:	690b      	ldr	r3, [r1, #16]
 8007532:	b963      	cbnz	r3, 800754e <_svfiprintf_r+0x32>
 8007534:	2140      	movs	r1, #64	; 0x40
 8007536:	f000 fafd 	bl	8007b34 <_malloc_r>
 800753a:	6028      	str	r0, [r5, #0]
 800753c:	6128      	str	r0, [r5, #16]
 800753e:	b920      	cbnz	r0, 800754a <_svfiprintf_r+0x2e>
 8007540:	230c      	movs	r3, #12
 8007542:	603b      	str	r3, [r7, #0]
 8007544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007548:	e0d1      	b.n	80076ee <_svfiprintf_r+0x1d2>
 800754a:	2340      	movs	r3, #64	; 0x40
 800754c:	616b      	str	r3, [r5, #20]
 800754e:	2300      	movs	r3, #0
 8007550:	9309      	str	r3, [sp, #36]	; 0x24
 8007552:	2320      	movs	r3, #32
 8007554:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007558:	f8cd 800c 	str.w	r8, [sp, #12]
 800755c:	2330      	movs	r3, #48	; 0x30
 800755e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007708 <_svfiprintf_r+0x1ec>
 8007562:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007566:	f04f 0901 	mov.w	r9, #1
 800756a:	4623      	mov	r3, r4
 800756c:	469a      	mov	sl, r3
 800756e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007572:	b10a      	cbz	r2, 8007578 <_svfiprintf_r+0x5c>
 8007574:	2a25      	cmp	r2, #37	; 0x25
 8007576:	d1f9      	bne.n	800756c <_svfiprintf_r+0x50>
 8007578:	ebba 0b04 	subs.w	fp, sl, r4
 800757c:	d00b      	beq.n	8007596 <_svfiprintf_r+0x7a>
 800757e:	465b      	mov	r3, fp
 8007580:	4622      	mov	r2, r4
 8007582:	4629      	mov	r1, r5
 8007584:	4638      	mov	r0, r7
 8007586:	f7ff ff6d 	bl	8007464 <__ssputs_r>
 800758a:	3001      	adds	r0, #1
 800758c:	f000 80aa 	beq.w	80076e4 <_svfiprintf_r+0x1c8>
 8007590:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007592:	445a      	add	r2, fp
 8007594:	9209      	str	r2, [sp, #36]	; 0x24
 8007596:	f89a 3000 	ldrb.w	r3, [sl]
 800759a:	2b00      	cmp	r3, #0
 800759c:	f000 80a2 	beq.w	80076e4 <_svfiprintf_r+0x1c8>
 80075a0:	2300      	movs	r3, #0
 80075a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075aa:	f10a 0a01 	add.w	sl, sl, #1
 80075ae:	9304      	str	r3, [sp, #16]
 80075b0:	9307      	str	r3, [sp, #28]
 80075b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075b6:	931a      	str	r3, [sp, #104]	; 0x68
 80075b8:	4654      	mov	r4, sl
 80075ba:	2205      	movs	r2, #5
 80075bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075c0:	4851      	ldr	r0, [pc, #324]	; (8007708 <_svfiprintf_r+0x1ec>)
 80075c2:	f7f8 fe15 	bl	80001f0 <memchr>
 80075c6:	9a04      	ldr	r2, [sp, #16]
 80075c8:	b9d8      	cbnz	r0, 8007602 <_svfiprintf_r+0xe6>
 80075ca:	06d0      	lsls	r0, r2, #27
 80075cc:	bf44      	itt	mi
 80075ce:	2320      	movmi	r3, #32
 80075d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075d4:	0711      	lsls	r1, r2, #28
 80075d6:	bf44      	itt	mi
 80075d8:	232b      	movmi	r3, #43	; 0x2b
 80075da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075de:	f89a 3000 	ldrb.w	r3, [sl]
 80075e2:	2b2a      	cmp	r3, #42	; 0x2a
 80075e4:	d015      	beq.n	8007612 <_svfiprintf_r+0xf6>
 80075e6:	9a07      	ldr	r2, [sp, #28]
 80075e8:	4654      	mov	r4, sl
 80075ea:	2000      	movs	r0, #0
 80075ec:	f04f 0c0a 	mov.w	ip, #10
 80075f0:	4621      	mov	r1, r4
 80075f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075f6:	3b30      	subs	r3, #48	; 0x30
 80075f8:	2b09      	cmp	r3, #9
 80075fa:	d94e      	bls.n	800769a <_svfiprintf_r+0x17e>
 80075fc:	b1b0      	cbz	r0, 800762c <_svfiprintf_r+0x110>
 80075fe:	9207      	str	r2, [sp, #28]
 8007600:	e014      	b.n	800762c <_svfiprintf_r+0x110>
 8007602:	eba0 0308 	sub.w	r3, r0, r8
 8007606:	fa09 f303 	lsl.w	r3, r9, r3
 800760a:	4313      	orrs	r3, r2
 800760c:	9304      	str	r3, [sp, #16]
 800760e:	46a2      	mov	sl, r4
 8007610:	e7d2      	b.n	80075b8 <_svfiprintf_r+0x9c>
 8007612:	9b03      	ldr	r3, [sp, #12]
 8007614:	1d19      	adds	r1, r3, #4
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	9103      	str	r1, [sp, #12]
 800761a:	2b00      	cmp	r3, #0
 800761c:	bfbb      	ittet	lt
 800761e:	425b      	neglt	r3, r3
 8007620:	f042 0202 	orrlt.w	r2, r2, #2
 8007624:	9307      	strge	r3, [sp, #28]
 8007626:	9307      	strlt	r3, [sp, #28]
 8007628:	bfb8      	it	lt
 800762a:	9204      	strlt	r2, [sp, #16]
 800762c:	7823      	ldrb	r3, [r4, #0]
 800762e:	2b2e      	cmp	r3, #46	; 0x2e
 8007630:	d10c      	bne.n	800764c <_svfiprintf_r+0x130>
 8007632:	7863      	ldrb	r3, [r4, #1]
 8007634:	2b2a      	cmp	r3, #42	; 0x2a
 8007636:	d135      	bne.n	80076a4 <_svfiprintf_r+0x188>
 8007638:	9b03      	ldr	r3, [sp, #12]
 800763a:	1d1a      	adds	r2, r3, #4
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	9203      	str	r2, [sp, #12]
 8007640:	2b00      	cmp	r3, #0
 8007642:	bfb8      	it	lt
 8007644:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007648:	3402      	adds	r4, #2
 800764a:	9305      	str	r3, [sp, #20]
 800764c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007718 <_svfiprintf_r+0x1fc>
 8007650:	7821      	ldrb	r1, [r4, #0]
 8007652:	2203      	movs	r2, #3
 8007654:	4650      	mov	r0, sl
 8007656:	f7f8 fdcb 	bl	80001f0 <memchr>
 800765a:	b140      	cbz	r0, 800766e <_svfiprintf_r+0x152>
 800765c:	2340      	movs	r3, #64	; 0x40
 800765e:	eba0 000a 	sub.w	r0, r0, sl
 8007662:	fa03 f000 	lsl.w	r0, r3, r0
 8007666:	9b04      	ldr	r3, [sp, #16]
 8007668:	4303      	orrs	r3, r0
 800766a:	3401      	adds	r4, #1
 800766c:	9304      	str	r3, [sp, #16]
 800766e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007672:	4826      	ldr	r0, [pc, #152]	; (800770c <_svfiprintf_r+0x1f0>)
 8007674:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007678:	2206      	movs	r2, #6
 800767a:	f7f8 fdb9 	bl	80001f0 <memchr>
 800767e:	2800      	cmp	r0, #0
 8007680:	d038      	beq.n	80076f4 <_svfiprintf_r+0x1d8>
 8007682:	4b23      	ldr	r3, [pc, #140]	; (8007710 <_svfiprintf_r+0x1f4>)
 8007684:	bb1b      	cbnz	r3, 80076ce <_svfiprintf_r+0x1b2>
 8007686:	9b03      	ldr	r3, [sp, #12]
 8007688:	3307      	adds	r3, #7
 800768a:	f023 0307 	bic.w	r3, r3, #7
 800768e:	3308      	adds	r3, #8
 8007690:	9303      	str	r3, [sp, #12]
 8007692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007694:	4433      	add	r3, r6
 8007696:	9309      	str	r3, [sp, #36]	; 0x24
 8007698:	e767      	b.n	800756a <_svfiprintf_r+0x4e>
 800769a:	fb0c 3202 	mla	r2, ip, r2, r3
 800769e:	460c      	mov	r4, r1
 80076a0:	2001      	movs	r0, #1
 80076a2:	e7a5      	b.n	80075f0 <_svfiprintf_r+0xd4>
 80076a4:	2300      	movs	r3, #0
 80076a6:	3401      	adds	r4, #1
 80076a8:	9305      	str	r3, [sp, #20]
 80076aa:	4619      	mov	r1, r3
 80076ac:	f04f 0c0a 	mov.w	ip, #10
 80076b0:	4620      	mov	r0, r4
 80076b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076b6:	3a30      	subs	r2, #48	; 0x30
 80076b8:	2a09      	cmp	r2, #9
 80076ba:	d903      	bls.n	80076c4 <_svfiprintf_r+0x1a8>
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d0c5      	beq.n	800764c <_svfiprintf_r+0x130>
 80076c0:	9105      	str	r1, [sp, #20]
 80076c2:	e7c3      	b.n	800764c <_svfiprintf_r+0x130>
 80076c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80076c8:	4604      	mov	r4, r0
 80076ca:	2301      	movs	r3, #1
 80076cc:	e7f0      	b.n	80076b0 <_svfiprintf_r+0x194>
 80076ce:	ab03      	add	r3, sp, #12
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	462a      	mov	r2, r5
 80076d4:	4b0f      	ldr	r3, [pc, #60]	; (8007714 <_svfiprintf_r+0x1f8>)
 80076d6:	a904      	add	r1, sp, #16
 80076d8:	4638      	mov	r0, r7
 80076da:	f3af 8000 	nop.w
 80076de:	1c42      	adds	r2, r0, #1
 80076e0:	4606      	mov	r6, r0
 80076e2:	d1d6      	bne.n	8007692 <_svfiprintf_r+0x176>
 80076e4:	89ab      	ldrh	r3, [r5, #12]
 80076e6:	065b      	lsls	r3, r3, #25
 80076e8:	f53f af2c 	bmi.w	8007544 <_svfiprintf_r+0x28>
 80076ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076ee:	b01d      	add	sp, #116	; 0x74
 80076f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f4:	ab03      	add	r3, sp, #12
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	462a      	mov	r2, r5
 80076fa:	4b06      	ldr	r3, [pc, #24]	; (8007714 <_svfiprintf_r+0x1f8>)
 80076fc:	a904      	add	r1, sp, #16
 80076fe:	4638      	mov	r0, r7
 8007700:	f000 f87a 	bl	80077f8 <_printf_i>
 8007704:	e7eb      	b.n	80076de <_svfiprintf_r+0x1c2>
 8007706:	bf00      	nop
 8007708:	08008068 	.word	0x08008068
 800770c:	08008072 	.word	0x08008072
 8007710:	00000000 	.word	0x00000000
 8007714:	08007465 	.word	0x08007465
 8007718:	0800806e 	.word	0x0800806e

0800771c <_printf_common>:
 800771c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007720:	4616      	mov	r6, r2
 8007722:	4699      	mov	r9, r3
 8007724:	688a      	ldr	r2, [r1, #8]
 8007726:	690b      	ldr	r3, [r1, #16]
 8007728:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800772c:	4293      	cmp	r3, r2
 800772e:	bfb8      	it	lt
 8007730:	4613      	movlt	r3, r2
 8007732:	6033      	str	r3, [r6, #0]
 8007734:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007738:	4607      	mov	r7, r0
 800773a:	460c      	mov	r4, r1
 800773c:	b10a      	cbz	r2, 8007742 <_printf_common+0x26>
 800773e:	3301      	adds	r3, #1
 8007740:	6033      	str	r3, [r6, #0]
 8007742:	6823      	ldr	r3, [r4, #0]
 8007744:	0699      	lsls	r1, r3, #26
 8007746:	bf42      	ittt	mi
 8007748:	6833      	ldrmi	r3, [r6, #0]
 800774a:	3302      	addmi	r3, #2
 800774c:	6033      	strmi	r3, [r6, #0]
 800774e:	6825      	ldr	r5, [r4, #0]
 8007750:	f015 0506 	ands.w	r5, r5, #6
 8007754:	d106      	bne.n	8007764 <_printf_common+0x48>
 8007756:	f104 0a19 	add.w	sl, r4, #25
 800775a:	68e3      	ldr	r3, [r4, #12]
 800775c:	6832      	ldr	r2, [r6, #0]
 800775e:	1a9b      	subs	r3, r3, r2
 8007760:	42ab      	cmp	r3, r5
 8007762:	dc26      	bgt.n	80077b2 <_printf_common+0x96>
 8007764:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007768:	1e13      	subs	r3, r2, #0
 800776a:	6822      	ldr	r2, [r4, #0]
 800776c:	bf18      	it	ne
 800776e:	2301      	movne	r3, #1
 8007770:	0692      	lsls	r2, r2, #26
 8007772:	d42b      	bmi.n	80077cc <_printf_common+0xb0>
 8007774:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007778:	4649      	mov	r1, r9
 800777a:	4638      	mov	r0, r7
 800777c:	47c0      	blx	r8
 800777e:	3001      	adds	r0, #1
 8007780:	d01e      	beq.n	80077c0 <_printf_common+0xa4>
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	68e5      	ldr	r5, [r4, #12]
 8007786:	6832      	ldr	r2, [r6, #0]
 8007788:	f003 0306 	and.w	r3, r3, #6
 800778c:	2b04      	cmp	r3, #4
 800778e:	bf08      	it	eq
 8007790:	1aad      	subeq	r5, r5, r2
 8007792:	68a3      	ldr	r3, [r4, #8]
 8007794:	6922      	ldr	r2, [r4, #16]
 8007796:	bf0c      	ite	eq
 8007798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800779c:	2500      	movne	r5, #0
 800779e:	4293      	cmp	r3, r2
 80077a0:	bfc4      	itt	gt
 80077a2:	1a9b      	subgt	r3, r3, r2
 80077a4:	18ed      	addgt	r5, r5, r3
 80077a6:	2600      	movs	r6, #0
 80077a8:	341a      	adds	r4, #26
 80077aa:	42b5      	cmp	r5, r6
 80077ac:	d11a      	bne.n	80077e4 <_printf_common+0xc8>
 80077ae:	2000      	movs	r0, #0
 80077b0:	e008      	b.n	80077c4 <_printf_common+0xa8>
 80077b2:	2301      	movs	r3, #1
 80077b4:	4652      	mov	r2, sl
 80077b6:	4649      	mov	r1, r9
 80077b8:	4638      	mov	r0, r7
 80077ba:	47c0      	blx	r8
 80077bc:	3001      	adds	r0, #1
 80077be:	d103      	bne.n	80077c8 <_printf_common+0xac>
 80077c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c8:	3501      	adds	r5, #1
 80077ca:	e7c6      	b.n	800775a <_printf_common+0x3e>
 80077cc:	18e1      	adds	r1, r4, r3
 80077ce:	1c5a      	adds	r2, r3, #1
 80077d0:	2030      	movs	r0, #48	; 0x30
 80077d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077d6:	4422      	add	r2, r4
 80077d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077e0:	3302      	adds	r3, #2
 80077e2:	e7c7      	b.n	8007774 <_printf_common+0x58>
 80077e4:	2301      	movs	r3, #1
 80077e6:	4622      	mov	r2, r4
 80077e8:	4649      	mov	r1, r9
 80077ea:	4638      	mov	r0, r7
 80077ec:	47c0      	blx	r8
 80077ee:	3001      	adds	r0, #1
 80077f0:	d0e6      	beq.n	80077c0 <_printf_common+0xa4>
 80077f2:	3601      	adds	r6, #1
 80077f4:	e7d9      	b.n	80077aa <_printf_common+0x8e>
	...

080077f8 <_printf_i>:
 80077f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077fc:	460c      	mov	r4, r1
 80077fe:	4691      	mov	r9, r2
 8007800:	7e27      	ldrb	r7, [r4, #24]
 8007802:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007804:	2f78      	cmp	r7, #120	; 0x78
 8007806:	4680      	mov	r8, r0
 8007808:	469a      	mov	sl, r3
 800780a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800780e:	d807      	bhi.n	8007820 <_printf_i+0x28>
 8007810:	2f62      	cmp	r7, #98	; 0x62
 8007812:	d80a      	bhi.n	800782a <_printf_i+0x32>
 8007814:	2f00      	cmp	r7, #0
 8007816:	f000 80d8 	beq.w	80079ca <_printf_i+0x1d2>
 800781a:	2f58      	cmp	r7, #88	; 0x58
 800781c:	f000 80a3 	beq.w	8007966 <_printf_i+0x16e>
 8007820:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007824:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007828:	e03a      	b.n	80078a0 <_printf_i+0xa8>
 800782a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800782e:	2b15      	cmp	r3, #21
 8007830:	d8f6      	bhi.n	8007820 <_printf_i+0x28>
 8007832:	a001      	add	r0, pc, #4	; (adr r0, 8007838 <_printf_i+0x40>)
 8007834:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007838:	08007891 	.word	0x08007891
 800783c:	080078a5 	.word	0x080078a5
 8007840:	08007821 	.word	0x08007821
 8007844:	08007821 	.word	0x08007821
 8007848:	08007821 	.word	0x08007821
 800784c:	08007821 	.word	0x08007821
 8007850:	080078a5 	.word	0x080078a5
 8007854:	08007821 	.word	0x08007821
 8007858:	08007821 	.word	0x08007821
 800785c:	08007821 	.word	0x08007821
 8007860:	08007821 	.word	0x08007821
 8007864:	080079b1 	.word	0x080079b1
 8007868:	080078d5 	.word	0x080078d5
 800786c:	08007993 	.word	0x08007993
 8007870:	08007821 	.word	0x08007821
 8007874:	08007821 	.word	0x08007821
 8007878:	080079d3 	.word	0x080079d3
 800787c:	08007821 	.word	0x08007821
 8007880:	080078d5 	.word	0x080078d5
 8007884:	08007821 	.word	0x08007821
 8007888:	08007821 	.word	0x08007821
 800788c:	0800799b 	.word	0x0800799b
 8007890:	680b      	ldr	r3, [r1, #0]
 8007892:	1d1a      	adds	r2, r3, #4
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	600a      	str	r2, [r1, #0]
 8007898:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800789c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078a0:	2301      	movs	r3, #1
 80078a2:	e0a3      	b.n	80079ec <_printf_i+0x1f4>
 80078a4:	6825      	ldr	r5, [r4, #0]
 80078a6:	6808      	ldr	r0, [r1, #0]
 80078a8:	062e      	lsls	r6, r5, #24
 80078aa:	f100 0304 	add.w	r3, r0, #4
 80078ae:	d50a      	bpl.n	80078c6 <_printf_i+0xce>
 80078b0:	6805      	ldr	r5, [r0, #0]
 80078b2:	600b      	str	r3, [r1, #0]
 80078b4:	2d00      	cmp	r5, #0
 80078b6:	da03      	bge.n	80078c0 <_printf_i+0xc8>
 80078b8:	232d      	movs	r3, #45	; 0x2d
 80078ba:	426d      	negs	r5, r5
 80078bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078c0:	485e      	ldr	r0, [pc, #376]	; (8007a3c <_printf_i+0x244>)
 80078c2:	230a      	movs	r3, #10
 80078c4:	e019      	b.n	80078fa <_printf_i+0x102>
 80078c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80078ca:	6805      	ldr	r5, [r0, #0]
 80078cc:	600b      	str	r3, [r1, #0]
 80078ce:	bf18      	it	ne
 80078d0:	b22d      	sxthne	r5, r5
 80078d2:	e7ef      	b.n	80078b4 <_printf_i+0xbc>
 80078d4:	680b      	ldr	r3, [r1, #0]
 80078d6:	6825      	ldr	r5, [r4, #0]
 80078d8:	1d18      	adds	r0, r3, #4
 80078da:	6008      	str	r0, [r1, #0]
 80078dc:	0628      	lsls	r0, r5, #24
 80078de:	d501      	bpl.n	80078e4 <_printf_i+0xec>
 80078e0:	681d      	ldr	r5, [r3, #0]
 80078e2:	e002      	b.n	80078ea <_printf_i+0xf2>
 80078e4:	0669      	lsls	r1, r5, #25
 80078e6:	d5fb      	bpl.n	80078e0 <_printf_i+0xe8>
 80078e8:	881d      	ldrh	r5, [r3, #0]
 80078ea:	4854      	ldr	r0, [pc, #336]	; (8007a3c <_printf_i+0x244>)
 80078ec:	2f6f      	cmp	r7, #111	; 0x6f
 80078ee:	bf0c      	ite	eq
 80078f0:	2308      	moveq	r3, #8
 80078f2:	230a      	movne	r3, #10
 80078f4:	2100      	movs	r1, #0
 80078f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078fa:	6866      	ldr	r6, [r4, #4]
 80078fc:	60a6      	str	r6, [r4, #8]
 80078fe:	2e00      	cmp	r6, #0
 8007900:	bfa2      	ittt	ge
 8007902:	6821      	ldrge	r1, [r4, #0]
 8007904:	f021 0104 	bicge.w	r1, r1, #4
 8007908:	6021      	strge	r1, [r4, #0]
 800790a:	b90d      	cbnz	r5, 8007910 <_printf_i+0x118>
 800790c:	2e00      	cmp	r6, #0
 800790e:	d04d      	beq.n	80079ac <_printf_i+0x1b4>
 8007910:	4616      	mov	r6, r2
 8007912:	fbb5 f1f3 	udiv	r1, r5, r3
 8007916:	fb03 5711 	mls	r7, r3, r1, r5
 800791a:	5dc7      	ldrb	r7, [r0, r7]
 800791c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007920:	462f      	mov	r7, r5
 8007922:	42bb      	cmp	r3, r7
 8007924:	460d      	mov	r5, r1
 8007926:	d9f4      	bls.n	8007912 <_printf_i+0x11a>
 8007928:	2b08      	cmp	r3, #8
 800792a:	d10b      	bne.n	8007944 <_printf_i+0x14c>
 800792c:	6823      	ldr	r3, [r4, #0]
 800792e:	07df      	lsls	r7, r3, #31
 8007930:	d508      	bpl.n	8007944 <_printf_i+0x14c>
 8007932:	6923      	ldr	r3, [r4, #16]
 8007934:	6861      	ldr	r1, [r4, #4]
 8007936:	4299      	cmp	r1, r3
 8007938:	bfde      	ittt	le
 800793a:	2330      	movle	r3, #48	; 0x30
 800793c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007940:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007944:	1b92      	subs	r2, r2, r6
 8007946:	6122      	str	r2, [r4, #16]
 8007948:	f8cd a000 	str.w	sl, [sp]
 800794c:	464b      	mov	r3, r9
 800794e:	aa03      	add	r2, sp, #12
 8007950:	4621      	mov	r1, r4
 8007952:	4640      	mov	r0, r8
 8007954:	f7ff fee2 	bl	800771c <_printf_common>
 8007958:	3001      	adds	r0, #1
 800795a:	d14c      	bne.n	80079f6 <_printf_i+0x1fe>
 800795c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007960:	b004      	add	sp, #16
 8007962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007966:	4835      	ldr	r0, [pc, #212]	; (8007a3c <_printf_i+0x244>)
 8007968:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800796c:	6823      	ldr	r3, [r4, #0]
 800796e:	680e      	ldr	r6, [r1, #0]
 8007970:	061f      	lsls	r7, r3, #24
 8007972:	f856 5b04 	ldr.w	r5, [r6], #4
 8007976:	600e      	str	r6, [r1, #0]
 8007978:	d514      	bpl.n	80079a4 <_printf_i+0x1ac>
 800797a:	07d9      	lsls	r1, r3, #31
 800797c:	bf44      	itt	mi
 800797e:	f043 0320 	orrmi.w	r3, r3, #32
 8007982:	6023      	strmi	r3, [r4, #0]
 8007984:	b91d      	cbnz	r5, 800798e <_printf_i+0x196>
 8007986:	6823      	ldr	r3, [r4, #0]
 8007988:	f023 0320 	bic.w	r3, r3, #32
 800798c:	6023      	str	r3, [r4, #0]
 800798e:	2310      	movs	r3, #16
 8007990:	e7b0      	b.n	80078f4 <_printf_i+0xfc>
 8007992:	6823      	ldr	r3, [r4, #0]
 8007994:	f043 0320 	orr.w	r3, r3, #32
 8007998:	6023      	str	r3, [r4, #0]
 800799a:	2378      	movs	r3, #120	; 0x78
 800799c:	4828      	ldr	r0, [pc, #160]	; (8007a40 <_printf_i+0x248>)
 800799e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079a2:	e7e3      	b.n	800796c <_printf_i+0x174>
 80079a4:	065e      	lsls	r6, r3, #25
 80079a6:	bf48      	it	mi
 80079a8:	b2ad      	uxthmi	r5, r5
 80079aa:	e7e6      	b.n	800797a <_printf_i+0x182>
 80079ac:	4616      	mov	r6, r2
 80079ae:	e7bb      	b.n	8007928 <_printf_i+0x130>
 80079b0:	680b      	ldr	r3, [r1, #0]
 80079b2:	6826      	ldr	r6, [r4, #0]
 80079b4:	6960      	ldr	r0, [r4, #20]
 80079b6:	1d1d      	adds	r5, r3, #4
 80079b8:	600d      	str	r5, [r1, #0]
 80079ba:	0635      	lsls	r5, r6, #24
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	d501      	bpl.n	80079c4 <_printf_i+0x1cc>
 80079c0:	6018      	str	r0, [r3, #0]
 80079c2:	e002      	b.n	80079ca <_printf_i+0x1d2>
 80079c4:	0671      	lsls	r1, r6, #25
 80079c6:	d5fb      	bpl.n	80079c0 <_printf_i+0x1c8>
 80079c8:	8018      	strh	r0, [r3, #0]
 80079ca:	2300      	movs	r3, #0
 80079cc:	6123      	str	r3, [r4, #16]
 80079ce:	4616      	mov	r6, r2
 80079d0:	e7ba      	b.n	8007948 <_printf_i+0x150>
 80079d2:	680b      	ldr	r3, [r1, #0]
 80079d4:	1d1a      	adds	r2, r3, #4
 80079d6:	600a      	str	r2, [r1, #0]
 80079d8:	681e      	ldr	r6, [r3, #0]
 80079da:	6862      	ldr	r2, [r4, #4]
 80079dc:	2100      	movs	r1, #0
 80079de:	4630      	mov	r0, r6
 80079e0:	f7f8 fc06 	bl	80001f0 <memchr>
 80079e4:	b108      	cbz	r0, 80079ea <_printf_i+0x1f2>
 80079e6:	1b80      	subs	r0, r0, r6
 80079e8:	6060      	str	r0, [r4, #4]
 80079ea:	6863      	ldr	r3, [r4, #4]
 80079ec:	6123      	str	r3, [r4, #16]
 80079ee:	2300      	movs	r3, #0
 80079f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079f4:	e7a8      	b.n	8007948 <_printf_i+0x150>
 80079f6:	6923      	ldr	r3, [r4, #16]
 80079f8:	4632      	mov	r2, r6
 80079fa:	4649      	mov	r1, r9
 80079fc:	4640      	mov	r0, r8
 80079fe:	47d0      	blx	sl
 8007a00:	3001      	adds	r0, #1
 8007a02:	d0ab      	beq.n	800795c <_printf_i+0x164>
 8007a04:	6823      	ldr	r3, [r4, #0]
 8007a06:	079b      	lsls	r3, r3, #30
 8007a08:	d413      	bmi.n	8007a32 <_printf_i+0x23a>
 8007a0a:	68e0      	ldr	r0, [r4, #12]
 8007a0c:	9b03      	ldr	r3, [sp, #12]
 8007a0e:	4298      	cmp	r0, r3
 8007a10:	bfb8      	it	lt
 8007a12:	4618      	movlt	r0, r3
 8007a14:	e7a4      	b.n	8007960 <_printf_i+0x168>
 8007a16:	2301      	movs	r3, #1
 8007a18:	4632      	mov	r2, r6
 8007a1a:	4649      	mov	r1, r9
 8007a1c:	4640      	mov	r0, r8
 8007a1e:	47d0      	blx	sl
 8007a20:	3001      	adds	r0, #1
 8007a22:	d09b      	beq.n	800795c <_printf_i+0x164>
 8007a24:	3501      	adds	r5, #1
 8007a26:	68e3      	ldr	r3, [r4, #12]
 8007a28:	9903      	ldr	r1, [sp, #12]
 8007a2a:	1a5b      	subs	r3, r3, r1
 8007a2c:	42ab      	cmp	r3, r5
 8007a2e:	dcf2      	bgt.n	8007a16 <_printf_i+0x21e>
 8007a30:	e7eb      	b.n	8007a0a <_printf_i+0x212>
 8007a32:	2500      	movs	r5, #0
 8007a34:	f104 0619 	add.w	r6, r4, #25
 8007a38:	e7f5      	b.n	8007a26 <_printf_i+0x22e>
 8007a3a:	bf00      	nop
 8007a3c:	08008079 	.word	0x08008079
 8007a40:	0800808a 	.word	0x0800808a

08007a44 <memcpy>:
 8007a44:	440a      	add	r2, r1
 8007a46:	4291      	cmp	r1, r2
 8007a48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007a4c:	d100      	bne.n	8007a50 <memcpy+0xc>
 8007a4e:	4770      	bx	lr
 8007a50:	b510      	push	{r4, lr}
 8007a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a5a:	4291      	cmp	r1, r2
 8007a5c:	d1f9      	bne.n	8007a52 <memcpy+0xe>
 8007a5e:	bd10      	pop	{r4, pc}

08007a60 <memmove>:
 8007a60:	4288      	cmp	r0, r1
 8007a62:	b510      	push	{r4, lr}
 8007a64:	eb01 0402 	add.w	r4, r1, r2
 8007a68:	d902      	bls.n	8007a70 <memmove+0x10>
 8007a6a:	4284      	cmp	r4, r0
 8007a6c:	4623      	mov	r3, r4
 8007a6e:	d807      	bhi.n	8007a80 <memmove+0x20>
 8007a70:	1e43      	subs	r3, r0, #1
 8007a72:	42a1      	cmp	r1, r4
 8007a74:	d008      	beq.n	8007a88 <memmove+0x28>
 8007a76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a7e:	e7f8      	b.n	8007a72 <memmove+0x12>
 8007a80:	4402      	add	r2, r0
 8007a82:	4601      	mov	r1, r0
 8007a84:	428a      	cmp	r2, r1
 8007a86:	d100      	bne.n	8007a8a <memmove+0x2a>
 8007a88:	bd10      	pop	{r4, pc}
 8007a8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a92:	e7f7      	b.n	8007a84 <memmove+0x24>

08007a94 <_free_r>:
 8007a94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a96:	2900      	cmp	r1, #0
 8007a98:	d048      	beq.n	8007b2c <_free_r+0x98>
 8007a9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a9e:	9001      	str	r0, [sp, #4]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f1a1 0404 	sub.w	r4, r1, #4
 8007aa6:	bfb8      	it	lt
 8007aa8:	18e4      	addlt	r4, r4, r3
 8007aaa:	f000 f8d3 	bl	8007c54 <__malloc_lock>
 8007aae:	4a20      	ldr	r2, [pc, #128]	; (8007b30 <_free_r+0x9c>)
 8007ab0:	9801      	ldr	r0, [sp, #4]
 8007ab2:	6813      	ldr	r3, [r2, #0]
 8007ab4:	4615      	mov	r5, r2
 8007ab6:	b933      	cbnz	r3, 8007ac6 <_free_r+0x32>
 8007ab8:	6063      	str	r3, [r4, #4]
 8007aba:	6014      	str	r4, [r2, #0]
 8007abc:	b003      	add	sp, #12
 8007abe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ac2:	f000 b8cd 	b.w	8007c60 <__malloc_unlock>
 8007ac6:	42a3      	cmp	r3, r4
 8007ac8:	d90b      	bls.n	8007ae2 <_free_r+0x4e>
 8007aca:	6821      	ldr	r1, [r4, #0]
 8007acc:	1862      	adds	r2, r4, r1
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	bf04      	itt	eq
 8007ad2:	681a      	ldreq	r2, [r3, #0]
 8007ad4:	685b      	ldreq	r3, [r3, #4]
 8007ad6:	6063      	str	r3, [r4, #4]
 8007ad8:	bf04      	itt	eq
 8007ada:	1852      	addeq	r2, r2, r1
 8007adc:	6022      	streq	r2, [r4, #0]
 8007ade:	602c      	str	r4, [r5, #0]
 8007ae0:	e7ec      	b.n	8007abc <_free_r+0x28>
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	b10b      	cbz	r3, 8007aec <_free_r+0x58>
 8007ae8:	42a3      	cmp	r3, r4
 8007aea:	d9fa      	bls.n	8007ae2 <_free_r+0x4e>
 8007aec:	6811      	ldr	r1, [r2, #0]
 8007aee:	1855      	adds	r5, r2, r1
 8007af0:	42a5      	cmp	r5, r4
 8007af2:	d10b      	bne.n	8007b0c <_free_r+0x78>
 8007af4:	6824      	ldr	r4, [r4, #0]
 8007af6:	4421      	add	r1, r4
 8007af8:	1854      	adds	r4, r2, r1
 8007afa:	42a3      	cmp	r3, r4
 8007afc:	6011      	str	r1, [r2, #0]
 8007afe:	d1dd      	bne.n	8007abc <_free_r+0x28>
 8007b00:	681c      	ldr	r4, [r3, #0]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	6053      	str	r3, [r2, #4]
 8007b06:	4421      	add	r1, r4
 8007b08:	6011      	str	r1, [r2, #0]
 8007b0a:	e7d7      	b.n	8007abc <_free_r+0x28>
 8007b0c:	d902      	bls.n	8007b14 <_free_r+0x80>
 8007b0e:	230c      	movs	r3, #12
 8007b10:	6003      	str	r3, [r0, #0]
 8007b12:	e7d3      	b.n	8007abc <_free_r+0x28>
 8007b14:	6825      	ldr	r5, [r4, #0]
 8007b16:	1961      	adds	r1, r4, r5
 8007b18:	428b      	cmp	r3, r1
 8007b1a:	bf04      	itt	eq
 8007b1c:	6819      	ldreq	r1, [r3, #0]
 8007b1e:	685b      	ldreq	r3, [r3, #4]
 8007b20:	6063      	str	r3, [r4, #4]
 8007b22:	bf04      	itt	eq
 8007b24:	1949      	addeq	r1, r1, r5
 8007b26:	6021      	streq	r1, [r4, #0]
 8007b28:	6054      	str	r4, [r2, #4]
 8007b2a:	e7c7      	b.n	8007abc <_free_r+0x28>
 8007b2c:	b003      	add	sp, #12
 8007b2e:	bd30      	pop	{r4, r5, pc}
 8007b30:	200001e0 	.word	0x200001e0

08007b34 <_malloc_r>:
 8007b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b36:	1ccd      	adds	r5, r1, #3
 8007b38:	f025 0503 	bic.w	r5, r5, #3
 8007b3c:	3508      	adds	r5, #8
 8007b3e:	2d0c      	cmp	r5, #12
 8007b40:	bf38      	it	cc
 8007b42:	250c      	movcc	r5, #12
 8007b44:	2d00      	cmp	r5, #0
 8007b46:	4606      	mov	r6, r0
 8007b48:	db01      	blt.n	8007b4e <_malloc_r+0x1a>
 8007b4a:	42a9      	cmp	r1, r5
 8007b4c:	d903      	bls.n	8007b56 <_malloc_r+0x22>
 8007b4e:	230c      	movs	r3, #12
 8007b50:	6033      	str	r3, [r6, #0]
 8007b52:	2000      	movs	r0, #0
 8007b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b56:	f000 f87d 	bl	8007c54 <__malloc_lock>
 8007b5a:	4921      	ldr	r1, [pc, #132]	; (8007be0 <_malloc_r+0xac>)
 8007b5c:	680a      	ldr	r2, [r1, #0]
 8007b5e:	4614      	mov	r4, r2
 8007b60:	b99c      	cbnz	r4, 8007b8a <_malloc_r+0x56>
 8007b62:	4f20      	ldr	r7, [pc, #128]	; (8007be4 <_malloc_r+0xb0>)
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	b923      	cbnz	r3, 8007b72 <_malloc_r+0x3e>
 8007b68:	4621      	mov	r1, r4
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	f000 f862 	bl	8007c34 <_sbrk_r>
 8007b70:	6038      	str	r0, [r7, #0]
 8007b72:	4629      	mov	r1, r5
 8007b74:	4630      	mov	r0, r6
 8007b76:	f000 f85d 	bl	8007c34 <_sbrk_r>
 8007b7a:	1c43      	adds	r3, r0, #1
 8007b7c:	d123      	bne.n	8007bc6 <_malloc_r+0x92>
 8007b7e:	230c      	movs	r3, #12
 8007b80:	6033      	str	r3, [r6, #0]
 8007b82:	4630      	mov	r0, r6
 8007b84:	f000 f86c 	bl	8007c60 <__malloc_unlock>
 8007b88:	e7e3      	b.n	8007b52 <_malloc_r+0x1e>
 8007b8a:	6823      	ldr	r3, [r4, #0]
 8007b8c:	1b5b      	subs	r3, r3, r5
 8007b8e:	d417      	bmi.n	8007bc0 <_malloc_r+0x8c>
 8007b90:	2b0b      	cmp	r3, #11
 8007b92:	d903      	bls.n	8007b9c <_malloc_r+0x68>
 8007b94:	6023      	str	r3, [r4, #0]
 8007b96:	441c      	add	r4, r3
 8007b98:	6025      	str	r5, [r4, #0]
 8007b9a:	e004      	b.n	8007ba6 <_malloc_r+0x72>
 8007b9c:	6863      	ldr	r3, [r4, #4]
 8007b9e:	42a2      	cmp	r2, r4
 8007ba0:	bf0c      	ite	eq
 8007ba2:	600b      	streq	r3, [r1, #0]
 8007ba4:	6053      	strne	r3, [r2, #4]
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	f000 f85a 	bl	8007c60 <__malloc_unlock>
 8007bac:	f104 000b 	add.w	r0, r4, #11
 8007bb0:	1d23      	adds	r3, r4, #4
 8007bb2:	f020 0007 	bic.w	r0, r0, #7
 8007bb6:	1ac2      	subs	r2, r0, r3
 8007bb8:	d0cc      	beq.n	8007b54 <_malloc_r+0x20>
 8007bba:	1a1b      	subs	r3, r3, r0
 8007bbc:	50a3      	str	r3, [r4, r2]
 8007bbe:	e7c9      	b.n	8007b54 <_malloc_r+0x20>
 8007bc0:	4622      	mov	r2, r4
 8007bc2:	6864      	ldr	r4, [r4, #4]
 8007bc4:	e7cc      	b.n	8007b60 <_malloc_r+0x2c>
 8007bc6:	1cc4      	adds	r4, r0, #3
 8007bc8:	f024 0403 	bic.w	r4, r4, #3
 8007bcc:	42a0      	cmp	r0, r4
 8007bce:	d0e3      	beq.n	8007b98 <_malloc_r+0x64>
 8007bd0:	1a21      	subs	r1, r4, r0
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	f000 f82e 	bl	8007c34 <_sbrk_r>
 8007bd8:	3001      	adds	r0, #1
 8007bda:	d1dd      	bne.n	8007b98 <_malloc_r+0x64>
 8007bdc:	e7cf      	b.n	8007b7e <_malloc_r+0x4a>
 8007bde:	bf00      	nop
 8007be0:	200001e0 	.word	0x200001e0
 8007be4:	200001e4 	.word	0x200001e4

08007be8 <_realloc_r>:
 8007be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bea:	4607      	mov	r7, r0
 8007bec:	4614      	mov	r4, r2
 8007bee:	460e      	mov	r6, r1
 8007bf0:	b921      	cbnz	r1, 8007bfc <_realloc_r+0x14>
 8007bf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007bf6:	4611      	mov	r1, r2
 8007bf8:	f7ff bf9c 	b.w	8007b34 <_malloc_r>
 8007bfc:	b922      	cbnz	r2, 8007c08 <_realloc_r+0x20>
 8007bfe:	f7ff ff49 	bl	8007a94 <_free_r>
 8007c02:	4625      	mov	r5, r4
 8007c04:	4628      	mov	r0, r5
 8007c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c08:	f000 f830 	bl	8007c6c <_malloc_usable_size_r>
 8007c0c:	42a0      	cmp	r0, r4
 8007c0e:	d20f      	bcs.n	8007c30 <_realloc_r+0x48>
 8007c10:	4621      	mov	r1, r4
 8007c12:	4638      	mov	r0, r7
 8007c14:	f7ff ff8e 	bl	8007b34 <_malloc_r>
 8007c18:	4605      	mov	r5, r0
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	d0f2      	beq.n	8007c04 <_realloc_r+0x1c>
 8007c1e:	4631      	mov	r1, r6
 8007c20:	4622      	mov	r2, r4
 8007c22:	f7ff ff0f 	bl	8007a44 <memcpy>
 8007c26:	4631      	mov	r1, r6
 8007c28:	4638      	mov	r0, r7
 8007c2a:	f7ff ff33 	bl	8007a94 <_free_r>
 8007c2e:	e7e9      	b.n	8007c04 <_realloc_r+0x1c>
 8007c30:	4635      	mov	r5, r6
 8007c32:	e7e7      	b.n	8007c04 <_realloc_r+0x1c>

08007c34 <_sbrk_r>:
 8007c34:	b538      	push	{r3, r4, r5, lr}
 8007c36:	4d06      	ldr	r5, [pc, #24]	; (8007c50 <_sbrk_r+0x1c>)
 8007c38:	2300      	movs	r3, #0
 8007c3a:	4604      	mov	r4, r0
 8007c3c:	4608      	mov	r0, r1
 8007c3e:	602b      	str	r3, [r5, #0]
 8007c40:	f7f9 fa0c 	bl	800105c <_sbrk>
 8007c44:	1c43      	adds	r3, r0, #1
 8007c46:	d102      	bne.n	8007c4e <_sbrk_r+0x1a>
 8007c48:	682b      	ldr	r3, [r5, #0]
 8007c4a:	b103      	cbz	r3, 8007c4e <_sbrk_r+0x1a>
 8007c4c:	6023      	str	r3, [r4, #0]
 8007c4e:	bd38      	pop	{r3, r4, r5, pc}
 8007c50:	20000720 	.word	0x20000720

08007c54 <__malloc_lock>:
 8007c54:	4801      	ldr	r0, [pc, #4]	; (8007c5c <__malloc_lock+0x8>)
 8007c56:	f000 b811 	b.w	8007c7c <__retarget_lock_acquire_recursive>
 8007c5a:	bf00      	nop
 8007c5c:	20000728 	.word	0x20000728

08007c60 <__malloc_unlock>:
 8007c60:	4801      	ldr	r0, [pc, #4]	; (8007c68 <__malloc_unlock+0x8>)
 8007c62:	f000 b80c 	b.w	8007c7e <__retarget_lock_release_recursive>
 8007c66:	bf00      	nop
 8007c68:	20000728 	.word	0x20000728

08007c6c <_malloc_usable_size_r>:
 8007c6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c70:	1f18      	subs	r0, r3, #4
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	bfbc      	itt	lt
 8007c76:	580b      	ldrlt	r3, [r1, r0]
 8007c78:	18c0      	addlt	r0, r0, r3
 8007c7a:	4770      	bx	lr

08007c7c <__retarget_lock_acquire_recursive>:
 8007c7c:	4770      	bx	lr

08007c7e <__retarget_lock_release_recursive>:
 8007c7e:	4770      	bx	lr

08007c80 <_init>:
 8007c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c82:	bf00      	nop
 8007c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c86:	bc08      	pop	{r3}
 8007c88:	469e      	mov	lr, r3
 8007c8a:	4770      	bx	lr

08007c8c <_fini>:
 8007c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8e:	bf00      	nop
 8007c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c92:	bc08      	pop	{r3}
 8007c94:	469e      	mov	lr, r3
 8007c96:	4770      	bx	lr
