
boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025d8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08002770  08002770  00012770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800287c  0800287c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800287c  0800287c  0001287c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002884  08002884  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002884  08002884  00012884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002888  08002888  00012888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800288c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002898  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002898  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0ed  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001855  00000000  00000000  0002a129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  0002b980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000620  00000000  00000000  0002c020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015860  00000000  00000000  0002c640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000097d1  00000000  00000000  00041ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008520f  00000000  00000000  0004b671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0880  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000190c  00000000  00000000  000d08d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002758 	.word	0x08002758

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002758 	.word	0x08002758

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001fc:	f000 b96e 	b.w	80004dc <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468c      	mov	ip, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	f040 8083 	bne.w	800032e <__udivmoddi4+0x116>
 8000228:	428a      	cmp	r2, r1
 800022a:	4617      	mov	r7, r2
 800022c:	d947      	bls.n	80002be <__udivmoddi4+0xa6>
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	b142      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000234:	f1c2 0020 	rsb	r0, r2, #32
 8000238:	fa24 f000 	lsr.w	r0, r4, r0
 800023c:	4091      	lsls	r1, r2
 800023e:	4097      	lsls	r7, r2
 8000240:	ea40 0c01 	orr.w	ip, r0, r1
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbbc f6f8 	udiv	r6, ip, r8
 8000250:	fa1f fe87 	uxth.w	lr, r7
 8000254:	fb08 c116 	mls	r1, r8, r6, ip
 8000258:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025c:	fb06 f10e 	mul.w	r1, r6, lr
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18fb      	adds	r3, r7, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026a:	f080 8119 	bcs.w	80004a0 <__udivmoddi4+0x288>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8116 	bls.w	80004a0 <__udivmoddi4+0x288>
 8000274:	3e02      	subs	r6, #2
 8000276:	443b      	add	r3, r7
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fe0e 	mul.w	lr, r0, lr
 800028c:	45a6      	cmp	lr, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	193c      	adds	r4, r7, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000296:	f080 8105 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800029a:	45a6      	cmp	lr, r4
 800029c:	f240 8102 	bls.w	80004a4 <__udivmoddi4+0x28c>
 80002a0:	3802      	subs	r0, #2
 80002a2:	443c      	add	r4, r7
 80002a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a8:	eba4 040e 	sub.w	r4, r4, lr
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	b902      	cbnz	r2, 80002c2 <__udivmoddi4+0xaa>
 80002c0:	deff      	udf	#255	; 0xff
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d150      	bne.n	800036c <__udivmoddi4+0x154>
 80002ca:	1bcb      	subs	r3, r1, r7
 80002cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d0:	fa1f f887 	uxth.w	r8, r7
 80002d4:	2601      	movs	r6, #1
 80002d6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002da:	0c21      	lsrs	r1, r4, #16
 80002dc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e4:	fb08 f30c 	mul.w	r3, r8, ip
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xe4>
 80002ec:	1879      	adds	r1, r7, r1
 80002ee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0xe2>
 80002f4:	428b      	cmp	r3, r1
 80002f6:	f200 80e9 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 80002fa:	4684      	mov	ip, r0
 80002fc:	1ac9      	subs	r1, r1, r3
 80002fe:	b2a3      	uxth	r3, r4
 8000300:	fbb1 f0fe 	udiv	r0, r1, lr
 8000304:	fb0e 1110 	mls	r1, lr, r0, r1
 8000308:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800030c:	fb08 f800 	mul.w	r8, r8, r0
 8000310:	45a0      	cmp	r8, r4
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x10c>
 8000314:	193c      	adds	r4, r7, r4
 8000316:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x10a>
 800031c:	45a0      	cmp	r8, r4
 800031e:	f200 80d9 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 8000322:	4618      	mov	r0, r3
 8000324:	eba4 0408 	sub.w	r4, r4, r8
 8000328:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800032c:	e7bf      	b.n	80002ae <__udivmoddi4+0x96>
 800032e:	428b      	cmp	r3, r1
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x12e>
 8000332:	2d00      	cmp	r5, #0
 8000334:	f000 80b1 	beq.w	800049a <__udivmoddi4+0x282>
 8000338:	2600      	movs	r6, #0
 800033a:	e9c5 0100 	strd	r0, r1, [r5]
 800033e:	4630      	mov	r0, r6
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	fab3 f683 	clz	r6, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d14a      	bne.n	80003e4 <__udivmoddi4+0x1cc>
 800034e:	428b      	cmp	r3, r1
 8000350:	d302      	bcc.n	8000358 <__udivmoddi4+0x140>
 8000352:	4282      	cmp	r2, r0
 8000354:	f200 80b8 	bhi.w	80004c8 <__udivmoddi4+0x2b0>
 8000358:	1a84      	subs	r4, r0, r2
 800035a:	eb61 0103 	sbc.w	r1, r1, r3
 800035e:	2001      	movs	r0, #1
 8000360:	468c      	mov	ip, r1
 8000362:	2d00      	cmp	r5, #0
 8000364:	d0a8      	beq.n	80002b8 <__udivmoddi4+0xa0>
 8000366:	e9c5 4c00 	strd	r4, ip, [r5]
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0xa0>
 800036c:	f1c2 0320 	rsb	r3, r2, #32
 8000370:	fa20 f603 	lsr.w	r6, r0, r3
 8000374:	4097      	lsls	r7, r2
 8000376:	fa01 f002 	lsl.w	r0, r1, r2
 800037a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037e:	40d9      	lsrs	r1, r3
 8000380:	4330      	orrs	r0, r6
 8000382:	0c03      	lsrs	r3, r0, #16
 8000384:	fbb1 f6fe 	udiv	r6, r1, lr
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f108 	mul.w	r1, r6, r8
 8000398:	4299      	cmp	r1, r3
 800039a:	fa04 f402 	lsl.w	r4, r4, r2
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x19c>
 80003a0:	18fb      	adds	r3, r7, r3
 80003a2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003a6:	f080 808d 	bcs.w	80004c4 <__udivmoddi4+0x2ac>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 808a 	bls.w	80004c4 <__udivmoddi4+0x2ac>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	443b      	add	r3, r7
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b281      	uxth	r1, r0
 80003b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c4:	fb00 f308 	mul.w	r3, r0, r8
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x1c4>
 80003cc:	1879      	adds	r1, r7, r1
 80003ce:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003d2:	d273      	bcs.n	80004bc <__udivmoddi4+0x2a4>
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d971      	bls.n	80004bc <__udivmoddi4+0x2a4>
 80003d8:	3802      	subs	r0, #2
 80003da:	4439      	add	r1, r7
 80003dc:	1acb      	subs	r3, r1, r3
 80003de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e2:	e778      	b.n	80002d6 <__udivmoddi4+0xbe>
 80003e4:	f1c6 0c20 	rsb	ip, r6, #32
 80003e8:	fa03 f406 	lsl.w	r4, r3, r6
 80003ec:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f0:	431c      	orrs	r4, r3
 80003f2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003f6:	fa01 f306 	lsl.w	r3, r1, r6
 80003fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003fe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000402:	431f      	orrs	r7, r3
 8000404:	0c3b      	lsrs	r3, r7, #16
 8000406:	fbb1 f9fe 	udiv	r9, r1, lr
 800040a:	fa1f f884 	uxth.w	r8, r4
 800040e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000412:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000416:	fb09 fa08 	mul.w	sl, r9, r8
 800041a:	458a      	cmp	sl, r1
 800041c:	fa02 f206 	lsl.w	r2, r2, r6
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x220>
 8000426:	1861      	adds	r1, r4, r1
 8000428:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800042c:	d248      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 800042e:	458a      	cmp	sl, r1
 8000430:	d946      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000432:	f1a9 0902 	sub.w	r9, r9, #2
 8000436:	4421      	add	r1, r4
 8000438:	eba1 010a 	sub.w	r1, r1, sl
 800043c:	b2bf      	uxth	r7, r7
 800043e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000442:	fb0e 1110 	mls	r1, lr, r0, r1
 8000446:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044a:	fb00 f808 	mul.w	r8, r0, r8
 800044e:	45b8      	cmp	r8, r7
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x24a>
 8000452:	19e7      	adds	r7, r4, r7
 8000454:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000458:	d22e      	bcs.n	80004b8 <__udivmoddi4+0x2a0>
 800045a:	45b8      	cmp	r8, r7
 800045c:	d92c      	bls.n	80004b8 <__udivmoddi4+0x2a0>
 800045e:	3802      	subs	r0, #2
 8000460:	4427      	add	r7, r4
 8000462:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000466:	eba7 0708 	sub.w	r7, r7, r8
 800046a:	fba0 8902 	umull	r8, r9, r0, r2
 800046e:	454f      	cmp	r7, r9
 8000470:	46c6      	mov	lr, r8
 8000472:	4649      	mov	r1, r9
 8000474:	d31a      	bcc.n	80004ac <__udivmoddi4+0x294>
 8000476:	d017      	beq.n	80004a8 <__udivmoddi4+0x290>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x27a>
 800047a:	ebb3 020e 	subs.w	r2, r3, lr
 800047e:	eb67 0701 	sbc.w	r7, r7, r1
 8000482:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000486:	40f2      	lsrs	r2, r6
 8000488:	ea4c 0202 	orr.w	r2, ip, r2
 800048c:	40f7      	lsrs	r7, r6
 800048e:	e9c5 2700 	strd	r2, r7, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e70b      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e9      	b.n	8000278 <__udivmoddi4+0x60>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fd      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004a8:	4543      	cmp	r3, r8
 80004aa:	d2e5      	bcs.n	8000478 <__udivmoddi4+0x260>
 80004ac:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b0:	eb69 0104 	sbc.w	r1, r9, r4
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7df      	b.n	8000478 <__udivmoddi4+0x260>
 80004b8:	4608      	mov	r0, r1
 80004ba:	e7d2      	b.n	8000462 <__udivmoddi4+0x24a>
 80004bc:	4660      	mov	r0, ip
 80004be:	e78d      	b.n	80003dc <__udivmoddi4+0x1c4>
 80004c0:	4681      	mov	r9, r0
 80004c2:	e7b9      	b.n	8000438 <__udivmoddi4+0x220>
 80004c4:	4666      	mov	r6, ip
 80004c6:	e775      	b.n	80003b4 <__udivmoddi4+0x19c>
 80004c8:	4630      	mov	r0, r6
 80004ca:	e74a      	b.n	8000362 <__udivmoddi4+0x14a>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	4439      	add	r1, r7
 80004d2:	e713      	b.n	80002fc <__udivmoddi4+0xe4>
 80004d4:	3802      	subs	r0, #2
 80004d6:	443c      	add	r4, r7
 80004d8:	e724      	b.n	8000324 <__udivmoddi4+0x10c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08c      	sub	sp, #48	; 0x30
 80004e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e6:	f107 031c 	add.w	r3, r7, #28
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
 80004f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004f6:	2300      	movs	r3, #0
 80004f8:	61bb      	str	r3, [r7, #24]
 80004fa:	4ba2      	ldr	r3, [pc, #648]	; (8000784 <MX_GPIO_Init+0x2a4>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	4aa1      	ldr	r2, [pc, #644]	; (8000784 <MX_GPIO_Init+0x2a4>)
 8000500:	f043 0310 	orr.w	r3, r3, #16
 8000504:	6313      	str	r3, [r2, #48]	; 0x30
 8000506:	4b9f      	ldr	r3, [pc, #636]	; (8000784 <MX_GPIO_Init+0x2a4>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	f003 0310 	and.w	r3, r3, #16
 800050e:	61bb      	str	r3, [r7, #24]
 8000510:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000512:	2300      	movs	r3, #0
 8000514:	617b      	str	r3, [r7, #20]
 8000516:	4b9b      	ldr	r3, [pc, #620]	; (8000784 <MX_GPIO_Init+0x2a4>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	4a9a      	ldr	r2, [pc, #616]	; (8000784 <MX_GPIO_Init+0x2a4>)
 800051c:	f043 0304 	orr.w	r3, r3, #4
 8000520:	6313      	str	r3, [r2, #48]	; 0x30
 8000522:	4b98      	ldr	r3, [pc, #608]	; (8000784 <MX_GPIO_Init+0x2a4>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	f003 0304 	and.w	r3, r3, #4
 800052a:	617b      	str	r3, [r7, #20]
 800052c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	613b      	str	r3, [r7, #16]
 8000532:	4b94      	ldr	r3, [pc, #592]	; (8000784 <MX_GPIO_Init+0x2a4>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	4a93      	ldr	r2, [pc, #588]	; (8000784 <MX_GPIO_Init+0x2a4>)
 8000538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800053c:	6313      	str	r3, [r2, #48]	; 0x30
 800053e:	4b91      	ldr	r3, [pc, #580]	; (8000784 <MX_GPIO_Init+0x2a4>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000546:	613b      	str	r3, [r7, #16]
 8000548:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054a:	2300      	movs	r3, #0
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	4b8d      	ldr	r3, [pc, #564]	; (8000784 <MX_GPIO_Init+0x2a4>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	4a8c      	ldr	r2, [pc, #560]	; (8000784 <MX_GPIO_Init+0x2a4>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6313      	str	r3, [r2, #48]	; 0x30
 800055a:	4b8a      	ldr	r3, [pc, #552]	; (8000784 <MX_GPIO_Init+0x2a4>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	4b86      	ldr	r3, [pc, #536]	; (8000784 <MX_GPIO_Init+0x2a4>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a85      	ldr	r2, [pc, #532]	; (8000784 <MX_GPIO_Init+0x2a4>)
 8000570:	f043 0302 	orr.w	r3, r3, #2
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b83      	ldr	r3, [pc, #524]	; (8000784 <MX_GPIO_Init+0x2a4>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f003 0302 	and.w	r3, r3, #2
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	4b7f      	ldr	r3, [pc, #508]	; (8000784 <MX_GPIO_Init+0x2a4>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a7e      	ldr	r2, [pc, #504]	; (8000784 <MX_GPIO_Init+0x2a4>)
 800058c:	f043 0308 	orr.w	r3, r3, #8
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b7c      	ldr	r3, [pc, #496]	; (8000784 <MX_GPIO_Init+0x2a4>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0308 	and.w	r3, r3, #8
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	2108      	movs	r1, #8
 80005a2:	4879      	ldr	r0, [pc, #484]	; (8000788 <MX_GPIO_Init+0x2a8>)
 80005a4:	f000 ffee 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2101      	movs	r1, #1
 80005ac:	4877      	ldr	r0, [pc, #476]	; (800078c <MX_GPIO_Init+0x2ac>)
 80005ae:	f000 ffe9 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005b2:	2200      	movs	r2, #0
 80005b4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005b8:	4875      	ldr	r0, [pc, #468]	; (8000790 <MX_GPIO_Init+0x2b0>)
 80005ba:	f000 ffe3 	bl	8001584 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005be:	2304      	movs	r3, #4
 80005c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c2:	2300      	movs	r3, #0
 80005c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	4619      	mov	r1, r3
 80005d0:	486d      	ldr	r0, [pc, #436]	; (8000788 <MX_GPIO_Init+0x2a8>)
 80005d2:	f000 fd15 	bl	8001000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005d6:	2308      	movs	r3, #8
 80005d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005da:	2301      	movs	r3, #1
 80005dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e2:	2300      	movs	r3, #0
 80005e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	4619      	mov	r1, r3
 80005ec:	4866      	ldr	r0, [pc, #408]	; (8000788 <MX_GPIO_Init+0x2a8>)
 80005ee:	f000 fd07 	bl	8001000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PEPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 80005f2:	2332      	movs	r3, #50	; 0x32
 80005f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005f6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80005fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000600:	f107 031c 	add.w	r3, r7, #28
 8000604:	4619      	mov	r1, r3
 8000606:	4860      	ldr	r0, [pc, #384]	; (8000788 <MX_GPIO_Init+0x2a8>)
 8000608:	f000 fcfa 	bl	8001000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800060c:	2301      	movs	r3, #1
 800060e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000610:	2301      	movs	r3, #1
 8000612:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000618:	2300      	movs	r3, #0
 800061a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800061c:	f107 031c 	add.w	r3, r7, #28
 8000620:	4619      	mov	r1, r3
 8000622:	485a      	ldr	r0, [pc, #360]	; (800078c <MX_GPIO_Init+0x2ac>)
 8000624:	f000 fcec 	bl	8001000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000628:	2308      	movs	r3, #8
 800062a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062c:	2302      	movs	r3, #2
 800062e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	2300      	movs	r3, #0
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000638:	2305      	movs	r3, #5
 800063a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800063c:	f107 031c 	add.w	r3, r7, #28
 8000640:	4619      	mov	r1, r3
 8000642:	4852      	ldr	r0, [pc, #328]	; (800078c <MX_GPIO_Init+0x2ac>)
 8000644:	f000 fcdc 	bl	8001000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000648:	2301      	movs	r3, #1
 800064a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800064c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000650:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	4619      	mov	r1, r3
 800065c:	484d      	ldr	r0, [pc, #308]	; (8000794 <MX_GPIO_Init+0x2b4>)
 800065e:	f000 fccf 	bl	8001000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000662:	2310      	movs	r3, #16
 8000664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000666:	2302      	movs	r3, #2
 8000668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2300      	movs	r3, #0
 8000670:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000672:	2306      	movs	r3, #6
 8000674:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	4619      	mov	r1, r3
 800067c:	4845      	ldr	r0, [pc, #276]	; (8000794 <MX_GPIO_Init+0x2b4>)
 800067e:	f000 fcbf 	bl	8001000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000682:	23e0      	movs	r3, #224	; 0xe0
 8000684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000686:	2302      	movs	r3, #2
 8000688:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068e:	2303      	movs	r3, #3
 8000690:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000692:	2305      	movs	r3, #5
 8000694:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	4619      	mov	r1, r3
 800069c:	483d      	ldr	r0, [pc, #244]	; (8000794 <MX_GPIO_Init+0x2b4>)
 800069e:	f000 fcaf 	bl	8001000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80006a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a8:	2302      	movs	r3, #2
 80006aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b0:	2300      	movs	r3, #0
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006b4:	2305      	movs	r3, #5
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4619      	mov	r1, r3
 80006be:	4836      	ldr	r0, [pc, #216]	; (8000798 <MX_GPIO_Init+0x2b8>)
 80006c0:	f000 fc9e 	bl	8001000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = BOOT1_Pin|OTG_FS_OverCurrent_Pin;
 80006c4:	f44f 7390 	mov.w	r3, #288	; 0x120
 80006c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ca:	2300      	movs	r3, #0
 80006cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	4619      	mov	r1, r3
 80006d8:	482d      	ldr	r0, [pc, #180]	; (8000790 <MX_GPIO_Init+0x2b0>)
 80006da:	f000 fc91 	bl	8001000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006de:	f24f 0310 	movw	r3, #61456	; 0xf010
 80006e2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e4:	2301      	movs	r3, #1
 80006e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2300      	movs	r3, #0
 80006ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	4619      	mov	r1, r3
 80006f6:	4826      	ldr	r0, [pc, #152]	; (8000790 <MX_GPIO_Init+0x2b0>)
 80006f8:	f000 fc82 	bl	8001000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80006fc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	2300      	movs	r3, #0
 800070c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800070e:	2306      	movs	r3, #6
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	4619      	mov	r1, r3
 8000718:	481c      	ldr	r0, [pc, #112]	; (800078c <MX_GPIO_Init+0x2ac>)
 800071a:	f000 fc71 	bl	8001000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800071e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000724:	2300      	movs	r3, #0
 8000726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	4818      	ldr	r0, [pc, #96]	; (8000794 <MX_GPIO_Init+0x2b4>)
 8000734:	f000 fc64 	bl	8001000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000738:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073e:	2302      	movs	r3, #2
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000746:	2303      	movs	r3, #3
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800074a:	230a      	movs	r3, #10
 800074c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	4619      	mov	r1, r3
 8000754:	480f      	ldr	r0, [pc, #60]	; (8000794 <MX_GPIO_Init+0x2b4>)
 8000756:	f000 fc53 	bl	8001000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800075a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800075e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000760:	2312      	movs	r3, #18
 8000762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2300      	movs	r3, #0
 800076a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800076c:	2304      	movs	r3, #4
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	4619      	mov	r1, r3
 8000776:	4808      	ldr	r0, [pc, #32]	; (8000798 <MX_GPIO_Init+0x2b8>)
 8000778:	f000 fc42 	bl	8001000 <HAL_GPIO_Init>

}
 800077c:	bf00      	nop
 800077e:	3730      	adds	r7, #48	; 0x30
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40023800 	.word	0x40023800
 8000788:	40021000 	.word	0x40021000
 800078c:	40020800 	.word	0x40020800
 8000790:	40020c00 	.word	0x40020c00
 8000794:	40020000 	.word	0x40020000
 8000798:	40020400 	.word	0x40020400

0800079c <MY_FLASH_SetSectorAddrs>:
	HAL_FLASH_Lock();
}


void MY_FLASH_SetSectorAddrs(uint8_t sector, uint32_t addrs)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	6039      	str	r1, [r7, #0]
 80007a6:	71fb      	strb	r3, [r7, #7]
	MY_SectorNum = sector;
 80007a8:	4a05      	ldr	r2, [pc, #20]	; (80007c0 <MY_FLASH_SetSectorAddrs+0x24>)
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	7013      	strb	r3, [r2, #0]
	MY_SectorAddrs = addrs;
 80007ae:	4a05      	ldr	r2, [pc, #20]	; (80007c4 <MY_FLASH_SetSectorAddrs+0x28>)
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	6013      	str	r3, [r2, #0]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	20000030 	.word	0x20000030
 80007c4:	20000034 	.word	0x20000034

080007c8 <MY_FLASH_ReadN>:
	HAL_FLASH_Lock();
}


void MY_FLASH_ReadN(uint32_t idx, void *rdBuf, uint32_t Nsize, DataTypeDef dataType)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b089      	sub	sp, #36	; 0x24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = MY_SectorAddrs + idx;
 80007d6:	4b29      	ldr	r3, [pc, #164]	; (800087c <MY_FLASH_ReadN+0xb4>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	4413      	add	r3, r2
 80007de:	61fb      	str	r3, [r7, #28]

	switch(dataType)
 80007e0:	78fb      	ldrb	r3, [r7, #3]
 80007e2:	2b02      	cmp	r3, #2
 80007e4:	d02f      	beq.n	8000846 <MY_FLASH_ReadN+0x7e>
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	dc42      	bgt.n	8000870 <MY_FLASH_ReadN+0xa8>
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d002      	beq.n	80007f4 <MY_FLASH_ReadN+0x2c>
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d014      	beq.n	800081c <MY_FLASH_ReadN+0x54>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
					flashAddress+=4;
				}
			break;
	}
}
 80007f2:	e03d      	b.n	8000870 <MY_FLASH_ReadN+0xa8>
				for(uint32_t i=0; i<Nsize; i++)
 80007f4:	2300      	movs	r3, #0
 80007f6:	61bb      	str	r3, [r7, #24]
 80007f8:	e00b      	b.n	8000812 <MY_FLASH_ReadN+0x4a>
					*((uint8_t *)rdBuf + i) = *(uint8_t *)flashAddress;
 80007fa:	69fa      	ldr	r2, [r7, #28]
 80007fc:	68b9      	ldr	r1, [r7, #8]
 80007fe:	69bb      	ldr	r3, [r7, #24]
 8000800:	440b      	add	r3, r1
 8000802:	7812      	ldrb	r2, [r2, #0]
 8000804:	701a      	strb	r2, [r3, #0]
					flashAddress++;
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	3301      	adds	r3, #1
 800080a:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	3301      	adds	r3, #1
 8000810:	61bb      	str	r3, [r7, #24]
 8000812:	69ba      	ldr	r2, [r7, #24]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	429a      	cmp	r2, r3
 8000818:	d3ef      	bcc.n	80007fa <MY_FLASH_ReadN+0x32>
			break;
 800081a:	e029      	b.n	8000870 <MY_FLASH_ReadN+0xa8>
				for(uint32_t i=0; i<Nsize; i++)
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
 8000820:	e00c      	b.n	800083c <MY_FLASH_ReadN+0x74>
					*((uint16_t *)rdBuf + i) = *(uint16_t *)flashAddress;
 8000822:	69fa      	ldr	r2, [r7, #28]
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	68b9      	ldr	r1, [r7, #8]
 800082a:	440b      	add	r3, r1
 800082c:	8812      	ldrh	r2, [r2, #0]
 800082e:	801a      	strh	r2, [r3, #0]
					flashAddress+=2;
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	3302      	adds	r3, #2
 8000834:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	3301      	adds	r3, #1
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697a      	ldr	r2, [r7, #20]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	429a      	cmp	r2, r3
 8000842:	d3ee      	bcc.n	8000822 <MY_FLASH_ReadN+0x5a>
			break;
 8000844:	e014      	b.n	8000870 <MY_FLASH_ReadN+0xa8>
				for(uint32_t i=0; i<Nsize; i++)
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	e00c      	b.n	8000866 <MY_FLASH_ReadN+0x9e>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
 800084c:	69fa      	ldr	r2, [r7, #28]
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	68b9      	ldr	r1, [r7, #8]
 8000854:	440b      	add	r3, r1
 8000856:	6812      	ldr	r2, [r2, #0]
 8000858:	601a      	str	r2, [r3, #0]
					flashAddress+=4;
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	3304      	adds	r3, #4
 800085e:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	3301      	adds	r3, #1
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	429a      	cmp	r2, r3
 800086c:	d3ee      	bcc.n	800084c <MY_FLASH_ReadN+0x84>
			break;
 800086e:	bf00      	nop
}
 8000870:	bf00      	nop
 8000872:	3724      	adds	r7, #36	; 0x24
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	20000034 	.word	0x20000034

08000880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b09c      	sub	sp, #112	; 0x70
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000886:	f000 fa1b 	bl	8000cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088a:	f000 f82d 	bl	80008e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088e:	f7ff fe27 	bl	80004e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000892:	f000 f979 	bl	8000b88 <MX_USART2_UART_Init>

  // when trying to program the board without this st link fails with
  // error DEV_TARGET_NOT_HALTED, as it tries to erase all the flash
  // memory and could not as the flash controller is busy with this
  // little procedure
  HAL_Delay(5000);
 8000896:	f241 3088 	movw	r0, #5000	; 0x1388
 800089a:	f000 fa83 	bl	8000da4 <HAL_Delay>

  char tw[50];
  memset(tw, 0, sizeof(tw));
 800089e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008a2:	2232      	movs	r2, #50	; 0x32
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 ff4e 	bl	8002748 <memset>
  strcpy(tw, "Testing");
 80008ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008b0:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <main+0x60>)
 80008b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008b6:	e883 0003 	stmia.w	r3, {r0, r1}

  size_t tl = strlen(tw);
 80008ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fc8a 	bl	80001d8 <strlen>
 80008c4:	66f8      	str	r0, [r7, #108]	; 0x6c

  MY_FLASH_SetSectorAddrs(7, 0x8060000);
 80008c6:	4907      	ldr	r1, [pc, #28]	; (80008e4 <main+0x64>)
 80008c8:	2007      	movs	r0, #7
 80008ca:	f7ff ff67 	bl	800079c <MY_FLASH_SetSectorAddrs>
  // MY_FLASH_WriteN(0, (uint8_t *) tw, (uint32_t) tl, DATA_TYPE_8);

  char tr[50];
  memset(tr, 0, sizeof(tr));
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2232      	movs	r2, #50	; 0x32
 80008d2:	2100      	movs	r1, #0
 80008d4:	4618      	mov	r0, r3
 80008d6:	f001 ff37 	bl	8002748 <memset>

  bootloaderInit();
 80008da:	f000 f86f 	bl	80009bc <bootloaderInit>
  // MY_FLASH_ReadN(0, (uint8_t *) tr, (uint32_t) tl, DATA_TYPE_8);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008de:	e7fe      	b.n	80008de <main+0x5e>
 80008e0:	08002770 	.word	0x08002770
 80008e4:	08060000 	.word	0x08060000

080008e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b094      	sub	sp, #80	; 0x50
 80008ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	f107 0320 	add.w	r3, r7, #32
 80008f2:	2230      	movs	r2, #48	; 0x30
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f001 ff26 	bl	8002748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <SystemClock_Config+0xcc>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000914:	4a27      	ldr	r2, [pc, #156]	; (80009b4 <SystemClock_Config+0xcc>)
 8000916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091a:	6413      	str	r3, [r2, #64]	; 0x40
 800091c:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <SystemClock_Config+0xcc>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <SystemClock_Config+0xd0>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a21      	ldr	r2, [pc, #132]	; (80009b8 <SystemClock_Config+0xd0>)
 8000932:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000936:	6013      	str	r3, [r2, #0]
 8000938:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <SystemClock_Config+0xd0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000944:	2302      	movs	r3, #2
 8000946:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000948:	2301      	movs	r3, #1
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800094c:	2310      	movs	r3, #16
 800094e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000950:	2302      	movs	r3, #2
 8000952:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000954:	2300      	movs	r3, #0
 8000956:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000958:	2308      	movs	r3, #8
 800095a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800095c:	23c0      	movs	r3, #192	; 0xc0
 800095e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000960:	2304      	movs	r3, #4
 8000962:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000964:	2308      	movs	r3, #8
 8000966:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000968:	f107 0320 	add.w	r3, r7, #32
 800096c:	4618      	mov	r0, r3
 800096e:	f000 fe3b 	bl	80015e8 <HAL_RCC_OscConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000978:	f000 f892 	bl	8000aa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097c:	230f      	movs	r3, #15
 800097e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000980:	2302      	movs	r3, #2
 8000982:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000988:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800098c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800098e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000992:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	2103      	movs	r1, #3
 800099a:	4618      	mov	r0, r3
 800099c:	f001 f94c 	bl	8001c38 <HAL_RCC_ClockConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009a6:	f000 f87b 	bl	8000aa0 <Error_Handler>
  }
}
 80009aa:	bf00      	nop
 80009ac:	3750      	adds	r7, #80	; 0x50
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40007000 	.word	0x40007000

080009bc <bootloaderInit>:

/* USER CODE BEGIN 4 */
void bootloaderInit()
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
	Flashed_offset = 0;
 80009c2:	4b28      	ldr	r3, [pc, #160]	; (8000a64 <bootloaderInit+0xa8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
	flashStatus = Unerased;
 80009c8:	4b27      	ldr	r3, [pc, #156]	; (8000a68 <bootloaderInit+0xac>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]
	BootloaderMode bootloaderMode;

	// based on pin value, determine bootloader mode
	if(HAL_GPIO_ReadPin(BOOT1_GPIO_Port, BOOT1_Pin) == GPIO_PIN_SET) {
 80009ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d2:	4826      	ldr	r0, [pc, #152]	; (8000a6c <bootloaderInit+0xb0>)
 80009d4:	f000 fdb0 	bl	8001538 <HAL_GPIO_ReadPin>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d102      	bne.n	80009e4 <bootloaderInit+0x28>
		bootloaderMode = FlashMode;
 80009de:	2301      	movs	r3, #1
 80009e0:	75fb      	strb	r3, [r7, #23]
 80009e2:	e001      	b.n	80009e8 <bootloaderInit+0x2c>

		// here we need to enable uart (or actually read all the data???)

	} else {
		bootloaderMode = JumpMode;
 80009e4:	2300      	movs	r3, #0
 80009e6:	75fb      	strb	r3, [r7, #23]
	}

	if(bootloaderMode == JumpMode)
 80009e8:	7dfb      	ldrb	r3, [r7, #23]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d136      	bne.n	8000a5c <bootloaderInit+0xa0>
	{
		char tr[4];
		memset(tr, 0, sizeof(tr));
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2204      	movs	r2, #4
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 fea7 	bl	8002748 <memset>

		uint8_t emptyCellCount = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	75bb      	strb	r3, [r7, #22]
		uint32_t idx = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]

		// TODO: ??? how many iterations should we conduct there?
		for(uint8_t i=0; i<10; i++)
 8000a02:	2300      	movs	r3, #0
 8000a04:	73fb      	strb	r3, [r7, #15]
 8000a06:	e01e      	b.n	8000a46 <bootloaderInit+0x8a>
		{
			MY_FLASH_ReadN(idx, (uint8_t *) tr, 4, DATA_TYPE_8);
 8000a08:	1d39      	adds	r1, r7, #4
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	2204      	movs	r2, #4
 8000a0e:	6938      	ldr	r0, [r7, #16]
 8000a10:	f7ff feda 	bl	80007c8 <MY_FLASH_ReadN>
			uint32_t word = tr[0] | (tr[1] << 8) | (tr[2] << 16) | (tr[3] << 24);
 8000a14:	793b      	ldrb	r3, [r7, #4]
 8000a16:	461a      	mov	r2, r3
 8000a18:	797b      	ldrb	r3, [r7, #5]
 8000a1a:	021b      	lsls	r3, r3, #8
 8000a1c:	431a      	orrs	r2, r3
 8000a1e:	79bb      	ldrb	r3, [r7, #6]
 8000a20:	041b      	lsls	r3, r3, #16
 8000a22:	431a      	orrs	r2, r3
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	061b      	lsls	r3, r3, #24
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
			if(word == 0xffffffff) {
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a32:	d102      	bne.n	8000a3a <bootloaderInit+0x7e>
				emptyCellCount++;
 8000a34:	7dbb      	ldrb	r3, [r7, #22]
 8000a36:	3301      	adds	r3, #1
 8000a38:	75bb      	strb	r3, [r7, #22]
			}

			idx += 4;
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	613b      	str	r3, [r7, #16]
		for(uint8_t i=0; i<10; i++)
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	3301      	adds	r3, #1
 8000a44:	73fb      	strb	r3, [r7, #15]
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	2b09      	cmp	r3, #9
 8000a4a:	d9dd      	bls.n	8000a08 <bootloaderInit+0x4c>
		}

		if(emptyCellCount != 10) {
 8000a4c:	7dbb      	ldrb	r3, [r7, #22]
 8000a4e:	2b0a      	cmp	r3, #10
 8000a50:	d002      	beq.n	8000a58 <bootloaderInit+0x9c>
			// jumpToApp(APP1_START);
			successBlink();
 8000a52:	f000 f819 	bl	8000a88 <successBlink>
		} else {
			errorBlink();
		}
	}
}
 8000a56:	e001      	b.n	8000a5c <bootloaderInit+0xa0>
			errorBlink();
 8000a58:	f000 f80a 	bl	8000a70 <errorBlink>
}
 8000a5c:	bf00      	nop
 8000a5e:	3718      	adds	r7, #24
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	2000002c 	.word	0x2000002c
 8000a68:	20000028 	.word	0x20000028
 8000a6c:	40020c00 	.word	0x40020c00

08000a70 <errorBlink>:

void errorBlink() {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8000a74:	2201      	movs	r2, #1
 8000a76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a7a:	4802      	ldr	r0, [pc, #8]	; (8000a84 <errorBlink+0x14>)
 8000a7c:	f000 fd82 	bl	8001584 <HAL_GPIO_WritePin>
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40020c00 	.word	0x40020c00

08000a88 <successBlink>:

void successBlink() {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a92:	4802      	ldr	r0, [pc, #8]	; (8000a9c <successBlink+0x14>)
 8000a94:	f000 fd76 	bl	8001584 <HAL_GPIO_WritePin>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40020c00 	.word	0x40020c00

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>

08000aaa <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <HAL_MspInit+0x4c>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	4a0f      	ldr	r2, [pc, #60]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <HAL_MspInit+0x4c>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_MspInit+0x4c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000afe:	2007      	movs	r0, #7
 8000b00:	f000 fa26 	bl	8000f50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40023800 	.word	0x40023800

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <NMI_Handler+0x4>

08000b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <MemManage_Handler+0x4>

08000b22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5c:	f000 f902 	bl	8000d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <SystemInit+0x20>)
 8000b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <SystemInit+0x20>)
 8000b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <MX_USART2_UART_Init+0x50>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000bc0:	f001 fade 	bl	8002180 <HAL_UART_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bca:	f7ff ff69 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000038 	.word	0x20000038
 8000bd8:	40004400 	.word	0x40004400

08000bdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	; 0x28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a19      	ldr	r2, [pc, #100]	; (8000c60 <HAL_UART_MspInit+0x84>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d12b      	bne.n	8000c56 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <HAL_UART_MspInit+0x88>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a17      	ldr	r2, [pc, #92]	; (8000c64 <HAL_UART_MspInit+0x88>)
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <HAL_UART_MspInit+0x88>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <HAL_UART_MspInit+0x88>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a10      	ldr	r2, [pc, #64]	; (8000c64 <HAL_UART_MspInit+0x88>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_UART_MspInit+0x88>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c36:	230c      	movs	r3, #12
 8000c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c42:	2303      	movs	r3, #3
 8000c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c46:	2307      	movs	r3, #7
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4805      	ldr	r0, [pc, #20]	; (8000c68 <HAL_UART_MspInit+0x8c>)
 8000c52:	f000 f9d5 	bl	8001000 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c56:	bf00      	nop
 8000c58:	3728      	adds	r7, #40	; 0x28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40004400 	.word	0x40004400
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020000 	.word	0x40020000

08000c6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c70:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c72:	490e      	ldr	r1, [pc, #56]	; (8000cac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c74:	4a0e      	ldr	r2, [pc, #56]	; (8000cb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c78:	e002      	b.n	8000c80 <LoopCopyDataInit>

08000c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7e:	3304      	adds	r3, #4

08000c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c84:	d3f9      	bcc.n	8000c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c86:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c88:	4c0b      	ldr	r4, [pc, #44]	; (8000cb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c8c:	e001      	b.n	8000c92 <LoopFillZerobss>

08000c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c90:	3204      	adds	r2, #4

08000c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c94:	d3fb      	bcc.n	8000c8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c96:	f7ff ff65 	bl	8000b64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c9a:	f001 fd31 	bl	8002700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9e:	f7ff fdef 	bl	8000880 <main>
  bx  lr    
 8000ca2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ca4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cb0:	0800288c 	.word	0x0800288c
  ldr r2, =_sbss
 8000cb4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cb8:	20000080 	.word	0x20000080

08000cbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC_IRQHandler>
	...

08000cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <HAL_Init+0x40>)
 8000cca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <HAL_Init+0x40>)
 8000cd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <HAL_Init+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <HAL_Init+0x40>)
 8000ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce8:	2003      	movs	r0, #3
 8000cea:	f000 f931 	bl	8000f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f000 f808 	bl	8000d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf4:	f7ff fee4 	bl	8000ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40023c00 	.word	0x40023c00

08000d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_InitTick+0x54>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <HAL_InitTick+0x58>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4619      	mov	r1, r3
 8000d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f960 	bl	8000fe8 <HAL_SYSTICK_Config>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00e      	b.n	8000d50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b0f      	cmp	r3, #15
 8000d36:	d80a      	bhi.n	8000d4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d40:	f000 f926 	bl	8000f90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d44:	4a06      	ldr	r2, [pc, #24]	; (8000d60 <HAL_InitTick+0x5c>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e000      	b.n	8000d50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	20000004 	.word	0x20000004

08000d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_IncTick+0x20>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_IncTick+0x24>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <HAL_IncTick+0x24>)
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000008 	.word	0x20000008
 8000d88:	2000007c 	.word	0x2000007c

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <HAL_GetTick+0x14>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	2000007c 	.word	0x2000007c

08000da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dac:	f7ff ffee 	bl	8000d8c <HAL_GetTick>
 8000db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dbc:	d005      	beq.n	8000dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <HAL_Delay+0x44>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dca:	bf00      	nop
 8000dcc:	f7ff ffde 	bl	8000d8c <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d8f7      	bhi.n	8000dcc <HAL_Delay+0x28>
  {
  }
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000008 	.word	0x20000008

08000dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1e:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	60d3      	str	r3, [r2, #12]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <__NVIC_GetPriorityGrouping+0x18>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	f003 0307 	and.w	r3, r3, #7
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	6039      	str	r1, [r7, #0]
 8000e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	db0a      	blt.n	8000e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	490c      	ldr	r1, [pc, #48]	; (8000e9c <__NVIC_SetPriority+0x4c>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	0112      	lsls	r2, r2, #4
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	440b      	add	r3, r1
 8000e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e78:	e00a      	b.n	8000e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4908      	ldr	r1, [pc, #32]	; (8000ea0 <__NVIC_SetPriority+0x50>)
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	f003 030f 	and.w	r3, r3, #15
 8000e86:	3b04      	subs	r3, #4
 8000e88:	0112      	lsls	r2, r2, #4
 8000e8a:	b2d2      	uxtb	r2, r2
 8000e8c:	440b      	add	r3, r1
 8000e8e:	761a      	strb	r2, [r3, #24]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000e100 	.word	0xe000e100
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b089      	sub	sp, #36	; 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f1c3 0307 	rsb	r3, r3, #7
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	bf28      	it	cs
 8000ec2:	2304      	movcs	r3, #4
 8000ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3304      	adds	r3, #4
 8000eca:	2b06      	cmp	r3, #6
 8000ecc:	d902      	bls.n	8000ed4 <NVIC_EncodePriority+0x30>
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3b03      	subs	r3, #3
 8000ed2:	e000      	b.n	8000ed6 <NVIC_EncodePriority+0x32>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43da      	mvns	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef6:	43d9      	mvns	r1, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	4313      	orrs	r3, r2
         );
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3724      	adds	r7, #36	; 0x24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
	...

08000f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f1c:	d301      	bcc.n	8000f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00f      	b.n	8000f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f22:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <SysTick_Config+0x40>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f2a:	210f      	movs	r1, #15
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f30:	f7ff ff8e 	bl	8000e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <SysTick_Config+0x40>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3a:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <SysTick_Config+0x40>)
 8000f3c:	2207      	movs	r2, #7
 8000f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	e000e010 	.word	0xe000e010

08000f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b07      	cmp	r3, #7
 8000f5c:	d00f      	beq.n	8000f7e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2b06      	cmp	r3, #6
 8000f62:	d00c      	beq.n	8000f7e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b05      	cmp	r3, #5
 8000f68:	d009      	beq.n	8000f7e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b04      	cmp	r3, #4
 8000f6e:	d006      	beq.n	8000f7e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	d003      	beq.n	8000f7e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f76:	2192      	movs	r1, #146	; 0x92
 8000f78:	4804      	ldr	r0, [pc, #16]	; (8000f8c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000f7a:	f7ff fd96 	bl	8000aaa <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ff34 	bl	8000dec <__NVIC_SetPriorityGrouping>
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	08002778 	.word	0x08002778

08000f90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	d903      	bls.n	8000fb0 <HAL_NVIC_SetPriority+0x20>
 8000fa8:	21aa      	movs	r1, #170	; 0xaa
 8000faa:	480e      	ldr	r0, [pc, #56]	; (8000fe4 <HAL_NVIC_SetPriority+0x54>)
 8000fac:	f7ff fd7d 	bl	8000aaa <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	2b0f      	cmp	r3, #15
 8000fb4:	d903      	bls.n	8000fbe <HAL_NVIC_SetPriority+0x2e>
 8000fb6:	21ab      	movs	r1, #171	; 0xab
 8000fb8:	480a      	ldr	r0, [pc, #40]	; (8000fe4 <HAL_NVIC_SetPriority+0x54>)
 8000fba:	f7ff fd76 	bl	8000aaa <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fbe:	f7ff ff39 	bl	8000e34 <__NVIC_GetPriorityGrouping>
 8000fc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	68b9      	ldr	r1, [r7, #8]
 8000fc8:	6978      	ldr	r0, [r7, #20]
 8000fca:	f7ff ff6b 	bl	8000ea4 <NVIC_EncodePriority>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ff3a 	bl	8000e50 <__NVIC_SetPriority>
}
 8000fdc:	bf00      	nop
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	08002778 	.word	0x08002778

08000fe8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff ff8b 	bl	8000f0c <SysTick_Config>
 8000ff6:	4603      	mov	r3, r0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a33      	ldr	r2, [pc, #204]	; (80010e8 <HAL_GPIO_Init+0xe8>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d017      	beq.n	800104e <HAL_GPIO_Init+0x4e>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a32      	ldr	r2, [pc, #200]	; (80010ec <HAL_GPIO_Init+0xec>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d013      	beq.n	800104e <HAL_GPIO_Init+0x4e>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a31      	ldr	r2, [pc, #196]	; (80010f0 <HAL_GPIO_Init+0xf0>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d00f      	beq.n	800104e <HAL_GPIO_Init+0x4e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a30      	ldr	r2, [pc, #192]	; (80010f4 <HAL_GPIO_Init+0xf4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d00b      	beq.n	800104e <HAL_GPIO_Init+0x4e>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a2f      	ldr	r2, [pc, #188]	; (80010f8 <HAL_GPIO_Init+0xf8>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d007      	beq.n	800104e <HAL_GPIO_Init+0x4e>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a2e      	ldr	r2, [pc, #184]	; (80010fc <HAL_GPIO_Init+0xfc>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x4e>
 8001046:	21ac      	movs	r1, #172	; 0xac
 8001048:	482d      	ldr	r0, [pc, #180]	; (8001100 <HAL_GPIO_Init+0x100>)
 800104a:	f7ff fd2e 	bl	8000aaa <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	b29b      	uxth	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d005      	beq.n	8001064 <HAL_GPIO_Init+0x64>
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	0c1b      	lsrs	r3, r3, #16
 800105e:	041b      	lsls	r3, r3, #16
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <HAL_GPIO_Init+0x6c>
 8001064:	21ad      	movs	r1, #173	; 0xad
 8001066:	4826      	ldr	r0, [pc, #152]	; (8001100 <HAL_GPIO_Init+0x100>)
 8001068:	f7ff fd1f 	bl	8000aaa <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d035      	beq.n	80010e0 <HAL_GPIO_Init+0xe0>
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d031      	beq.n	80010e0 <HAL_GPIO_Init+0xe0>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	2b11      	cmp	r3, #17
 8001082:	d02d      	beq.n	80010e0 <HAL_GPIO_Init+0xe0>
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b02      	cmp	r3, #2
 800108a:	d029      	beq.n	80010e0 <HAL_GPIO_Init+0xe0>
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b12      	cmp	r3, #18
 8001092:	d025      	beq.n	80010e0 <HAL_GPIO_Init+0xe0>
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800109c:	d020      	beq.n	80010e0 <HAL_GPIO_Init+0xe0>
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80010a6:	d01b      	beq.n	80010e0 <HAL_GPIO_Init+0xe0>
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80010b0:	d016      	beq.n	80010e0 <HAL_GPIO_Init+0xe0>
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80010ba:	d011      	beq.n	80010e0 <HAL_GPIO_Init+0xe0>
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80010c4:	d00c      	beq.n	80010e0 <HAL_GPIO_Init+0xe0>
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80010ce:	d007      	beq.n	80010e0 <HAL_GPIO_Init+0xe0>
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0xe0>
 80010d8:	21ae      	movs	r1, #174	; 0xae
 80010da:	4809      	ldr	r0, [pc, #36]	; (8001100 <HAL_GPIO_Init+0x100>)
 80010dc:	f7ff fce5 	bl	8000aaa <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
 80010e4:	e211      	b.n	800150a <HAL_GPIO_Init+0x50a>
 80010e6:	bf00      	nop
 80010e8:	40020000 	.word	0x40020000
 80010ec:	40020400 	.word	0x40020400
 80010f0:	40020800 	.word	0x40020800
 80010f4:	40020c00 	.word	0x40020c00
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40021c00 	.word	0x40021c00
 8001100:	080027b4 	.word	0x080027b4
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001104:	2201      	movs	r2, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	429a      	cmp	r2, r3
 800111e:	f040 81f1 	bne.w	8001504 <HAL_GPIO_Init+0x504>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	2b01      	cmp	r3, #1
 800112c:	d005      	beq.n	800113a <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001136:	2b02      	cmp	r3, #2
 8001138:	d144      	bne.n	80011c4 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00f      	beq.n	8001162 <HAL_GPIO_Init+0x162>
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d00b      	beq.n	8001162 <HAL_GPIO_Init+0x162>
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	2b02      	cmp	r3, #2
 8001150:	d007      	beq.n	8001162 <HAL_GPIO_Init+0x162>
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	2b03      	cmp	r3, #3
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x162>
 800115a:	21c0      	movs	r1, #192	; 0xc0
 800115c:	489f      	ldr	r0, [pc, #636]	; (80013dc <HAL_GPIO_Init+0x3dc>)
 800115e:	f7ff fca4 	bl	8000aaa <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	2203      	movs	r2, #3
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	68da      	ldr	r2, [r3, #12]
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001198:	2201      	movs	r2, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	091b      	lsrs	r3, r3, #4
 80011ae:	f003 0201 	and.w	r2, r3, #1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	d027      	beq.n	8001220 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d00b      	beq.n	80011f0 <HAL_GPIO_Init+0x1f0>
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d007      	beq.n	80011f0 <HAL_GPIO_Init+0x1f0>
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x1f0>
 80011e8:	21d1      	movs	r1, #209	; 0xd1
 80011ea:	487c      	ldr	r0, [pc, #496]	; (80013dc <HAL_GPIO_Init+0x3dc>)
 80011ec:	f7ff fc5d 	bl	8000aaa <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2203      	movs	r2, #3
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b02      	cmp	r3, #2
 800122a:	f040 80a0 	bne.w	800136e <HAL_GPIO_Init+0x36e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d077      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	2b09      	cmp	r3, #9
 800123c:	d073      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d06f      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d06b      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d067      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d063      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d05f      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d05b      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d057      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	2b02      	cmp	r3, #2
 800127c:	d053      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	2b02      	cmp	r3, #2
 8001284:	d04f      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	2b04      	cmp	r3, #4
 800128c:	d04b      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	2b04      	cmp	r3, #4
 8001294:	d047      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	2b04      	cmp	r3, #4
 800129c:	d043      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	2b05      	cmp	r3, #5
 80012a4:	d03f      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	2b05      	cmp	r3, #5
 80012ac:	d03b      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	2b05      	cmp	r3, #5
 80012b4:	d037      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	2b06      	cmp	r3, #6
 80012bc:	d033      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d02f      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	2b05      	cmp	r3, #5
 80012cc:	d02b      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	2b06      	cmp	r3, #6
 80012d4:	d027      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	2b07      	cmp	r3, #7
 80012dc:	d023      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	2b07      	cmp	r3, #7
 80012e4:	d01f      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	2b07      	cmp	r3, #7
 80012ec:	d01b      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	2b08      	cmp	r3, #8
 80012f4:	d017      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	2b0a      	cmp	r3, #10
 80012fc:	d013      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	2b09      	cmp	r3, #9
 8001304:	d00f      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	2b09      	cmp	r3, #9
 800130c:	d00b      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	2b0c      	cmp	r3, #12
 8001314:	d007      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	2b0f      	cmp	r3, #15
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x326>
 800131e:	21de      	movs	r1, #222	; 0xde
 8001320:	482e      	ldr	r0, [pc, #184]	; (80013dc <HAL_GPIO_Init+0x3dc>)
 8001322:	f7ff fbc2 	bl	8000aaa <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	08da      	lsrs	r2, r3, #3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3208      	adds	r2, #8
 800132e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	220f      	movs	r2, #15
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	691a      	ldr	r2, [r3, #16]
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	f003 0307 	and.w	r3, r3, #7
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	08da      	lsrs	r2, r3, #3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3208      	adds	r2, #8
 8001368:	69b9      	ldr	r1, [r7, #24]
 800136a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	2203      	movs	r2, #3
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 0203 	and.w	r2, r3, #3
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f000 80aa 	beq.w	8001504 <HAL_GPIO_Init+0x504>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <HAL_GPIO_Init+0x3e0>)
 80013b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b8:	4a09      	ldr	r2, [pc, #36]	; (80013e0 <HAL_GPIO_Init+0x3e0>)
 80013ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013be:	6453      	str	r3, [r2, #68]	; 0x44
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <HAL_GPIO_Init+0x3e0>)
 80013c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013cc:	4a05      	ldr	r2, [pc, #20]	; (80013e4 <HAL_GPIO_Init+0x3e4>)
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	3302      	adds	r3, #2
 80013d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d8:	e006      	b.n	80013e8 <HAL_GPIO_Init+0x3e8>
 80013da:	bf00      	nop
 80013dc:	080027b4 	.word	0x080027b4
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40013800 	.word	0x40013800
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	220f      	movs	r2, #15
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a46      	ldr	r2, [pc, #280]	; (800151c <HAL_GPIO_Init+0x51c>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d019      	beq.n	800143c <HAL_GPIO_Init+0x43c>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a45      	ldr	r2, [pc, #276]	; (8001520 <HAL_GPIO_Init+0x520>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d013      	beq.n	8001438 <HAL_GPIO_Init+0x438>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a44      	ldr	r2, [pc, #272]	; (8001524 <HAL_GPIO_Init+0x524>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d00d      	beq.n	8001434 <HAL_GPIO_Init+0x434>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a43      	ldr	r2, [pc, #268]	; (8001528 <HAL_GPIO_Init+0x528>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d007      	beq.n	8001430 <HAL_GPIO_Init+0x430>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a42      	ldr	r2, [pc, #264]	; (800152c <HAL_GPIO_Init+0x52c>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d101      	bne.n	800142c <HAL_GPIO_Init+0x42c>
 8001428:	2304      	movs	r3, #4
 800142a:	e008      	b.n	800143e <HAL_GPIO_Init+0x43e>
 800142c:	2307      	movs	r3, #7
 800142e:	e006      	b.n	800143e <HAL_GPIO_Init+0x43e>
 8001430:	2303      	movs	r3, #3
 8001432:	e004      	b.n	800143e <HAL_GPIO_Init+0x43e>
 8001434:	2302      	movs	r3, #2
 8001436:	e002      	b.n	800143e <HAL_GPIO_Init+0x43e>
 8001438:	2301      	movs	r3, #1
 800143a:	e000      	b.n	800143e <HAL_GPIO_Init+0x43e>
 800143c:	2300      	movs	r3, #0
 800143e:	69fa      	ldr	r2, [r7, #28]
 8001440:	f002 0203 	and.w	r2, r2, #3
 8001444:	0092      	lsls	r2, r2, #2
 8001446:	4093      	lsls	r3, r2
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800144e:	4938      	ldr	r1, [pc, #224]	; (8001530 <HAL_GPIO_Init+0x530>)
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	089b      	lsrs	r3, r3, #2
 8001454:	3302      	adds	r3, #2
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800145c:	4b35      	ldr	r3, [pc, #212]	; (8001534 <HAL_GPIO_Init+0x534>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001480:	4a2c      	ldr	r2, [pc, #176]	; (8001534 <HAL_GPIO_Init+0x534>)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001486:	4b2b      	ldr	r3, [pc, #172]	; (8001534 <HAL_GPIO_Init+0x534>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014aa:	4a22      	ldr	r2, [pc, #136]	; (8001534 <HAL_GPIO_Init+0x534>)
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014b0:	4b20      	ldr	r3, [pc, #128]	; (8001534 <HAL_GPIO_Init+0x534>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014d4:	4a17      	ldr	r2, [pc, #92]	; (8001534 <HAL_GPIO_Init+0x534>)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <HAL_GPIO_Init+0x534>)
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x4fe>
        {
          temp |= iocurrent;
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014fe:	4a0d      	ldr	r2, [pc, #52]	; (8001534 <HAL_GPIO_Init+0x534>)
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	3301      	adds	r3, #1
 8001508:	61fb      	str	r3, [r7, #28]
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	2b0f      	cmp	r3, #15
 800150e:	f67f adf9 	bls.w	8001104 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8001512:	bf00      	nop
 8001514:	bf00      	nop
 8001516:	3720      	adds	r7, #32
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40020000 	.word	0x40020000
 8001520:	40020400 	.word	0x40020400
 8001524:	40020800 	.word	0x40020800
 8001528:	40020c00 	.word	0x40020c00
 800152c:	40021000 	.word	0x40021000
 8001530:	40013800 	.word	0x40013800
 8001534:	40013c00 	.word	0x40013c00

08001538 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001544:	887b      	ldrh	r3, [r7, #2]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d004      	beq.n	8001554 <HAL_GPIO_ReadPin+0x1c>
 800154a:	887b      	ldrh	r3, [r7, #2]
 800154c:	0c1b      	lsrs	r3, r3, #16
 800154e:	041b      	lsls	r3, r3, #16
 8001550:	2b00      	cmp	r3, #0
 8001552:	d004      	beq.n	800155e <HAL_GPIO_ReadPin+0x26>
 8001554:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001558:	4809      	ldr	r0, [pc, #36]	; (8001580 <HAL_GPIO_ReadPin+0x48>)
 800155a:	f7ff faa6 	bl	8000aaa <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691a      	ldr	r2, [r3, #16]
 8001562:	887b      	ldrh	r3, [r7, #2]
 8001564:	4013      	ands	r3, r2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d002      	beq.n	8001570 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800156a:	2301      	movs	r3, #1
 800156c:	73fb      	strb	r3, [r7, #15]
 800156e:	e001      	b.n	8001574 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001570:	2300      	movs	r3, #0
 8001572:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001574:	7bfb      	ldrb	r3, [r7, #15]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	080027b4 	.word	0x080027b4

08001584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	807b      	strh	r3, [r7, #2]
 8001590:	4613      	mov	r3, r2
 8001592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001594:	887b      	ldrh	r3, [r7, #2]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d004      	beq.n	80015a4 <HAL_GPIO_WritePin+0x20>
 800159a:	887b      	ldrh	r3, [r7, #2]
 800159c:	0c1b      	lsrs	r3, r3, #16
 800159e:	041b      	lsls	r3, r3, #16
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d004      	beq.n	80015ae <HAL_GPIO_WritePin+0x2a>
 80015a4:	f240 119d 	movw	r1, #413	; 0x19d
 80015a8:	480e      	ldr	r0, [pc, #56]	; (80015e4 <HAL_GPIO_WritePin+0x60>)
 80015aa:	f7ff fa7e 	bl	8000aaa <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80015ae:	787b      	ldrb	r3, [r7, #1]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d007      	beq.n	80015c4 <HAL_GPIO_WritePin+0x40>
 80015b4:	787b      	ldrb	r3, [r7, #1]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d004      	beq.n	80015c4 <HAL_GPIO_WritePin+0x40>
 80015ba:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80015be:	4809      	ldr	r0, [pc, #36]	; (80015e4 <HAL_GPIO_WritePin+0x60>)
 80015c0:	f7ff fa73 	bl	8000aaa <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80015c4:	787b      	ldrb	r3, [r7, #1]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ca:	887a      	ldrh	r2, [r7, #2]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015d0:	e003      	b.n	80015da <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015d2:	887b      	ldrh	r3, [r7, #2]
 80015d4:	041a      	lsls	r2, r3, #16
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	619a      	str	r2, [r3, #24]
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	080027b4 	.word	0x080027b4

080015e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e316      	b.n	8001c28 <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b0f      	cmp	r3, #15
 8001600:	d903      	bls.n	800160a <HAL_RCC_OscConfig+0x22>
 8001602:	21e8      	movs	r1, #232	; 0xe8
 8001604:	48a3      	ldr	r0, [pc, #652]	; (8001894 <HAL_RCC_OscConfig+0x2ac>)
 8001606:	f7ff fa50 	bl	8000aaa <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 8088 	beq.w	8001728 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00d      	beq.n	800163c <HAL_RCC_OscConfig+0x54>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001628:	d008      	beq.n	800163c <HAL_RCC_OscConfig+0x54>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001632:	d003      	beq.n	800163c <HAL_RCC_OscConfig+0x54>
 8001634:	21ed      	movs	r1, #237	; 0xed
 8001636:	4897      	ldr	r0, [pc, #604]	; (8001894 <HAL_RCC_OscConfig+0x2ac>)
 8001638:	f7ff fa37 	bl	8000aaa <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800163c:	4b96      	ldr	r3, [pc, #600]	; (8001898 <HAL_RCC_OscConfig+0x2b0>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 030c 	and.w	r3, r3, #12
 8001644:	2b04      	cmp	r3, #4
 8001646:	d00c      	beq.n	8001662 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001648:	4b93      	ldr	r3, [pc, #588]	; (8001898 <HAL_RCC_OscConfig+0x2b0>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001650:	2b08      	cmp	r3, #8
 8001652:	d112      	bne.n	800167a <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001654:	4b90      	ldr	r3, [pc, #576]	; (8001898 <HAL_RCC_OscConfig+0x2b0>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800165c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001660:	d10b      	bne.n	800167a <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001662:	4b8d      	ldr	r3, [pc, #564]	; (8001898 <HAL_RCC_OscConfig+0x2b0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d05b      	beq.n	8001726 <HAL_RCC_OscConfig+0x13e>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d157      	bne.n	8001726 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e2d6      	b.n	8001c28 <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001682:	d106      	bne.n	8001692 <HAL_RCC_OscConfig+0xaa>
 8001684:	4b84      	ldr	r3, [pc, #528]	; (8001898 <HAL_RCC_OscConfig+0x2b0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a83      	ldr	r2, [pc, #524]	; (8001898 <HAL_RCC_OscConfig+0x2b0>)
 800168a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	e01d      	b.n	80016ce <HAL_RCC_OscConfig+0xe6>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800169a:	d10c      	bne.n	80016b6 <HAL_RCC_OscConfig+0xce>
 800169c:	4b7e      	ldr	r3, [pc, #504]	; (8001898 <HAL_RCC_OscConfig+0x2b0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a7d      	ldr	r2, [pc, #500]	; (8001898 <HAL_RCC_OscConfig+0x2b0>)
 80016a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	4b7b      	ldr	r3, [pc, #492]	; (8001898 <HAL_RCC_OscConfig+0x2b0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a7a      	ldr	r2, [pc, #488]	; (8001898 <HAL_RCC_OscConfig+0x2b0>)
 80016ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	e00b      	b.n	80016ce <HAL_RCC_OscConfig+0xe6>
 80016b6:	4b78      	ldr	r3, [pc, #480]	; (8001898 <HAL_RCC_OscConfig+0x2b0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a77      	ldr	r2, [pc, #476]	; (8001898 <HAL_RCC_OscConfig+0x2b0>)
 80016bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	4b75      	ldr	r3, [pc, #468]	; (8001898 <HAL_RCC_OscConfig+0x2b0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a74      	ldr	r2, [pc, #464]	; (8001898 <HAL_RCC_OscConfig+0x2b0>)
 80016c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d013      	beq.n	80016fe <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d6:	f7ff fb59 	bl	8000d8c <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016de:	f7ff fb55 	bl	8000d8c <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b64      	cmp	r3, #100	; 0x64
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e29b      	b.n	8001c28 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f0:	4b69      	ldr	r3, [pc, #420]	; (8001898 <HAL_RCC_OscConfig+0x2b0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0xf6>
 80016fc:	e014      	b.n	8001728 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fe:	f7ff fb45 	bl	8000d8c <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001706:	f7ff fb41 	bl	8000d8c <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b64      	cmp	r3, #100	; 0x64
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e287      	b.n	8001c28 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001718:	4b5f      	ldr	r3, [pc, #380]	; (8001898 <HAL_RCC_OscConfig+0x2b0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1f0      	bne.n	8001706 <HAL_RCC_OscConfig+0x11e>
 8001724:	e000      	b.n	8001728 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001726:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d079      	beq.n	8001828 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d008      	beq.n	800174e <HAL_RCC_OscConfig+0x166>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d004      	beq.n	800174e <HAL_RCC_OscConfig+0x166>
 8001744:	f240 111f 	movw	r1, #287	; 0x11f
 8001748:	4852      	ldr	r0, [pc, #328]	; (8001894 <HAL_RCC_OscConfig+0x2ac>)
 800174a:	f7ff f9ae 	bl	8000aaa <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	2b1f      	cmp	r3, #31
 8001754:	d904      	bls.n	8001760 <HAL_RCC_OscConfig+0x178>
 8001756:	f44f 7190 	mov.w	r1, #288	; 0x120
 800175a:	484e      	ldr	r0, [pc, #312]	; (8001894 <HAL_RCC_OscConfig+0x2ac>)
 800175c:	f7ff f9a5 	bl	8000aaa <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001760:	4b4d      	ldr	r3, [pc, #308]	; (8001898 <HAL_RCC_OscConfig+0x2b0>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 030c 	and.w	r3, r3, #12
 8001768:	2b00      	cmp	r3, #0
 800176a:	d00b      	beq.n	8001784 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800176c:	4b4a      	ldr	r3, [pc, #296]	; (8001898 <HAL_RCC_OscConfig+0x2b0>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001774:	2b08      	cmp	r3, #8
 8001776:	d11c      	bne.n	80017b2 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001778:	4b47      	ldr	r3, [pc, #284]	; (8001898 <HAL_RCC_OscConfig+0x2b0>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d116      	bne.n	80017b2 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001784:	4b44      	ldr	r3, [pc, #272]	; (8001898 <HAL_RCC_OscConfig+0x2b0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_RCC_OscConfig+0x1b4>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d001      	beq.n	800179c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e245      	b.n	8001c28 <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179c:	4b3e      	ldr	r3, [pc, #248]	; (8001898 <HAL_RCC_OscConfig+0x2b0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	493b      	ldr	r1, [pc, #236]	; (8001898 <HAL_RCC_OscConfig+0x2b0>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b0:	e03a      	b.n	8001828 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d020      	beq.n	80017fc <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017ba:	4b38      	ldr	r3, [pc, #224]	; (800189c <HAL_RCC_OscConfig+0x2b4>)
 80017bc:	2201      	movs	r2, #1
 80017be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c0:	f7ff fae4 	bl	8000d8c <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017c8:	f7ff fae0 	bl	8000d8c <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e226      	b.n	8001c28 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017da:	4b2f      	ldr	r3, [pc, #188]	; (8001898 <HAL_RCC_OscConfig+0x2b0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e6:	4b2c      	ldr	r3, [pc, #176]	; (8001898 <HAL_RCC_OscConfig+0x2b0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	4928      	ldr	r1, [pc, #160]	; (8001898 <HAL_RCC_OscConfig+0x2b0>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	600b      	str	r3, [r1, #0]
 80017fa:	e015      	b.n	8001828 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017fc:	4b27      	ldr	r3, [pc, #156]	; (800189c <HAL_RCC_OscConfig+0x2b4>)
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001802:	f7ff fac3 	bl	8000d8c <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800180a:	f7ff fabf 	bl	8000d8c <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e205      	b.n	8001c28 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800181c:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <HAL_RCC_OscConfig+0x2b0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1f0      	bne.n	800180a <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0308 	and.w	r3, r3, #8
 8001830:	2b00      	cmp	r3, #0
 8001832:	d046      	beq.n	80018c2 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d008      	beq.n	800184e <HAL_RCC_OscConfig+0x266>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d004      	beq.n	800184e <HAL_RCC_OscConfig+0x266>
 8001844:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8001848:	4812      	ldr	r0, [pc, #72]	; (8001894 <HAL_RCC_OscConfig+0x2ac>)
 800184a:	f7ff f92e 	bl	8000aaa <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d016      	beq.n	8001884 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001856:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <HAL_RCC_OscConfig+0x2b8>)
 8001858:	2201      	movs	r2, #1
 800185a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185c:	f7ff fa96 	bl	8000d8c <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001864:	f7ff fa92 	bl	8000d8c <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e1d8      	b.n	8001c28 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001876:	4b08      	ldr	r3, [pc, #32]	; (8001898 <HAL_RCC_OscConfig+0x2b0>)
 8001878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0x27c>
 8001882:	e01e      	b.n	80018c2 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_RCC_OscConfig+0x2b8>)
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188a:	f7ff fa7f 	bl	8000d8c <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001890:	e011      	b.n	80018b6 <HAL_RCC_OscConfig+0x2ce>
 8001892:	bf00      	nop
 8001894:	080027f0 	.word	0x080027f0
 8001898:	40023800 	.word	0x40023800
 800189c:	42470000 	.word	0x42470000
 80018a0:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a4:	f7ff fa72 	bl	8000d8c <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e1b8      	b.n	8001c28 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b6:	4b97      	ldr	r3, [pc, #604]	; (8001b14 <HAL_RCC_OscConfig+0x52c>)
 80018b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f0      	bne.n	80018a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0304 	and.w	r3, r3, #4
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 80a8 	beq.w	8001a20 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018d0:	2300      	movs	r3, #0
 80018d2:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00c      	beq.n	80018f6 <HAL_RCC_OscConfig+0x30e>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d008      	beq.n	80018f6 <HAL_RCC_OscConfig+0x30e>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b05      	cmp	r3, #5
 80018ea:	d004      	beq.n	80018f6 <HAL_RCC_OscConfig+0x30e>
 80018ec:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80018f0:	4889      	ldr	r0, [pc, #548]	; (8001b18 <HAL_RCC_OscConfig+0x530>)
 80018f2:	f7ff f8da 	bl	8000aaa <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018f6:	4b87      	ldr	r3, [pc, #540]	; (8001b14 <HAL_RCC_OscConfig+0x52c>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10f      	bne.n	8001922 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	4b83      	ldr	r3, [pc, #524]	; (8001b14 <HAL_RCC_OscConfig+0x52c>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a82      	ldr	r2, [pc, #520]	; (8001b14 <HAL_RCC_OscConfig+0x52c>)
 800190c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001910:	6413      	str	r3, [r2, #64]	; 0x40
 8001912:	4b80      	ldr	r3, [pc, #512]	; (8001b14 <HAL_RCC_OscConfig+0x52c>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800191e:	2301      	movs	r3, #1
 8001920:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001922:	4b7e      	ldr	r3, [pc, #504]	; (8001b1c <HAL_RCC_OscConfig+0x534>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192a:	2b00      	cmp	r3, #0
 800192c:	d118      	bne.n	8001960 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800192e:	4b7b      	ldr	r3, [pc, #492]	; (8001b1c <HAL_RCC_OscConfig+0x534>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a7a      	ldr	r2, [pc, #488]	; (8001b1c <HAL_RCC_OscConfig+0x534>)
 8001934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800193a:	f7ff fa27 	bl	8000d8c <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001942:	f7ff fa23 	bl	8000d8c <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e169      	b.n	8001c28 <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001954:	4b71      	ldr	r3, [pc, #452]	; (8001b1c <HAL_RCC_OscConfig+0x534>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d106      	bne.n	8001976 <HAL_RCC_OscConfig+0x38e>
 8001968:	4b6a      	ldr	r3, [pc, #424]	; (8001b14 <HAL_RCC_OscConfig+0x52c>)
 800196a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196c:	4a69      	ldr	r2, [pc, #420]	; (8001b14 <HAL_RCC_OscConfig+0x52c>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6713      	str	r3, [r2, #112]	; 0x70
 8001974:	e01c      	b.n	80019b0 <HAL_RCC_OscConfig+0x3c8>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b05      	cmp	r3, #5
 800197c:	d10c      	bne.n	8001998 <HAL_RCC_OscConfig+0x3b0>
 800197e:	4b65      	ldr	r3, [pc, #404]	; (8001b14 <HAL_RCC_OscConfig+0x52c>)
 8001980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001982:	4a64      	ldr	r2, [pc, #400]	; (8001b14 <HAL_RCC_OscConfig+0x52c>)
 8001984:	f043 0304 	orr.w	r3, r3, #4
 8001988:	6713      	str	r3, [r2, #112]	; 0x70
 800198a:	4b62      	ldr	r3, [pc, #392]	; (8001b14 <HAL_RCC_OscConfig+0x52c>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198e:	4a61      	ldr	r2, [pc, #388]	; (8001b14 <HAL_RCC_OscConfig+0x52c>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	6713      	str	r3, [r2, #112]	; 0x70
 8001996:	e00b      	b.n	80019b0 <HAL_RCC_OscConfig+0x3c8>
 8001998:	4b5e      	ldr	r3, [pc, #376]	; (8001b14 <HAL_RCC_OscConfig+0x52c>)
 800199a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199c:	4a5d      	ldr	r2, [pc, #372]	; (8001b14 <HAL_RCC_OscConfig+0x52c>)
 800199e:	f023 0301 	bic.w	r3, r3, #1
 80019a2:	6713      	str	r3, [r2, #112]	; 0x70
 80019a4:	4b5b      	ldr	r3, [pc, #364]	; (8001b14 <HAL_RCC_OscConfig+0x52c>)
 80019a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a8:	4a5a      	ldr	r2, [pc, #360]	; (8001b14 <HAL_RCC_OscConfig+0x52c>)
 80019aa:	f023 0304 	bic.w	r3, r3, #4
 80019ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d015      	beq.n	80019e4 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b8:	f7ff f9e8 	bl	8000d8c <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019be:	e00a      	b.n	80019d6 <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c0:	f7ff f9e4 	bl	8000d8c <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e128      	b.n	8001c28 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d6:	4b4f      	ldr	r3, [pc, #316]	; (8001b14 <HAL_RCC_OscConfig+0x52c>)
 80019d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0ee      	beq.n	80019c0 <HAL_RCC_OscConfig+0x3d8>
 80019e2:	e014      	b.n	8001a0e <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e4:	f7ff f9d2 	bl	8000d8c <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ea:	e00a      	b.n	8001a02 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ec:	f7ff f9ce 	bl	8000d8c <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e112      	b.n	8001c28 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a02:	4b44      	ldr	r3, [pc, #272]	; (8001b14 <HAL_RCC_OscConfig+0x52c>)
 8001a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1ee      	bne.n	80019ec <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a0e:	7dfb      	ldrb	r3, [r7, #23]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d105      	bne.n	8001a20 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a14:	4b3f      	ldr	r3, [pc, #252]	; (8001b14 <HAL_RCC_OscConfig+0x52c>)
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	4a3e      	ldr	r2, [pc, #248]	; (8001b14 <HAL_RCC_OscConfig+0x52c>)
 8001a1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d00c      	beq.n	8001a42 <HAL_RCC_OscConfig+0x45a>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d008      	beq.n	8001a42 <HAL_RCC_OscConfig+0x45a>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d004      	beq.n	8001a42 <HAL_RCC_OscConfig+0x45a>
 8001a38:	f240 11cf 	movw	r1, #463	; 0x1cf
 8001a3c:	4836      	ldr	r0, [pc, #216]	; (8001b18 <HAL_RCC_OscConfig+0x530>)
 8001a3e:	f7ff f834 	bl	8000aaa <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 80ed 	beq.w	8001c26 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a4c:	4b31      	ldr	r3, [pc, #196]	; (8001b14 <HAL_RCC_OscConfig+0x52c>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 030c 	and.w	r3, r3, #12
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	f000 80ae 	beq.w	8001bb6 <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	f040 8092 	bne.w	8001b88 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d009      	beq.n	8001a80 <HAL_RCC_OscConfig+0x498>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a74:	d004      	beq.n	8001a80 <HAL_RCC_OscConfig+0x498>
 8001a76:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001a7a:	4827      	ldr	r0, [pc, #156]	; (8001b18 <HAL_RCC_OscConfig+0x530>)
 8001a7c:	f7ff f815 	bl	8000aaa <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	2b3f      	cmp	r3, #63	; 0x3f
 8001a86:	d904      	bls.n	8001a92 <HAL_RCC_OscConfig+0x4aa>
 8001a88:	f240 11d9 	movw	r1, #473	; 0x1d9
 8001a8c:	4822      	ldr	r0, [pc, #136]	; (8001b18 <HAL_RCC_OscConfig+0x530>)
 8001a8e:	f7ff f80c 	bl	8000aaa <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	2b31      	cmp	r3, #49	; 0x31
 8001a98:	d904      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x4bc>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8001aa2:	d904      	bls.n	8001aae <HAL_RCC_OscConfig+0x4c6>
 8001aa4:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8001aa8:	481b      	ldr	r0, [pc, #108]	; (8001b18 <HAL_RCC_OscConfig+0x530>)
 8001aaa:	f7fe fffe 	bl	8000aaa <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d010      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x4f0>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d00c      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x4f0>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac2:	2b06      	cmp	r3, #6
 8001ac4:	d008      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x4f0>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d004      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x4f0>
 8001ace:	f240 11db 	movw	r1, #475	; 0x1db
 8001ad2:	4811      	ldr	r0, [pc, #68]	; (8001b18 <HAL_RCC_OscConfig+0x530>)
 8001ad4:	f7fe ffe9 	bl	8000aaa <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d903      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x500>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae4:	2b0f      	cmp	r3, #15
 8001ae6:	d904      	bls.n	8001af2 <HAL_RCC_OscConfig+0x50a>
 8001ae8:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8001aec:	480a      	ldr	r0, [pc, #40]	; (8001b18 <HAL_RCC_OscConfig+0x530>)
 8001aee:	f7fe ffdc 	bl	8000aaa <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_RCC_OscConfig+0x538>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af8:	f7ff f948 	bl	8000d8c <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001afe:	e011      	b.n	8001b24 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b00:	f7ff f944 	bl	8000d8c <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d90a      	bls.n	8001b24 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e08a      	b.n	8001c28 <HAL_RCC_OscConfig+0x640>
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800
 8001b18:	080027f0 	.word	0x080027f0
 8001b1c:	40007000 	.word	0x40007000
 8001b20:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b24:	4b42      	ldr	r3, [pc, #264]	; (8001c30 <HAL_RCC_OscConfig+0x648>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1e7      	bne.n	8001b00 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69da      	ldr	r2, [r3, #28]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	019b      	lsls	r3, r3, #6
 8001b40:	431a      	orrs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b46:	085b      	lsrs	r3, r3, #1
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	041b      	lsls	r3, r3, #16
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b52:	061b      	lsls	r3, r3, #24
 8001b54:	4936      	ldr	r1, [pc, #216]	; (8001c30 <HAL_RCC_OscConfig+0x648>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b5a:	4b36      	ldr	r3, [pc, #216]	; (8001c34 <HAL_RCC_OscConfig+0x64c>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7ff f914 	bl	8000d8c <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b68:	f7ff f910 	bl	8000d8c <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e056      	b.n	8001c28 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7a:	4b2d      	ldr	r3, [pc, #180]	; (8001c30 <HAL_RCC_OscConfig+0x648>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x580>
 8001b86:	e04e      	b.n	8001c26 <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b88:	4b2a      	ldr	r3, [pc, #168]	; (8001c34 <HAL_RCC_OscConfig+0x64c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8e:	f7ff f8fd 	bl	8000d8c <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b96:	f7ff f8f9 	bl	8000d8c <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e03f      	b.n	8001c28 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba8:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <HAL_RCC_OscConfig+0x648>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1f0      	bne.n	8001b96 <HAL_RCC_OscConfig+0x5ae>
 8001bb4:	e037      	b.n	8001c26 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d101      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e032      	b.n	8001c28 <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bc2:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <HAL_RCC_OscConfig+0x648>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d028      	beq.n	8001c22 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d121      	bne.n	8001c22 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d11a      	bne.n	8001c22 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bf8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d111      	bne.n	8001c22 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c08:	085b      	lsrs	r3, r3, #1
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d107      	bne.n	8001c22 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d001      	beq.n	8001c26 <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40023800 	.word	0x40023800
 8001c34:	42470060 	.word	0x42470060

08001c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e174      	b.n	8001f36 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x24>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b0f      	cmp	r3, #15
 8001c5a:	d904      	bls.n	8001c66 <HAL_RCC_ClockConfig+0x2e>
 8001c5c:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8001c60:	487b      	ldr	r0, [pc, #492]	; (8001e50 <HAL_RCC_ClockConfig+0x218>)
 8001c62:	f7fe ff22 	bl	8000aaa <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d019      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x68>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d016      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x68>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d013      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x68>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d010      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x68>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	d00d      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x68>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	2b05      	cmp	r3, #5
 8001c88:	d00a      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x68>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	2b06      	cmp	r3, #6
 8001c8e:	d007      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x68>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	2b07      	cmp	r3, #7
 8001c94:	d004      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x68>
 8001c96:	f240 215d 	movw	r1, #605	; 0x25d
 8001c9a:	486d      	ldr	r0, [pc, #436]	; (8001e50 <HAL_RCC_ClockConfig+0x218>)
 8001c9c:	f7fe ff05 	bl	8000aaa <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca0:	4b6c      	ldr	r3, [pc, #432]	; (8001e54 <HAL_RCC_ClockConfig+0x21c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d90c      	bls.n	8001cc8 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cae:	4b69      	ldr	r3, [pc, #420]	; (8001e54 <HAL_RCC_ClockConfig+0x21c>)
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb6:	4b67      	ldr	r3, [pc, #412]	; (8001e54 <HAL_RCC_ClockConfig+0x21c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d001      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e136      	b.n	8001f36 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d049      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ce0:	4b5d      	ldr	r3, [pc, #372]	; (8001e58 <HAL_RCC_ClockConfig+0x220>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	4a5c      	ldr	r2, [pc, #368]	; (8001e58 <HAL_RCC_ClockConfig+0x220>)
 8001ce6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0308 	and.w	r3, r3, #8
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d005      	beq.n	8001d04 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cf8:	4b57      	ldr	r3, [pc, #348]	; (8001e58 <HAL_RCC_ClockConfig+0x220>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	4a56      	ldr	r2, [pc, #344]	; (8001e58 <HAL_RCC_ClockConfig+0x220>)
 8001cfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d024      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x11e>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b80      	cmp	r3, #128	; 0x80
 8001d12:	d020      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x11e>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b90      	cmp	r3, #144	; 0x90
 8001d1a:	d01c      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x11e>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	2ba0      	cmp	r3, #160	; 0xa0
 8001d22:	d018      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x11e>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2bb0      	cmp	r3, #176	; 0xb0
 8001d2a:	d014      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x11e>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2bc0      	cmp	r3, #192	; 0xc0
 8001d32:	d010      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x11e>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2bd0      	cmp	r3, #208	; 0xd0
 8001d3a:	d00c      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x11e>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	2be0      	cmp	r3, #224	; 0xe0
 8001d42:	d008      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x11e>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	2bf0      	cmp	r3, #240	; 0xf0
 8001d4a:	d004      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x11e>
 8001d4c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8001d50:	483f      	ldr	r0, [pc, #252]	; (8001e50 <HAL_RCC_ClockConfig+0x218>)
 8001d52:	f7fe feaa 	bl	8000aaa <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d56:	4b40      	ldr	r3, [pc, #256]	; (8001e58 <HAL_RCC_ClockConfig+0x220>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	493d      	ldr	r1, [pc, #244]	; (8001e58 <HAL_RCC_ClockConfig+0x220>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d059      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d010      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x166>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d00c      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x166>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d008      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x166>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d004      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x166>
 8001d94:	f240 2187 	movw	r1, #647	; 0x287
 8001d98:	482d      	ldr	r0, [pc, #180]	; (8001e50 <HAL_RCC_ClockConfig+0x218>)
 8001d9a:	f7fe fe86 	bl	8000aaa <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d107      	bne.n	8001db6 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da6:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <HAL_RCC_ClockConfig+0x220>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d119      	bne.n	8001de6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e0bf      	b.n	8001f36 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d003      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc6:	4b24      	ldr	r3, [pc, #144]	; (8001e58 <HAL_RCC_ClockConfig+0x220>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d109      	bne.n	8001de6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e0af      	b.n	8001f36 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd6:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <HAL_RCC_ClockConfig+0x220>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e0a7      	b.n	8001f36 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001de6:	4b1c      	ldr	r3, [pc, #112]	; (8001e58 <HAL_RCC_ClockConfig+0x220>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f023 0203 	bic.w	r2, r3, #3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4919      	ldr	r1, [pc, #100]	; (8001e58 <HAL_RCC_ClockConfig+0x220>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df8:	f7fe ffc8 	bl	8000d8c <HAL_GetTick>
 8001dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e00:	f7fe ffc4 	bl	8000d8c <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e08f      	b.n	8001f36 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <HAL_RCC_ClockConfig+0x220>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 020c 	and.w	r2, r3, #12
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d1eb      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e28:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <HAL_RCC_ClockConfig+0x21c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d212      	bcs.n	8001e5c <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <HAL_RCC_ClockConfig+0x21c>)
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3e:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <HAL_RCC_ClockConfig+0x21c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d007      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e072      	b.n	8001f36 <HAL_RCC_ClockConfig+0x2fe>
 8001e50:	080027f0 	.word	0x080027f0
 8001e54:	40023c00 	.word	0x40023c00
 8001e58:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d025      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d018      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x26a>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e78:	d013      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x26a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001e82:	d00e      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x26a>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001e8c:	d009      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x26a>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8001e96:	d004      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x26a>
 8001e98:	f240 21c5 	movw	r1, #709	; 0x2c5
 8001e9c:	4828      	ldr	r0, [pc, #160]	; (8001f40 <HAL_RCC_ClockConfig+0x308>)
 8001e9e:	f7fe fe04 	bl	8000aaa <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea2:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <HAL_RCC_ClockConfig+0x30c>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	4925      	ldr	r1, [pc, #148]	; (8001f44 <HAL_RCC_ClockConfig+0x30c>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d026      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d018      	beq.n	8001efa <HAL_RCC_ClockConfig+0x2c2>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ed0:	d013      	beq.n	8001efa <HAL_RCC_ClockConfig+0x2c2>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001eda:	d00e      	beq.n	8001efa <HAL_RCC_ClockConfig+0x2c2>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001ee4:	d009      	beq.n	8001efa <HAL_RCC_ClockConfig+0x2c2>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8001eee:	d004      	beq.n	8001efa <HAL_RCC_ClockConfig+0x2c2>
 8001ef0:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8001ef4:	4812      	ldr	r0, [pc, #72]	; (8001f40 <HAL_RCC_ClockConfig+0x308>)
 8001ef6:	f7fe fdd8 	bl	8000aaa <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001efa:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <HAL_RCC_ClockConfig+0x30c>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	490e      	ldr	r1, [pc, #56]	; (8001f44 <HAL_RCC_ClockConfig+0x30c>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f0e:	f000 f821 	bl	8001f54 <HAL_RCC_GetSysClockFreq>
 8001f12:	4602      	mov	r2, r0
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_RCC_ClockConfig+0x30c>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	490a      	ldr	r1, [pc, #40]	; (8001f48 <HAL_RCC_ClockConfig+0x310>)
 8001f20:	5ccb      	ldrb	r3, [r1, r3]
 8001f22:	fa22 f303 	lsr.w	r3, r2, r3
 8001f26:	4a09      	ldr	r2, [pc, #36]	; (8001f4c <HAL_RCC_ClockConfig+0x314>)
 8001f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f2a:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <HAL_RCC_ClockConfig+0x318>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fee8 	bl	8000d04 <HAL_InitTick>

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	080027f0 	.word	0x080027f0
 8001f44:	40023800 	.word	0x40023800
 8001f48:	08002864 	.word	0x08002864
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	20000004 	.word	0x20000004

08001f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f54:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f58:	b084      	sub	sp, #16
 8001f5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	2300      	movs	r3, #0
 8001f66:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f6c:	4b67      	ldr	r3, [pc, #412]	; (800210c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 030c 	and.w	r3, r3, #12
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d00d      	beq.n	8001f94 <HAL_RCC_GetSysClockFreq+0x40>
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	f200 80bd 	bhi.w	80020f8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d002      	beq.n	8001f88 <HAL_RCC_GetSysClockFreq+0x34>
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d003      	beq.n	8001f8e <HAL_RCC_GetSysClockFreq+0x3a>
 8001f86:	e0b7      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f88:	4b61      	ldr	r3, [pc, #388]	; (8002110 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f8a:	60bb      	str	r3, [r7, #8]
       break;
 8001f8c:	e0b7      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f8e:	4b61      	ldr	r3, [pc, #388]	; (8002114 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001f90:	60bb      	str	r3, [r7, #8]
      break;
 8001f92:	e0b4      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f94:	4b5d      	ldr	r3, [pc, #372]	; (800210c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f9c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f9e:	4b5b      	ldr	r3, [pc, #364]	; (800210c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d04d      	beq.n	8002046 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001faa:	4b58      	ldr	r3, [pc, #352]	; (800210c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	099b      	lsrs	r3, r3, #6
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	f04f 0300 	mov.w	r3, #0
 8001fb6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001fba:	f04f 0100 	mov.w	r1, #0
 8001fbe:	ea02 0800 	and.w	r8, r2, r0
 8001fc2:	ea03 0901 	and.w	r9, r3, r1
 8001fc6:	4640      	mov	r0, r8
 8001fc8:	4649      	mov	r1, r9
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	f04f 0300 	mov.w	r3, #0
 8001fd2:	014b      	lsls	r3, r1, #5
 8001fd4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001fd8:	0142      	lsls	r2, r0, #5
 8001fda:	4610      	mov	r0, r2
 8001fdc:	4619      	mov	r1, r3
 8001fde:	ebb0 0008 	subs.w	r0, r0, r8
 8001fe2:	eb61 0109 	sbc.w	r1, r1, r9
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	f04f 0300 	mov.w	r3, #0
 8001fee:	018b      	lsls	r3, r1, #6
 8001ff0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ff4:	0182      	lsls	r2, r0, #6
 8001ff6:	1a12      	subs	r2, r2, r0
 8001ff8:	eb63 0301 	sbc.w	r3, r3, r1
 8001ffc:	f04f 0000 	mov.w	r0, #0
 8002000:	f04f 0100 	mov.w	r1, #0
 8002004:	00d9      	lsls	r1, r3, #3
 8002006:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800200a:	00d0      	lsls	r0, r2, #3
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	eb12 0208 	adds.w	r2, r2, r8
 8002014:	eb43 0309 	adc.w	r3, r3, r9
 8002018:	f04f 0000 	mov.w	r0, #0
 800201c:	f04f 0100 	mov.w	r1, #0
 8002020:	0259      	lsls	r1, r3, #9
 8002022:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002026:	0250      	lsls	r0, r2, #9
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	4610      	mov	r0, r2
 800202e:	4619      	mov	r1, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	461a      	mov	r2, r3
 8002034:	f04f 0300 	mov.w	r3, #0
 8002038:	f7fe f8d6 	bl	80001e8 <__aeabi_uldivmod>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4613      	mov	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	e04a      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002046:	4b31      	ldr	r3, [pc, #196]	; (800210c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	099b      	lsrs	r3, r3, #6
 800204c:	461a      	mov	r2, r3
 800204e:	f04f 0300 	mov.w	r3, #0
 8002052:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002056:	f04f 0100 	mov.w	r1, #0
 800205a:	ea02 0400 	and.w	r4, r2, r0
 800205e:	ea03 0501 	and.w	r5, r3, r1
 8002062:	4620      	mov	r0, r4
 8002064:	4629      	mov	r1, r5
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	014b      	lsls	r3, r1, #5
 8002070:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002074:	0142      	lsls	r2, r0, #5
 8002076:	4610      	mov	r0, r2
 8002078:	4619      	mov	r1, r3
 800207a:	1b00      	subs	r0, r0, r4
 800207c:	eb61 0105 	sbc.w	r1, r1, r5
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	018b      	lsls	r3, r1, #6
 800208a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800208e:	0182      	lsls	r2, r0, #6
 8002090:	1a12      	subs	r2, r2, r0
 8002092:	eb63 0301 	sbc.w	r3, r3, r1
 8002096:	f04f 0000 	mov.w	r0, #0
 800209a:	f04f 0100 	mov.w	r1, #0
 800209e:	00d9      	lsls	r1, r3, #3
 80020a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020a4:	00d0      	lsls	r0, r2, #3
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	1912      	adds	r2, r2, r4
 80020ac:	eb45 0303 	adc.w	r3, r5, r3
 80020b0:	f04f 0000 	mov.w	r0, #0
 80020b4:	f04f 0100 	mov.w	r1, #0
 80020b8:	0299      	lsls	r1, r3, #10
 80020ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80020be:	0290      	lsls	r0, r2, #10
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4610      	mov	r0, r2
 80020c6:	4619      	mov	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	461a      	mov	r2, r3
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	f7fe f88a 	bl	80001e8 <__aeabi_uldivmod>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4613      	mov	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	0c1b      	lsrs	r3, r3, #16
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	3301      	adds	r3, #1
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f4:	60bb      	str	r3, [r7, #8]
      break;
 80020f6:	e002      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020f8:	4b05      	ldr	r3, [pc, #20]	; (8002110 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80020fa:	60bb      	str	r3, [r7, #8]
      break;
 80020fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020fe:	68bb      	ldr	r3, [r7, #8]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800210a:	bf00      	nop
 800210c:	40023800 	.word	0x40023800
 8002110:	00f42400 	.word	0x00f42400
 8002114:	007a1200 	.word	0x007a1200

08002118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800211c:	4b03      	ldr	r3, [pc, #12]	; (800212c <HAL_RCC_GetHCLKFreq+0x14>)
 800211e:	681b      	ldr	r3, [r3, #0]
}
 8002120:	4618      	mov	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	20000000 	.word	0x20000000

08002130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002134:	f7ff fff0 	bl	8002118 <HAL_RCC_GetHCLKFreq>
 8002138:	4602      	mov	r2, r0
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <HAL_RCC_GetPCLK1Freq+0x20>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	0a9b      	lsrs	r3, r3, #10
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	4903      	ldr	r1, [pc, #12]	; (8002154 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002146:	5ccb      	ldrb	r3, [r1, r3]
 8002148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800214c:	4618      	mov	r0, r3
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40023800 	.word	0x40023800
 8002154:	08002874 	.word	0x08002874

08002158 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800215c:	f7ff ffdc 	bl	8002118 <HAL_RCC_GetHCLKFreq>
 8002160:	4602      	mov	r2, r0
 8002162:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	0b5b      	lsrs	r3, r3, #13
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	4903      	ldr	r1, [pc, #12]	; (800217c <HAL_RCC_GetPCLK2Freq+0x24>)
 800216e:	5ccb      	ldrb	r3, [r1, r3]
 8002170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002174:	4618      	mov	r0, r3
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40023800 	.word	0x40023800
 800217c:	08002874 	.word	0x08002874

08002180 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e0a0      	b.n	80022d4 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d02c      	beq.n	80021f4 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a4f      	ldr	r2, [pc, #316]	; (80022dc <HAL_UART_Init+0x15c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d00e      	beq.n	80021c2 <HAL_UART_Init+0x42>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a4d      	ldr	r2, [pc, #308]	; (80022e0 <HAL_UART_Init+0x160>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d009      	beq.n	80021c2 <HAL_UART_Init+0x42>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a4c      	ldr	r2, [pc, #304]	; (80022e4 <HAL_UART_Init+0x164>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d004      	beq.n	80021c2 <HAL_UART_Init+0x42>
 80021b8:	f44f 71b9 	mov.w	r1, #370	; 0x172
 80021bc:	484a      	ldr	r0, [pc, #296]	; (80022e8 <HAL_UART_Init+0x168>)
 80021be:	f7fe fc74 	bl	8000aaa <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d028      	beq.n	800221c <HAL_UART_Init+0x9c>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021d2:	d023      	beq.n	800221c <HAL_UART_Init+0x9c>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021dc:	d01e      	beq.n	800221c <HAL_UART_Init+0x9c>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021e6:	d019      	beq.n	800221c <HAL_UART_Init+0x9c>
 80021e8:	f240 1173 	movw	r1, #371	; 0x173
 80021ec:	483e      	ldr	r0, [pc, #248]	; (80022e8 <HAL_UART_Init+0x168>)
 80021ee:	f7fe fc5c 	bl	8000aaa <assert_failed>
 80021f2:	e013      	b.n	800221c <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a38      	ldr	r2, [pc, #224]	; (80022dc <HAL_UART_Init+0x15c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00e      	beq.n	800221c <HAL_UART_Init+0x9c>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a37      	ldr	r2, [pc, #220]	; (80022e0 <HAL_UART_Init+0x160>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d009      	beq.n	800221c <HAL_UART_Init+0x9c>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a35      	ldr	r2, [pc, #212]	; (80022e4 <HAL_UART_Init+0x164>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d004      	beq.n	800221c <HAL_UART_Init+0x9c>
 8002212:	f240 1177 	movw	r1, #375	; 0x177
 8002216:	4834      	ldr	r0, [pc, #208]	; (80022e8 <HAL_UART_Init+0x168>)
 8002218:	f7fe fc47 	bl	8000aaa <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d009      	beq.n	8002238 <HAL_UART_Init+0xb8>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800222c:	d004      	beq.n	8002238 <HAL_UART_Init+0xb8>
 800222e:	f240 1179 	movw	r1, #377	; 0x179
 8002232:	482d      	ldr	r0, [pc, #180]	; (80022e8 <HAL_UART_Init+0x168>)
 8002234:	f7fe fc39 	bl	8000aaa <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d009      	beq.n	8002254 <HAL_UART_Init+0xd4>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002248:	d004      	beq.n	8002254 <HAL_UART_Init+0xd4>
 800224a:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800224e:	4826      	ldr	r0, [pc, #152]	; (80022e8 <HAL_UART_Init+0x168>)
 8002250:	f7fe fc2b 	bl	8000aaa <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d106      	bne.n	800226e <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7fe fcb7 	bl	8000bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2224      	movs	r2, #36	; 0x24
 8002272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002284:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f830 	bl	80022ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691a      	ldr	r2, [r3, #16]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800229a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695a      	ldr	r2, [r3, #20]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022aa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022ba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2220      	movs	r2, #32
 80022c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2220      	movs	r2, #32
 80022ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40011000 	.word	0x40011000
 80022e0:	40004400 	.word	0x40004400
 80022e4:	40011400 	.word	0x40011400
 80022e8:	08002828 	.word	0x08002828

080022ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022f0:	b09f      	sub	sp, #124	; 0x7c
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	66f8      	str	r0, [r7, #108]	; 0x6c
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80022f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	4b9b      	ldr	r3, [pc, #620]	; (8002568 <UART_SetConfig+0x27c>)
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d904      	bls.n	800230a <UART_SetConfig+0x1e>
 8002300:	f640 6156 	movw	r1, #3670	; 0xe56
 8002304:	4899      	ldr	r0, [pc, #612]	; (800256c <UART_SetConfig+0x280>)
 8002306:	f7fe fbd0 	bl	8000aaa <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800230a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d009      	beq.n	8002326 <UART_SetConfig+0x3a>
 8002312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800231a:	d004      	beq.n	8002326 <UART_SetConfig+0x3a>
 800231c:	f640 6157 	movw	r1, #3671	; 0xe57
 8002320:	4892      	ldr	r0, [pc, #584]	; (800256c <UART_SetConfig+0x280>)
 8002322:	f7fe fbc2 	bl	8000aaa <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8002326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00e      	beq.n	800234c <UART_SetConfig+0x60>
 800232e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002336:	d009      	beq.n	800234c <UART_SetConfig+0x60>
 8002338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002340:	d004      	beq.n	800234c <UART_SetConfig+0x60>
 8002342:	f640 6158 	movw	r1, #3672	; 0xe58
 8002346:	4889      	ldr	r0, [pc, #548]	; (800256c <UART_SetConfig+0x280>)
 8002348:	f7fe fbaf 	bl	8000aaa <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800234c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800234e:	695a      	ldr	r2, [r3, #20]
 8002350:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8002354:	4013      	ands	r3, r2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d103      	bne.n	8002362 <UART_SetConfig+0x76>
 800235a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d104      	bne.n	800236c <UART_SetConfig+0x80>
 8002362:	f640 6159 	movw	r1, #3673	; 0xe59
 8002366:	4881      	ldr	r0, [pc, #516]	; (800256c <UART_SetConfig+0x280>)
 8002368:	f7fe fb9f 	bl	8000aaa <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800236c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002378:	68d9      	ldr	r1, [r3, #12]
 800237a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	ea40 0301 	orr.w	r3, r0, r1
 8002382:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	431a      	orrs	r2, r3
 800238e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	431a      	orrs	r2, r3
 8002394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	4313      	orrs	r3, r2
 800239a:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800239c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80023a6:	f021 010c 	bic.w	r1, r1, #12
 80023aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023b0:	430b      	orrs	r3, r1
 80023b2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80023be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023c0:	6999      	ldr	r1, [r3, #24]
 80023c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	ea40 0301 	orr.w	r3, r0, r1
 80023ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4b67      	ldr	r3, [pc, #412]	; (8002570 <UART_SetConfig+0x284>)
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d004      	beq.n	80023e0 <UART_SetConfig+0xf4>
 80023d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	4b66      	ldr	r3, [pc, #408]	; (8002574 <UART_SetConfig+0x288>)
 80023dc:	429a      	cmp	r2, r3
 80023de:	d103      	bne.n	80023e8 <UART_SetConfig+0xfc>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023e0:	f7ff feba 	bl	8002158 <HAL_RCC_GetPCLK2Freq>
 80023e4:	6778      	str	r0, [r7, #116]	; 0x74
 80023e6:	e002      	b.n	80023ee <UART_SetConfig+0x102>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023e8:	f7ff fea2 	bl	8002130 <HAL_RCC_GetPCLK1Freq>
 80023ec:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023f6:	f040 80c1 	bne.w	800257c <UART_SetConfig+0x290>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023fc:	461c      	mov	r4, r3
 80023fe:	f04f 0500 	mov.w	r5, #0
 8002402:	4622      	mov	r2, r4
 8002404:	462b      	mov	r3, r5
 8002406:	1891      	adds	r1, r2, r2
 8002408:	6439      	str	r1, [r7, #64]	; 0x40
 800240a:	415b      	adcs	r3, r3
 800240c:	647b      	str	r3, [r7, #68]	; 0x44
 800240e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002412:	1912      	adds	r2, r2, r4
 8002414:	eb45 0303 	adc.w	r3, r5, r3
 8002418:	f04f 0000 	mov.w	r0, #0
 800241c:	f04f 0100 	mov.w	r1, #0
 8002420:	00d9      	lsls	r1, r3, #3
 8002422:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002426:	00d0      	lsls	r0, r2, #3
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	1911      	adds	r1, r2, r4
 800242e:	6639      	str	r1, [r7, #96]	; 0x60
 8002430:	416b      	adcs	r3, r5
 8002432:	667b      	str	r3, [r7, #100]	; 0x64
 8002434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	461a      	mov	r2, r3
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	1891      	adds	r1, r2, r2
 8002440:	63b9      	str	r1, [r7, #56]	; 0x38
 8002442:	415b      	adcs	r3, r3
 8002444:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002446:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800244a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800244e:	f7fd fecb 	bl	80001e8 <__aeabi_uldivmod>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4b48      	ldr	r3, [pc, #288]	; (8002578 <UART_SetConfig+0x28c>)
 8002458:	fba3 2302 	umull	r2, r3, r3, r2
 800245c:	095b      	lsrs	r3, r3, #5
 800245e:	011e      	lsls	r6, r3, #4
 8002460:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002462:	461c      	mov	r4, r3
 8002464:	f04f 0500 	mov.w	r5, #0
 8002468:	4622      	mov	r2, r4
 800246a:	462b      	mov	r3, r5
 800246c:	1891      	adds	r1, r2, r2
 800246e:	6339      	str	r1, [r7, #48]	; 0x30
 8002470:	415b      	adcs	r3, r3
 8002472:	637b      	str	r3, [r7, #52]	; 0x34
 8002474:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002478:	1912      	adds	r2, r2, r4
 800247a:	eb45 0303 	adc.w	r3, r5, r3
 800247e:	f04f 0000 	mov.w	r0, #0
 8002482:	f04f 0100 	mov.w	r1, #0
 8002486:	00d9      	lsls	r1, r3, #3
 8002488:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800248c:	00d0      	lsls	r0, r2, #3
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	1911      	adds	r1, r2, r4
 8002494:	65b9      	str	r1, [r7, #88]	; 0x58
 8002496:	416b      	adcs	r3, r5
 8002498:	65fb      	str	r3, [r7, #92]	; 0x5c
 800249a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	461a      	mov	r2, r3
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	1891      	adds	r1, r2, r2
 80024a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80024a8:	415b      	adcs	r3, r3
 80024aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024b0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80024b4:	f7fd fe98 	bl	80001e8 <__aeabi_uldivmod>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4b2e      	ldr	r3, [pc, #184]	; (8002578 <UART_SetConfig+0x28c>)
 80024be:	fba3 1302 	umull	r1, r3, r3, r2
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	2164      	movs	r1, #100	; 0x64
 80024c6:	fb01 f303 	mul.w	r3, r1, r3
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	3332      	adds	r3, #50	; 0x32
 80024d0:	4a29      	ldr	r2, [pc, #164]	; (8002578 <UART_SetConfig+0x28c>)
 80024d2:	fba2 2303 	umull	r2, r3, r2, r3
 80024d6:	095b      	lsrs	r3, r3, #5
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024de:	441e      	add	r6, r3
 80024e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024e2:	4618      	mov	r0, r3
 80024e4:	f04f 0100 	mov.w	r1, #0
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	1894      	adds	r4, r2, r2
 80024ee:	623c      	str	r4, [r7, #32]
 80024f0:	415b      	adcs	r3, r3
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
 80024f4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024f8:	1812      	adds	r2, r2, r0
 80024fa:	eb41 0303 	adc.w	r3, r1, r3
 80024fe:	f04f 0400 	mov.w	r4, #0
 8002502:	f04f 0500 	mov.w	r5, #0
 8002506:	00dd      	lsls	r5, r3, #3
 8002508:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800250c:	00d4      	lsls	r4, r2, #3
 800250e:	4622      	mov	r2, r4
 8002510:	462b      	mov	r3, r5
 8002512:	1814      	adds	r4, r2, r0
 8002514:	653c      	str	r4, [r7, #80]	; 0x50
 8002516:	414b      	adcs	r3, r1
 8002518:	657b      	str	r3, [r7, #84]	; 0x54
 800251a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	461a      	mov	r2, r3
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	1891      	adds	r1, r2, r2
 8002526:	61b9      	str	r1, [r7, #24]
 8002528:	415b      	adcs	r3, r3
 800252a:	61fb      	str	r3, [r7, #28]
 800252c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002530:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002534:	f7fd fe58 	bl	80001e8 <__aeabi_uldivmod>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <UART_SetConfig+0x28c>)
 800253e:	fba3 1302 	umull	r1, r3, r3, r2
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	2164      	movs	r1, #100	; 0x64
 8002546:	fb01 f303 	mul.w	r3, r1, r3
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	3332      	adds	r3, #50	; 0x32
 8002550:	4a09      	ldr	r2, [pc, #36]	; (8002578 <UART_SetConfig+0x28c>)
 8002552:	fba2 2303 	umull	r2, r3, r2, r3
 8002556:	095b      	lsrs	r3, r3, #5
 8002558:	f003 0207 	and.w	r2, r3, #7
 800255c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4432      	add	r2, r6
 8002562:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002564:	e0c4      	b.n	80026f0 <UART_SetConfig+0x404>
 8002566:	bf00      	nop
 8002568:	00a037a0 	.word	0x00a037a0
 800256c:	08002828 	.word	0x08002828
 8002570:	40011000 	.word	0x40011000
 8002574:	40011400 	.word	0x40011400
 8002578:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800257c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800257e:	461c      	mov	r4, r3
 8002580:	f04f 0500 	mov.w	r5, #0
 8002584:	4622      	mov	r2, r4
 8002586:	462b      	mov	r3, r5
 8002588:	1891      	adds	r1, r2, r2
 800258a:	6139      	str	r1, [r7, #16]
 800258c:	415b      	adcs	r3, r3
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002594:	1912      	adds	r2, r2, r4
 8002596:	eb45 0303 	adc.w	r3, r5, r3
 800259a:	f04f 0000 	mov.w	r0, #0
 800259e:	f04f 0100 	mov.w	r1, #0
 80025a2:	00d9      	lsls	r1, r3, #3
 80025a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025a8:	00d0      	lsls	r0, r2, #3
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	eb12 0804 	adds.w	r8, r2, r4
 80025b2:	eb43 0905 	adc.w	r9, r3, r5
 80025b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f04f 0100 	mov.w	r1, #0
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	f04f 0300 	mov.w	r3, #0
 80025c8:	008b      	lsls	r3, r1, #2
 80025ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80025ce:	0082      	lsls	r2, r0, #2
 80025d0:	4640      	mov	r0, r8
 80025d2:	4649      	mov	r1, r9
 80025d4:	f7fd fe08 	bl	80001e8 <__aeabi_uldivmod>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4b47      	ldr	r3, [pc, #284]	; (80026fc <UART_SetConfig+0x410>)
 80025de:	fba3 2302 	umull	r2, r3, r3, r2
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	011e      	lsls	r6, r3, #4
 80025e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025e8:	4618      	mov	r0, r3
 80025ea:	f04f 0100 	mov.w	r1, #0
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	1894      	adds	r4, r2, r2
 80025f4:	60bc      	str	r4, [r7, #8]
 80025f6:	415b      	adcs	r3, r3
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025fe:	1812      	adds	r2, r2, r0
 8002600:	eb41 0303 	adc.w	r3, r1, r3
 8002604:	f04f 0400 	mov.w	r4, #0
 8002608:	f04f 0500 	mov.w	r5, #0
 800260c:	00dd      	lsls	r5, r3, #3
 800260e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002612:	00d4      	lsls	r4, r2, #3
 8002614:	4622      	mov	r2, r4
 8002616:	462b      	mov	r3, r5
 8002618:	1814      	adds	r4, r2, r0
 800261a:	64bc      	str	r4, [r7, #72]	; 0x48
 800261c:	414b      	adcs	r3, r1
 800261e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	4618      	mov	r0, r3
 8002626:	f04f 0100 	mov.w	r1, #0
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	f04f 0300 	mov.w	r3, #0
 8002632:	008b      	lsls	r3, r1, #2
 8002634:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002638:	0082      	lsls	r2, r0, #2
 800263a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800263e:	f7fd fdd3 	bl	80001e8 <__aeabi_uldivmod>
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	4b2d      	ldr	r3, [pc, #180]	; (80026fc <UART_SetConfig+0x410>)
 8002648:	fba3 1302 	umull	r1, r3, r3, r2
 800264c:	095b      	lsrs	r3, r3, #5
 800264e:	2164      	movs	r1, #100	; 0x64
 8002650:	fb01 f303 	mul.w	r3, r1, r3
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	3332      	adds	r3, #50	; 0x32
 800265a:	4a28      	ldr	r2, [pc, #160]	; (80026fc <UART_SetConfig+0x410>)
 800265c:	fba2 2303 	umull	r2, r3, r2, r3
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002666:	441e      	add	r6, r3
 8002668:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800266a:	4618      	mov	r0, r3
 800266c:	f04f 0100 	mov.w	r1, #0
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	1894      	adds	r4, r2, r2
 8002676:	603c      	str	r4, [r7, #0]
 8002678:	415b      	adcs	r3, r3
 800267a:	607b      	str	r3, [r7, #4]
 800267c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002680:	1812      	adds	r2, r2, r0
 8002682:	eb41 0303 	adc.w	r3, r1, r3
 8002686:	f04f 0400 	mov.w	r4, #0
 800268a:	f04f 0500 	mov.w	r5, #0
 800268e:	00dd      	lsls	r5, r3, #3
 8002690:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002694:	00d4      	lsls	r4, r2, #3
 8002696:	4622      	mov	r2, r4
 8002698:	462b      	mov	r3, r5
 800269a:	eb12 0a00 	adds.w	sl, r2, r0
 800269e:	eb43 0b01 	adc.w	fp, r3, r1
 80026a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f04f 0100 	mov.w	r1, #0
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	008b      	lsls	r3, r1, #2
 80026b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80026ba:	0082      	lsls	r2, r0, #2
 80026bc:	4650      	mov	r0, sl
 80026be:	4659      	mov	r1, fp
 80026c0:	f7fd fd92 	bl	80001e8 <__aeabi_uldivmod>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <UART_SetConfig+0x410>)
 80026ca:	fba3 1302 	umull	r1, r3, r3, r2
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	2164      	movs	r1, #100	; 0x64
 80026d2:	fb01 f303 	mul.w	r3, r1, r3
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	3332      	adds	r3, #50	; 0x32
 80026dc:	4a07      	ldr	r2, [pc, #28]	; (80026fc <UART_SetConfig+0x410>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	f003 020f 	and.w	r2, r3, #15
 80026e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4432      	add	r2, r6
 80026ee:	609a      	str	r2, [r3, #8]
}
 80026f0:	bf00      	nop
 80026f2:	377c      	adds	r7, #124	; 0x7c
 80026f4:	46bd      	mov	sp, r7
 80026f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026fa:	bf00      	nop
 80026fc:	51eb851f 	.word	0x51eb851f

08002700 <__libc_init_array>:
 8002700:	b570      	push	{r4, r5, r6, lr}
 8002702:	4d0d      	ldr	r5, [pc, #52]	; (8002738 <__libc_init_array+0x38>)
 8002704:	4c0d      	ldr	r4, [pc, #52]	; (800273c <__libc_init_array+0x3c>)
 8002706:	1b64      	subs	r4, r4, r5
 8002708:	10a4      	asrs	r4, r4, #2
 800270a:	2600      	movs	r6, #0
 800270c:	42a6      	cmp	r6, r4
 800270e:	d109      	bne.n	8002724 <__libc_init_array+0x24>
 8002710:	4d0b      	ldr	r5, [pc, #44]	; (8002740 <__libc_init_array+0x40>)
 8002712:	4c0c      	ldr	r4, [pc, #48]	; (8002744 <__libc_init_array+0x44>)
 8002714:	f000 f820 	bl	8002758 <_init>
 8002718:	1b64      	subs	r4, r4, r5
 800271a:	10a4      	asrs	r4, r4, #2
 800271c:	2600      	movs	r6, #0
 800271e:	42a6      	cmp	r6, r4
 8002720:	d105      	bne.n	800272e <__libc_init_array+0x2e>
 8002722:	bd70      	pop	{r4, r5, r6, pc}
 8002724:	f855 3b04 	ldr.w	r3, [r5], #4
 8002728:	4798      	blx	r3
 800272a:	3601      	adds	r6, #1
 800272c:	e7ee      	b.n	800270c <__libc_init_array+0xc>
 800272e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002732:	4798      	blx	r3
 8002734:	3601      	adds	r6, #1
 8002736:	e7f2      	b.n	800271e <__libc_init_array+0x1e>
 8002738:	08002884 	.word	0x08002884
 800273c:	08002884 	.word	0x08002884
 8002740:	08002884 	.word	0x08002884
 8002744:	08002888 	.word	0x08002888

08002748 <memset>:
 8002748:	4402      	add	r2, r0
 800274a:	4603      	mov	r3, r0
 800274c:	4293      	cmp	r3, r2
 800274e:	d100      	bne.n	8002752 <memset+0xa>
 8002750:	4770      	bx	lr
 8002752:	f803 1b01 	strb.w	r1, [r3], #1
 8002756:	e7f9      	b.n	800274c <memset+0x4>

08002758 <_init>:
 8002758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800275a:	bf00      	nop
 800275c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800275e:	bc08      	pop	{r3}
 8002760:	469e      	mov	lr, r3
 8002762:	4770      	bx	lr

08002764 <_fini>:
 8002764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002766:	bf00      	nop
 8002768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800276a:	bc08      	pop	{r3}
 800276c:	469e      	mov	lr, r3
 800276e:	4770      	bx	lr
